-- MySQL dump 10.13  Distrib 8.0.18, for Win64 (x86_64)
--
-- Host: localhost    Database: dataset_evaluation_feat
-- ------------------------------------------------------
-- Server version	8.0.18

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `gimp`
--

DROP TABLE IF EXISTS `gimp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `gimp` (
  `name` varchar(255) DEFAULT NULL,
  `release_number` varchar(255) DEFAULT NULL,
  `commit_hash` longtext,
  `commit_author` varchar(255) DEFAULT NULL,
  `commit_msg` longtext,
  `filename` varchar(255) DEFAULT NULL,
  `nloc` varchar(255) DEFAULT NULL,
  `cycomplexity` varchar(255) DEFAULT NULL,
  `lines_added` varchar(255) DEFAULT NULL,
  `lines_removed` varchar(255) DEFAULT NULL,
  `corrective` varchar(255) DEFAULT NULL,
  `bug_introducing` varchar(255) DEFAULT NULL,
  `refactor` varchar(255) DEFAULT NULL,
  `date` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `gimp`
--

LOCK TABLES `gimp` WRITE;
/*!40000 ALTER TABLE `gimp` DISABLE KEYS */;
INSERT INTO `gimp` VALUES ('gimp','2_8_2','8bbfc9e5cf4728b9cafc4edf32ab52c32375f9b7','Michael Natterer','bug 675558 - switch from lcms-1 to lcms-2  applied modified patch from hartmut kuhse which ports to lcms-2.','display-filter-lcms.c','536','84','71','17','true','false','false','2012-09-03 20:03:53+02:00'),('gimp','2_8_2','8bbfc9e5cf4728b9cafc4edf32ab52c32375f9b7','Michael Natterer','bug 675558 - switch from lcms-1 to lcms-2  applied modified patch from hartmut kuhse which ports to lcms-2.','jpeg-load.c','666','121','5','5','true','false','false','2012-09-03 20:03:53+02:00'),('gimp','2_8_2','809521557a38a06ff03f050e0f4314deded738a2','Michael Natterer','plug-ins: formatting and untabify in file-faxg3','faxg3.c','404','63','310','250','false','false','false','2012-09-17 22:27:15+02:00'),('gimp','2_8_2','809521557a38a06ff03f050e0f4314deded738a2','Michael Natterer','plug-ins: formatting and untabify in file-faxg3','faxg3.c','404','63','310','250','false','false','false','2012-09-17 22:27:15+02:00'),('gimp','2_8_2','fd53a33de9f3829bb5833390a7b15eb693caccaf','Michael Natterer','plug-ins: port file-faxg3 to gegl','faxg3.c','406','63','22','14','false','false','false','2012-09-17 23:31:02+02:00'),('gimp','2_8_2','244b3766bdb2e890b15d0dcd8e4eadb30256a75e','Michael Natterer','plug-ins: port file-bmp to gegl','bmp-read.c','758','157','45','47','false','false','false','2012-09-21 19:19:03+02:00'),('gimp','2_8_2','aa0a24164cf3131ab2db683d9b5bd505693baa01','Michael Natterer','plug-ins: port file-gif-save to gegl','file-gif-save.c','1509','172','50','46','false','false','false','2012-09-22 23:19:32+02:00'),('gimp','2_8_2','a2c8759fbf1d2ca5f164f36b2f06bdd31fd87e68','Michael Natterer','bug 684923 - fix script-fu build on openbsd/netbsd  apply patch from brad smith which defines ai_addrconfig if it doesn\'t exist.','script-fu-server.c','741','132','4','0','true','false','false','2012-10-02 22:11:27+02:00'),('gimp','2_8_2','4218d9342f68de4fedec166df0a64585dc64081a','Michael Natterer','bug 663582 - brush outline is too slow  one more try: merge the spirit of alexia\'s patch, but don\'t disable the timeout, only make sure the minimum fps is also applied when drawing is triggered by gimp_draw_tool_resume().','gimpdrawtool.c','902','141','15','8','true','true','false','2012-10-06 00:27:49+02:00'),('gimp','2_8_2','85445c88c3ec593af2f0436c13e0ed2010d73086','Simone Karin Lehmann','bug 683617 - can\'t take screenshots (mac os)  use the standard mac os x screenshot utulity, it supports everything: delay, capture decoration, capture region, even the mouse pointer.','screenshot.c','987','134','122','5','true','true','false','2012-10-14 17:07:42+02:00'),('gimp','2_8_2','85445c88c3ec593af2f0436c13e0ed2010d73086','Simone Karin Lehmann','bug 683617 - can\'t take screenshots (mac os)  use the standard mac os x screenshot utulity, it supports everything: delay, capture decoration, capture region, even the mouse pointer.','screenshot.c','987','134','122','5','true','true','false','2012-10-14 17:07:42+02:00'),('gimp','2_8_2','85445c88c3ec593af2f0436c13e0ed2010d73086','Simone Karin Lehmann','bug 683617 - can\'t take screenshots (mac os)  use the standard mac os x screenshot utulity, it supports everything: delay, capture decoration, capture region, even the mouse pointer.','screenshot.c','987','134','122','5','true','true','false','2012-10-14 17:07:42+02:00'),('gimp','2_8_2','bc87bf5fe9223733253253b1364efe1cb614d6d7','Michael Natterer','plug-ins: fix #ifdefs to fix build error and warnings in screenshot.c','screenshot.c','987','134','14','12','true','false','false','2012-10-17 11:53:45+02:00'),('gimp','2_8_2','eac70cc513ef3a073b6f3d2fe3794d13d97b204c','Michael Natterer','bug 686850 - help system: gimp crashes and closes without saving changes  when gimp_plug_in_close()ing a plug-in (such as when cancel is clicked), make sure we don\'t leak the proc_frames of all temporary procedures the plug-in is currently running. by properly disposing the gimppluginprocframe, the progress window and its cancel button in above bug get destroed on first click, and the user has no chance of trying to kill an already finalized plug-in again.','gimpplugin.c','727','110','8','4','true','false','false','2012-11-05 01:12:21+01:00'),('gimp','2_8_2','6a33951aa6f7292b7c652d14052eefd8e61d1365','Michael Natterer','bug 687851 - gimp crashes on colors > desaturate  don\'t install the frame rate limiting draw timeout when resuming a draw tool that is not active, so accidential timeout installation from whatever tool dispose code can\'t happen.','gimpdrawtool.c','907','143','12','6','true','false','false','2012-11-07 23:21:13+01:00'),('gimp','2_8_2','0b56aa0d133a9743dca74701a54f21cf9c609f7d','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  on osx, call [nsapp activateignoringotherapps] when a plug-in dialog is shown, so the plug-in process becomes the active app, and the dialog gets focussed.  in order to avoid doing this in gimpdialog (which is also used in the core), do it in gimp_ui_init() which all interactive plug-ins call, and when gimp_temp_proc_run() is called interactively, to catch repeated activation of an already running plug-in.  also, set gimpdialog\'s initial position to gtk_win_pos_center, or they will pop up in the top left corner.  inspired by patches from simone karin lehmann and daniel sabo.','gimp.c','1214','249','13','2','true','true','false','2012-11-07 23:44:35+01:00'),('gimp','2_8_2','0b56aa0d133a9743dca74701a54f21cf9c609f7d','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  on osx, call [nsapp activateignoringotherapps] when a plug-in dialog is shown, so the plug-in process becomes the active app, and the dialog gets focussed.  in order to avoid doing this in gimpdialog (which is also used in the core), do it in gimp_ui_init() which all interactive plug-ins call, and when gimp_temp_proc_run() is called interactively, to catch repeated activation of an already running plug-in.  also, set gimpdialog\'s initial position to gtk_win_pos_center, or they will pop up in the top left corner.  inspired by patches from simone karin lehmann and daniel sabo.','gimp.c','1214','249','13','2','true','true','false','2012-11-07 23:44:35+01:00'),('gimp','2_8_2','0b56aa0d133a9743dca74701a54f21cf9c609f7d','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  on osx, call [nsapp activateignoringotherapps] when a plug-in dialog is shown, so the plug-in process becomes the active app, and the dialog gets focussed.  in order to avoid doing this in gimpdialog (which is also used in the core), do it in gimp_ui_init() which all interactive plug-ins call, and when gimp_temp_proc_run() is called interactively, to catch repeated activation of an already running plug-in.  also, set gimpdialog\'s initial position to gtk_win_pos_center, or they will pop up in the top left corner.  inspired by patches from simone karin lehmann and daniel sabo.','gimpui.c','150','24','8','0','true','true','false','2012-11-07 23:44:35+01:00'),('gimp','2_8_2','0b56aa0d133a9743dca74701a54f21cf9c609f7d','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  on osx, call [nsapp activateignoringotherapps] when a plug-in dialog is shown, so the plug-in process becomes the active app, and the dialog gets focussed.  in order to avoid doing this in gimpdialog (which is also used in the core), do it in gimp_ui_init() which all interactive plug-ins call, and when gimp_temp_proc_run() is called interactively, to catch repeated activation of an already running plug-in.  also, set gimpdialog\'s initial position to gtk_win_pos_center, or they will pop up in the top left corner.  inspired by patches from simone karin lehmann and daniel sabo.','gimpdialog.c','421','57','4','0','true','true','false','2012-11-07 23:44:35+01:00'),('gimp','2_8_2','5f26f5402e9cfcaf80ca6015db74706c2f5dd308','Jehan','libgimpbase: move g_get_home_dir() to the scope where it\'s used  fixes warning: variable \'home\' set but not used [-wunused-but-set-variable]','gimpenv.c','447','88','6','9','true','false','false','2012-11-11 14:16:07+01:00'),('gimp','2_8_2','60e0cfe55ccdc99500d969ab5e9f8ff5f464b3db','Jehan','bug 166643 - gimp support for the xdg basedir spec  new configuration directory scheme, consistent across platforms, and following standards.  unix platforms (except osx): $xdg_config_home/gimp/{gimp_app_version} windows: %appdata%/gimp/{gimp_app_version} osx: nsapplicationsupportdirectory/gimp/{gimp_app_version}','gimp-user-install.c','449','70','57','11','true','false','false','2012-11-11 17:55:31+01:00'),('gimp','2_8_2','60e0cfe55ccdc99500d969ab5e9f8ff5f464b3db','Jehan','bug 166643 - gimp support for the xdg basedir spec  new configuration directory scheme, consistent across platforms, and following standards.  unix platforms (except osx): $xdg_config_home/gimp/{gimp_app_version} windows: %appdata%/gimp/{gimp_app_version} osx: nsapplicationsupportdirectory/gimp/{gimp_app_version}','gimp-user-install.c','449','70','57','11','true','false','false','2012-11-11 17:55:31+01:00'),('gimp','2_8_2','60e0cfe55ccdc99500d969ab5e9f8ff5f464b3db','Jehan','bug 166643 - gimp support for the xdg basedir spec  new configuration directory scheme, consistent across platforms, and following standards.  unix platforms (except osx): $xdg_config_home/gimp/{gimp_app_version} windows: %appdata%/gimp/{gimp_app_version} osx: nsapplicationsupportdirectory/gimp/{gimp_app_version}','gimp-user-install.c','449','70','57','11','true','false','false','2012-11-11 17:55:31+01:00'),('gimp','2_8_2','60e0cfe55ccdc99500d969ab5e9f8ff5f464b3db','Jehan','bug 166643 - gimp support for the xdg basedir spec  new configuration directory scheme, consistent across platforms, and following standards.  unix platforms (except osx): $xdg_config_home/gimp/{gimp_app_version} windows: %appdata%/gimp/{gimp_app_version} osx: nsapplicationsupportdirectory/gimp/{gimp_app_version}','gimpenv.c','442','87','75','57','true','true','false','2012-11-11 17:55:31+01:00'),('gimp','2_8_2','60e0cfe55ccdc99500d969ab5e9f8ff5f464b3db','Jehan','bug 166643 - gimp support for the xdg basedir spec  new configuration directory scheme, consistent across platforms, and following standards.  unix platforms (except osx): $xdg_config_home/gimp/{gimp_app_version} windows: %appdata%/gimp/{gimp_app_version} osx: nsapplicationsupportdirectory/gimp/{gimp_app_version}','gimpenv.c','442','87','75','57','true','true','false','2012-11-11 17:55:31+01:00'),('gimp','2_8_2','60e0cfe55ccdc99500d969ab5e9f8ff5f464b3db','Jehan','bug 166643 - gimp support for the xdg basedir spec  new configuration directory scheme, consistent across platforms, and following standards.  unix platforms (except osx): $xdg_config_home/gimp/{gimp_app_version} windows: %appdata%/gimp/{gimp_app_version} osx: nsapplicationsupportdirectory/gimp/{gimp_app_version}','gimpenv.c','442','87','75','57','true','true','false','2012-11-11 17:55:31+01:00'),('gimp','2_8_2','9e5ed1e70acfef7a488982ae42ea08c32e18a52d','Michael Natterer','bug 684003 - when using the main window in secondary monitor...  if gimp_window_set_transient_for() fails (due to platform restrictions), at least set gtk_win_pos_center on the window, so it gets centered on the monitor where the mouse is. this also removes the need for osx specific centering code in gimpdialog (bug 677776).','gimpdialog.c','420','56','0','4','true','false','false','2012-11-11 21:09:46+01:00'),('gimp','2_8_2','018fc32727d66a70359d95ee4f13ea98e775d684','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  on osx, set all transient plug-in windows to utility, so they appear on top of the image window, which is a bad hack. see the comment in gimp_window_set_transient_for_display().','gimpui.c','160','28','16','0','true','true','false','2012-11-11 21:19:17+01:00'),('gimp','2_8_2','ab801970ca44fbfbbc2902d33f2ac6b70dd0da0f','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  simone found a better way than setting plug-in windows to utility: simply call the proper api, [nsapp arrangeinfront: nil].','gimpui.c','172','29','17','10','true','false','false','2012-11-12 23:42:15+01:00'),('gimp','2_8_2','83de53ee4de56c41694b7196345586e8f6578d23','Michael Natterer','bug 677776 - filter popup windows get hidden behind main image window  apply modified patch from simone karin lehmann which makes sure script-fu gets properly hidden after the dialog is done.','script-fu-interface.c','721','118','16','0','true','false','false','2012-11-13 00:47:34+01:00'),('gimp','2_8_2','9de0ba8114a54d78e3fee067fe21357fb48cc682','Michael Natterer','plug-ins: port file-pat to gio  this can now serve as proper example for both gio and gegl porting of a file plug-in.','file-pat.c','467','51','52','66','false','false','false','2012-11-17 12:51:12+01:00'),('gimp','2_8_2','9de0ba8114a54d78e3fee067fe21357fb48cc682','Michael Natterer','plug-ins: port file-pat to gio  this can now serve as proper example for both gio and gegl porting of a file plug-in.','file-pat.c','467','51','52','66','false','false','false','2012-11-17 12:51:12+01:00'),('gimp','2_8_2','7a2c8c24916c22acb38679c57721050da7b6bf45','Michael Natterer','plug-ins: port file-gbr to gio','file-gbr.c','636','84','128','114','false','false','false','2012-11-18 22:56:29+01:00'),('gimp','2_8_2','7a2c8c24916c22acb38679c57721050da7b6bf45','Michael Natterer','plug-ins: port file-gbr to gio','file-gbr.c','636','84','128','114','false','false','false','2012-11-18 22:56:29+01:00'),('gimp','2_8_2','5d5c73de989659d83e33e0e25d66d58478657f91','Michael Natterer','plug-ins: port file-xbm to gegl','file-xbm.c','1007','154','32','35','false','false','false','2012-11-18 23:22:07+01:00'),('gimp','2_8_2','0dc55b12375d8ce9f9c8649c6fb50baef5305bcd','Michael Natterer','plug-ins: port file-gih to gio and clean it up quite a bit  also remove support for loading version 1 brushes, i have no clue why this code was even there, because the plug-in never saved such brushes.','file-gih.c','956','118','157','264','false','false','false','2012-11-19 09:06:18+01:00'),('gimp','2_8_2','0dc55b12375d8ce9f9c8649c6fb50baef5305bcd','Michael Natterer','plug-ins: port file-gih to gio and clean it up quite a bit  also remove support for loading version 1 brushes, i have no clue why this code was even there, because the plug-in never saved such brushes.','file-gih.c','956','118','157','264','false','false','false','2012-11-19 09:06:18+01:00'),('gimp','2_8_2','9932e05c9b84a0a8475e7243aad41ed91ecf2767','Michael Natterer','plug-ins: remove file-xjt  it will never hold high bit depths using jpeg compression, and nobody is going to port it to layer groups and whatever either.  wolfgang says it\'s obsolete, whoever needs to convert old files can use 2.8.','xjt.c','None','None','0','3712','false','false','false','2012-11-21 00:12:36+01:00'),('gimp','2_8_2','9932e05c9b84a0a8475e7243aad41ed91ecf2767','Michael Natterer','plug-ins: remove file-xjt  it will never hold high bit depths using jpeg compression, and nobody is going to port it to layer groups and whatever either.  wolfgang says it\'s obsolete, whoever needs to convert old files can use 2.8.','xjt.c','None','None','0','3712','false','false','false','2012-11-21 00:12:36+01:00'),('gimp','2_8_2','24f2a24b99e43587779f2d9e57304624f2cdd5e8','Michael Natterer','plug-ins: completely reformat fits-io.*','fits-io.c','1498','343','1796','1498','false','false','false','2013-01-12 00:46:09+01:00'),('gimp','2_8_2','24f2a24b99e43587779f2d9e57304624f2cdd5e8','Michael Natterer','plug-ins: completely reformat fits-io.*','fits-io.h','123','0','119','92','false','false','false','2013-01-12 00:46:09+01:00'),('gimp','2_8_2','2491a3a088b263bf62834c5f3d6912c853bcc9d0','Michael Natterer','app: add (disabled) support for rendering the image at high resolution  for what apple calls \"retina\". disabled because the gdk api to figure the scale factor doesn\'t exist yet.','gimpdisplayshell-render.c','110','12','25','7','false','true','false','2013-01-18 16:36:22+01:00'),('gimp','2_8_2','2491a3a088b263bf62834c5f3d6912c853bcc9d0','Michael Natterer','app: add (disabled) support for rendering the image at high resolution  for what apple calls \"retina\". disabled because the gdk api to figure the scale factor doesn\'t exist yet.','gimpdisplayshell-render.h','6','0','8','0','false','false','false','2013-01-18 16:36:22+01:00'),('gimp','2_8_2','5379a2377ec4b4df240d253823a9740e529a7671','Ludovic Rousseau','bug 675510 - tw_func.h contains windows-specific types  put the stuff in #ifdef g_os_win32','tw_func.h','48','0','2','0','true','false','false','2013-01-19 18:39:15+01:00'),('gimp','2_8_2','cfe5dd8bd4b9306e2fce6360a1301057d1bb6eb7','Kővágó, Zoltán','file-xwd: support 32bit (argb) xwd import  no saving for now...','file-xwd.c','1868','373','176','21','false','false','false','2013-01-19 22:03:06+01:00'),('gimp','2_8_2','057d5be9700075ac341f37e00dfde1a38cd8aacc','Jehan','bug 688316 - get_special_folder reverted to exact same implementation as glib.  i used shgetfolderlocation, deprecated, which i thought was a better idea than shgetspecialfolderlocation, deprecated as well, but also unsupported. but it apparently won\'t compile on xp. reverts back to glib exact copy.','gimpenv.c','442','87','2','2','true','false','false','2013-01-24 01:09:32+09:00'),('gimp','2_8_2','b7361669e87e6a9e2985ed9095cd1fde8f3b07a8','Michael Natterer','libgimpbase: clean up the linux relocation code  by removing all but the toplevel prefix getter from gimpreloc.c it was 1) confusing 2) sometimes trying to subsitute the runtime prefix twice and 3) sometimes ignoring configure-given directories within the configure-prefix. this should all be fixed now, and done in one less place.','gimpenv.c','460','88','33','13','true','false','false','2013-01-27 22:26:29+01:00'),('gimp','2_8_2','8dcbcfec9ebc23c2c407aa3e977ebe30351d4b3f','Michael Natterer','libgimpbase: use g_win32_get_package_installation_directory_of_module()  instead of reimplementing it.','gimpenv.c','442','85','4','34','false','false','false','2013-01-27 22:38:35+01:00'),('gimp','2_8_2','4a81849e364b892325f0b87af040cd7727988fdb','Chris Wilson','app: use shm transport for data transfer for display  recent cairo uses shm transports when available, and exposes the ability for its users to manage images shared between it and the display. this allows us to eliminate copies, and if the architecture supports it even to upload directly into gpu addressable memory without any copies (all in normal system memory so we suffer no performance penalty when applying the filters). the caveat is that we need to be aware of the synchronize requirements, the cairo_surface_flush and cairo_surface_mark_dirty, around access to the transport image. to reduce the frequency of these barriers, we can subdivide the transport image into small chunks as to satisfy individual updates and delay the synchronisation barrier until we are forced to reuse earlier pixels.  note this bumps the required cairo version to 1.12, and please be aware that the xshm transport requires bug fixes from cairo.git (will be 1.12.12)  v2: after further reflections with mitch, we realized we can share the transport surface between all canvases by attaching it to the common screen.  v3: fix a couple of typos in insert_node() introduced when switching variables names.  v4: encapsulating within an image surface rather than a subsurface was hiding the backing shm segment from cairo, causing it to allocate further shm resources to stream the upload. we should be able to use a sub-surface here, but it is more convenient to wrap the pixels in an image surface for rendering the filters (and conveniently masking the callee flushes from invalidating our parent transport surface).  cc: michael natterer <mitch@gimp.org>','gimpdisplay-transport.h','8','0','44','0','true','false','false','2013-02-02 13:59:59+01:00'),('gimp','2_8_2','4a81849e364b892325f0b87af040cd7727988fdb','Chris Wilson','app: use shm transport for data transfer for display  recent cairo uses shm transports when available, and exposes the ability for its users to manage images shared between it and the display. this allows us to eliminate copies, and if the architecture supports it even to upload directly into gpu addressable memory without any copies (all in normal system memory so we suffer no performance penalty when applying the filters). the caveat is that we need to be aware of the synchronize requirements, the cairo_surface_flush and cairo_surface_mark_dirty, around access to the transport image. to reduce the frequency of these barriers, we can subdivide the transport image into small chunks as to satisfy individual updates and delay the synchronisation barrier until we are forced to reuse earlier pixels.  note this bumps the required cairo version to 1.12, and please be aware that the xshm transport requires bug fixes from cairo.git (will be 1.12.12)  v2: after further reflections with mitch, we realized we can share the transport surface between all canvases by attaching it to the common screen.  v3: fix a couple of typos in insert_node() introduced when switching variables names.  v4: encapsulating within an image surface rather than a subsurface was hiding the backing shm segment from cairo, causing it to allocate further shm resources to stream the upload. we should be able to use a sub-surface here, but it is more convenient to wrap the pixels in an image surface for rendering the filters (and conveniently masking the callee flushes from invalidating our parent transport surface).  cc: michael natterer <mitch@gimp.org>','gimpdisplayshell-render.h','6','0','0','14','true','false','false','2013-02-02 13:59:59+01:00'),('gimp','2_8_4','37d4f656d49051410c99156d86c8a4cb8ccafa12','Michael Natterer','bug 678925 - debugging plugins with windows  apply patch from hartmut kuhse that enables plug-in debugging on windows by stopping the process using windows api, and providing a small executable \"gimp-plugin-resume.exe\" to resume the stopped plug-in.','gimp.c','1258','254','42','1','true','true','false','2013-02-23 16:25:58+01:00'),('gimp','2_8_4','ceebfe5d01b2642b9c6333f41f3e40632837becb','Elle Stone','bug 694679 - lcms plug-in half-floating point support  again, this time in an #ifdef: add support for half-floating point icc profile conversions.','lcms.c','1327','159','16','0','true','false','false','2013-02-26 09:12:02+01:00'),('gimp','2_8_4','194ef70d7446a627c274135c54498d3092c9b356','Petr Kubiznak','bug 593167 - support windows in gimp_get_default_unit()  function gimp_get_default_unit ported for windows using standard getlocaleinfo() function (from windows.h).','gimp-utils.c','611','124','22','1','true','false','false','2013-03-30 10:19:57-04:00'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_lex.c','924','136','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_lex.c','924','136','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_lex.c','924','136','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_lex.c','924','136','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_lex.c','924','136','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_lex.c','924','136','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.c','780','110','322','286','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.h','24','0','29','10','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.h','24','0','29','10','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_cern_parse.h','24','0','29','10','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_lex.c','1027','156','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_lex.c','1027','156','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_lex.c','1027','156','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_lex.c','1027','156','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_lex.c','1027','156','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_lex.c','1027','156','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.c','1013','141','423','354','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.h','40','0','30','11','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.h','40','0','30','11','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_csim_parse.h','40','0','30','11','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_lex.c','907','138','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_lex.c','907','138','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_lex.c','907','138','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_lex.c','907','138','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_lex.c','907','138','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_lex.c','907','138','30','33','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.c','785','111','323','288','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.h','25','0','29','10','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.h','25','0','29','10','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','0e0ed6e1ef5e6339bb696b071c235bb1a6928a6e','Mukund Sivaraman','imagemap: rebuild parsers (after .y update)','imap_ncsa_parse.h','25','0','29','10','false','false','false','2013-04-11 20:43:48+05:18'),('gimp','2_8_4','1e17f0aed17aa7e40457445afdb34b1c031e606d','Michael Natterer','app: port gimpimagemap to use the new drawable filters  which makes live update more responsive and removes tons of code, but adds a delay with progress when finally committing the effect.','gimpimagemap.c','280','31','87','384','false','false','false','2013-04-12 14:35:27+02:00'),('gimp','2_8_4','8d89efaff5bd4f397e711b2b511d2841e39b8526','Mukund Sivaraman','file-exr: add initial implementation (loader)  this is a basic implementation of an openexr loader. this \"infrastructure\" is required for any further work. it consists of:  * the build system changes.  * a c wrapper around the openexr library, which is necessary as it\'s not   possible to intermix gimp\'s code with c++ code.  * a basic image loader. chroma is not supported currently, and some   other weird files like multi-view files are unsupported. these can be   added when necessary. there is no ui, but it should be straightforward   to add new features like this on top of this work.','openexr-wrapper.h','33','0','61','0','false','false','false','2013-05-04 12:50:54+05:18'),('gimp','2_8_4','5fa0df17dd2523a9556862535209894779ddd27a','Barak Itkin','add a skeleton for the seamless clone tool, based on the cage tool','gimpseamlessclonetool.c','396','38','712','0','false','false','false','2013-05-15 00:25:30+02:00'),('gimp','2_8_4','0b37c9e37451b65c831cd3dae6b82d1f7c968273','Michael Natterer','app: some general minor seamless-clone cleanup, and make it build','gimpseamlessclonetool.c','477','53','45','40','false','false','false','2013-05-15 00:39:06+02:00'),('gimp','2_8_4','fc38bc300eae25cf3e884c2a3fedf74d5fe3abd8','Michael Natterer','plug-ins: remove plug-in cubism and add a pdb compat proc for it','cubism.c','None','None','0','878','false','false','false','2013-05-19 22:38:03+02:00'),('gimp','2_8_4','a7eb1ee1a2323d81299cca973066a112793a94dc','Michael Natterer','app: #ifdef warp debug printfs away','gimpwarptool.c','462','51','14','5','false','false','false','2013-05-22 01:04:29+02:00'),('gimp','2_8_4','b601018e33eb3a8d80a37e246ccac685795ecbc0','Michael Natterer','app: update the display in a \"changed\" handler of the warp stroke  and get the update extents from the signal\'s \"roi\" parameter. should be more correct but produces more artifacts for me. either this patch is broken, or (more likely) this triggers a bug.','gimpwarptool.c','462','51','34','45','true','false','false','2013-05-22 22:43:32+02:00'),('gimp','2_8_4','e378a29a9199cccbab8e09ccc55546015298a6e4','Massimo Valentini','app: fix warping an offset layer with selection','gimpwarptool.c','552','71','2','7','true','false','false','2013-05-23 19:03:31+02:00'),('gimp','2_8_4','c4460e846b55304afd262add2ca61dd69bf468a5','Michael Natterer','bug 622934 - migrate from dbus-glib to glib\'s gdbus  drop the glib-dbus dependency and port stuff to gdbus. use it unconditionally if not on windows or osx. it seels to work just like before but i have no idea if everything is really correct.','gui-unique.c','257','29','86','76','true','false','false','2013-05-24 23:25:47+02:00'),('gimp','2_8_4','c4460e846b55304afd262add2ca61dd69bf468a5','Michael Natterer','bug 622934 - migrate from dbus-glib to glib\'s gdbus  drop the glib-dbus dependency and port stuff to gdbus. use it unconditionally if not on windows or osx. it seels to work just like before but i have no idea if everything is really correct.','gui-unique.c','257','29','86','76','true','false','false','2013-05-24 23:25:47+02:00'),('gimp','2_8_4','df2257072733d6a9d72a8e2b8d461a5ad070d218','Michael Natterer','app: simplify gimp_tool_set_[active]_modifier_state()  by factoring out bits of code that were repeated 8 times, also make sure we actually pass true or false as gboolean, and not some (state & modifier).','gimptool.c','1047','137','51','39','false','false','false','2013-05-25 02:09:33+02:00'),('gimp','2_8_4','66ff5dd70b6b6611bd9468838c3ae7c76559324c','Michael Natterer','remove all calls to g_type_init(), it\'s deprecated  the type system is initialized automatically now.','app.c','176','23','0','2','false','false','false','2013-05-25 22:44:20+02:00'),('gimp','2_8_4','a7dc8d4429ab76fc67e95703a8ee3ed40a8bb7fc','Michael Natterer','app: remove gimp_get_number_of_processors(), use g_get_num_processors()','gimpgeglconfig.c','176','19','1','1','false','false','false','2013-05-25 22:50:23+02:00'),('gimp','2_8_4','a7dc8d4429ab76fc67e95703a8ee3ed40a8bb7fc','Michael Natterer','app: remove gimp_get_number_of_processors(), use g_get_num_processors()','gimp-utils.c','627','121','0','21','false','false','false','2013-05-25 22:50:23+02:00'),('gimp','2_8_4','a7dc8d4429ab76fc67e95703a8ee3ed40a8bb7fc','Michael Natterer','app: remove gimp_get_number_of_processors(), use g_get_num_processors()','gimp-utils.c','627','121','0','21','false','false','false','2013-05-25 22:50:23+02:00'),('gimp','2_8_4','f5496f8df880e637d1fa89ace072c1a27f7f9bbe','Michael Natterer','bug 701038 - errors when compiling for windows  don\'t use #elifdef, apparently it\'s a gccism.','gui-unique.c','257','31','4','5','true','false','false','2013-05-26 17:02:20+02:00'),('gimp','2_8_4','7f8a9331ed43b236b9aa0200d25bf3ac45d3d035','Michael Natterer','plug-ins: remove crufty and obfuscating #ifdefs from file-gif-save','file-gif-save.c','1504','216','18','76','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','7f8a9331ed43b236b9aa0200d25bf3ac45d3d035','Michael Natterer','plug-ins: remove crufty and obfuscating #ifdefs from file-gif-save','file-gif-save.c','1504','216','18','76','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','7f8a9331ed43b236b9aa0200d25bf3ac45d3d035','Michael Natterer','plug-ins: remove crufty and obfuscating #ifdefs from file-gif-save','file-gif-save.c','1504','216','18','76','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','66f6fb9aa647661779231403155323a8ad51ea84','Michael Natterer','plug-ins: always build all gif compression functions, but always use lzw','file-gif-save.c','1507','216','8','24','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','66f6fb9aa647661779231403155323a8ad51ea84','Michael Natterer','plug-ins: always build all gif compression functions, but always use lzw','file-gif-save.c','1507','216','8','24','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','b0834ecfbe40c5e04a6cb3ba67d59909dd71636b','Michael Natterer','plug-ins: remove more cruft from file-gif-save','file-gif-save.c','1507','215','90','115','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','b0834ecfbe40c5e04a6cb3ba67d59909dd71636b','Michael Natterer','plug-ins: remove more cruft from file-gif-save','file-gif-save.c','1507','215','90','115','false','false','false','2013-05-27 22:56:01+02:00'),('gimp','2_8_4','30e1f39ba6abbff1c385dd3cc127e6fd5fce239c','Michael Natterer','app: remove support for the old geglconfig:cache-size property','gimp-gegl.c','58','7','8','36','false','false','false','2013-06-06 00:03:26+02:00'),('gimp','2_8_4','264d09b4176fa1c042854f1f2aa9f4ed603f8c18','Clayton Walker','rename colour and greyscale to color and grayscale respectively','file-gif-load.c','873','155','4','4','false','false','false','2013-06-06 23:26:16+02:00'),('gimp','2_8_4','264d09b4176fa1c042854f1f2aa9f4ed603f8c18','Clayton Walker','rename colour and greyscale to color and grayscale respectively','file-gif-save.c','1507','215','15','15','false','false','false','2013-06-06 23:26:16+02:00'),('gimp','2_8_4','3cf2c4dd87773514d21ee3d4032eb1e2a03c96d6','Michael Natterer','app: use the \"no-cpu-accel\" command line option again  call gimp_cpu_accel_set_use() in app_run(). add \"use_cpu_accel\" parameter to gimp_new() and keep it around in the gimp instance. pass the flag to plug-ins again.','gimppluginmanager-call.c','246','28','1','4','false','false','false','2013-06-19 20:45:17+02:00'),('gimp','2_8_6','bb755960620ad648a264a99b5edb67357c513e04','Michael Natterer','bug 683152 - preview thumbnails in file open dialog causes error in 2.8.2  port gimp_thumb_file_test() to gio which seems to get its stat() calls right on all platforms.','gimpthumb-utils.c','486','86','46','21','true','false','false','2013-06-28 22:44:19+02:00'),('gimp','2_8_6','bb755960620ad648a264a99b5edb67357c513e04','Michael Natterer','bug 683152 - preview thumbnails in file open dialog causes error in 2.8.2  port gimp_thumb_file_test() to gio which seems to get its stat() calls right on all platforms.','gimpthumb-utils.c','486','86','46','21','true','false','false','2013-06-28 22:44:19+02:00'),('gimp','2_8_6','09682d62ae675125e91d537c3ccbdd4571a0b28e','Massimo Valentini','bug 629941 - gimp doesn\'t exit properly when quitting while loading images  gimp\'s \"exit\" signal was emitted before the handler was connected.  don\'t start loading command line images or batch processing before app_exit_after_callback() is connected. make sure we don\'t use dangling main loop pointers or try to stop a non-running main loop.','app.c','188','27','32','21','true','false','false','2013-07-04 21:36:40+02:00'),('gimp','2_8_6','97d14ebda3d5790b92f8bfa2a4b3291ccb9289e6','Jehan','bug 672100: gimptool returns wrong system plugin dir if libdir has been customized.  on unix platforms, use the actual libdir value, which has been set at compile time.','gimptool.c','645','153','9','0','true','false','false','2013-07-05 23:46:54+09:00'),('gimp','2_8_6','767a5a321708c4ca19bbf1e103a3988fcc404cc5','Michael Natterer','bug 703113 - plug-ins are queried on every launch  port gimp_datafiles_read_directories() to gio which seems to get its stat() calls right on all platforms.','gimpdatafiles.c','149','28','39','26','true','false','false','2013-07-12 15:18:38+02:00'),('gimp','2_8_6','767a5a321708c4ca19bbf1e103a3988fcc404cc5','Michael Natterer','bug 703113 - plug-ins are queried on every launch  port gimp_datafiles_read_directories() to gio which seems to get its stat() calls right on all platforms.','gimpdatafiles.c','149','28','39','26','true','false','false','2013-07-12 15:18:38+02:00'),('gimp','2_8_6','a129f84c68568cc96c3f06a40e8bab6fba035a01','Jehan','bug 704592 - only load language lists once at gui startup.  improvements: - setenv/getenv() are not thread-safe, hence they should be run only at startup before any threading occurs. - it is counter-productive to load the huge iso-639 xml file each time the user opens the preferences dialog or the text tool options.','gimplanguagestore-parser.c','324','59','280','116','true','false','false','2013-07-28 04:46:52+12:00'),('gimp','2_8_6','a129f84c68568cc96c3f06a40e8bab6fba035a01','Jehan','bug 704592 - only load language lists once at gui startup.  improvements: - setenv/getenv() are not thread-safe, hence they should be run only at startup before any threading occurs. - it is counter-productive to load the huge iso-639 xml file each time the user opens the preferences dialog or the text tool options.','gimplanguagestore-parser.c','324','59','280','116','true','false','false','2013-07-28 04:46:52+12:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','ghostscript-8.71-windows.patch','4205','2','4516','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','ghostscript-8.71-windows.patch','4205','2','4516','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','ghostscript-8.71-windows.patch','4205','2','4516','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','ghostscript-8.71-windows.patch','4205','2','4516','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','ghostscript-8.71-windows.patch','4205','2','4516','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','ghostscript-8.71-windows.patch','4205','2','4516','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libjpeg-turbo-boolean.patch','6','0','10','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libjpeg-turbo-boolean.patch','6','0','10','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libjpeg-turbo-int32.patch','12','0','16','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libjpeg-turbo-int32.patch','12','0','16','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libjpeg-turbo-int32.patch','12','0','16','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libmng-1.0.9-dont-leak-zlib-streams.patch','9','0','13','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libsoup-request-file-string-h.patch','12','0','12','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libwmf-0.2.8.4-reducesymbols.patch','341','5','499','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libwmf-0.2.8.4-reducesymbols.patch','341','5','499','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libwmf-0.2.8.4-reducesymbols.patch','341','5','499','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libwmf-0.2.8.4-reducesymbols.patch','341','5','499','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libwmf-0.2.8.4-reducesymbols.patch','341','5','499','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libxslt-1.1.26-w64.patch','18','0','22','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','7e80a4f891310a1c029420cda53c9e1adc9d1f41','Michael Henning','build/win: add a jhbuild project for making windows binaries.  this was originally here: http://github.com/drawoc/windows-gimp-jhbuild','libxslt-1.1.26-w64.patch','18','0','22','0','false','false','false','2013-08-28 16:31:08-04:00'),('gimp','2_8_6','63608cd1455f90e19376c04c516455cf6b2634c2','Michael Natterer','plug-ins: port file-xwd to gegl','file-xwd.c','1873','374','91','79','false','false','false','2013-08-31 02:57:02+02:00'),('gimp','2_8_6','d69b7486920956bc6b2961c35ee9a3805196f1be','Jehan','bug 707755 - reviewing png comment saving algorithm  currently png \"comment\" is saved in itxt (utf-8) if supported, text (iso-8859-1) otherwise. the problem is that some software out there like imagemagick would apparently only read text comments. therefore the replacing algorithm is: 1/ if we would not lose any character in a conversion from utf-8 to iso-8859-1, we save in text, whether or not the platform supports itxt. 2/ if we would lose comment data in the conversion while itxt is supported, we save in itxt. 3/ if itxt is not supported, we save in text anyway and discard any non-convertible character, unless the finale result is an empty string (in which case, we don\'t save any comment).','file-png.c','1565','201','51','19','true','false','false','2013-09-12 12:54:13+12:00'),('gimp','2_8_6','d69b7486920956bc6b2961c35ee9a3805196f1be','Jehan','bug 707755 - reviewing png comment saving algorithm  currently png \"comment\" is saved in itxt (utf-8) if supported, text (iso-8859-1) otherwise. the problem is that some software out there like imagemagick would apparently only read text comments. therefore the replacing algorithm is: 1/ if we would not lose any character in a conversion from utf-8 to iso-8859-1, we save in text, whether or not the platform supports itxt. 2/ if we would lose comment data in the conversion while itxt is supported, we save in itxt. 3/ if itxt is not supported, we save in text anyway and discard any non-convertible character, unless the finale result is an empty string (in which case, we don\'t save any comment).','file-png.c','1565','201','51','19','true','false','false','2013-09-12 12:54:13+12:00'),('gimp','2_8_6','d38f209e2ff5294764ec4882ecab1d66a00e3008','Jehan','plug-ins - compress the png comment when over a given size.','file-png.c','1569','207','21','0','false','false','false','2013-09-12 12:54:22+12:00'),('gimp','2_8_6','198f2514ab03cd77c769b0cea9678fa0deba4f6e','Warren Turkal','app: refactor palette loaders.  i specifically moved the file opening/closing logic to the common code. this makes the code easier to understand for me since there is less duplication. in fact, this commit removes more lines than it adds.','gimppalette-load.c','527','75','72','136','false','false','true','2013-09-17 17:54:54-04:00'),('gimp','2_8_6','5063aada1d44771db49de6f7261dcd38bd8555ea','Téo Mazars','plug-ins,pdb: add compatibility wrappers for mosaic  and remove the old plug-in','mosaic.c','None','None','0','2837','false','false','false','2013-09-23 15:52:08+02:00'),('gimp','2_8_6','5063aada1d44771db49de6f7261dcd38bd8555ea','Téo Mazars','plug-ins,pdb: add compatibility wrappers for mosaic  and remove the old plug-in','mosaic.c','None','None','0','2837','false','false','false','2013-09-23 15:52:08+02:00'),('gimp','2_8_6','5063aada1d44771db49de6f7261dcd38bd8555ea','Téo Mazars','plug-ins,pdb: add compatibility wrappers for mosaic  and remove the old plug-in','mosaic.c','None','None','0','2837','false','false','false','2013-09-23 15:52:08+02:00'),('gimp','2_8_6','aa7e9edc36708aacbd88d825b58d1313ec8dbd79','Michael Natterer','plug-ins: port file-p*m-save to gio','file-pnm.c','1157','151','175','140','false','false','false','2013-10-03 21:44:24+02:00'),('gimp','2_8_6','aa7e9edc36708aacbd88d825b58d1313ec8dbd79','Michael Natterer','plug-ins: port file-p*m-save to gio','file-pnm.c','1157','151','175','140','false','false','false','2013-10-03 21:44:24+02:00'),('gimp','2_8_6','cd7322fd8726b1cd45761e0436c021ffca1bf485','Michael Natterer','app: port xcf loading/saving to gio  but for now restrict it to local files (see bug #709432). thanks to jehan and sven for testing.','xcf-load.c','1535','254','118','115','true','false','false','2013-10-08 21:22:14+02:00'),('gimp','2_8_6','cd7322fd8726b1cd45761e0436c021ffca1bf485','Michael Natterer','app: port xcf loading/saving to gio  but for now restrict it to local files (see bug #709432). thanks to jehan and sven for testing.','xcf.c','328','24','63','68','true','false','false','2013-10-08 21:22:14+02:00'),('gimp','2_8_6','6ee77e5635ced9a9b48959199eca888104f020e6','Jehan','bug 709878 - test-session-* skipped when xvfb-run is unavailable.  also add a gimp_exit_test_skipped #define, to return the skip exit value documented by automake.','test-session-2-6-compatibility.c','24','4','11','0','true','false','false','2013-10-11 21:57:42+13:00'),('gimp','2_8_6','6ee77e5635ced9a9b48959199eca888104f020e6','Jehan','bug 709878 - test-session-* skipped when xvfb-run is unavailable.  also add a gimp_exit_test_skipped #define, to return the skip exit value documented by automake.','test-session-2-8-compatibility-multi-window.c','24','4','12','0','true','false','false','2013-10-11 21:57:42+13:00'),('gimp','2_8_6','6ee77e5635ced9a9b48959199eca888104f020e6','Jehan','bug 709878 - test-session-* skipped when xvfb-run is unavailable.  also add a gimp_exit_test_skipped #define, to return the skip exit value documented by automake.','test-session-2-8-compatibility-single-window.c','24','4','11','0','true','false','false','2013-10-11 21:57:42+13:00'),('gimp','2_8_6','e6ed0a4c500b8bf5435f4eb7ab13a31379acb4e1','Daniel Sabo','use the quartz core graphics api to implement gimp_pick_button_pick when building with gdk quartz.  signed-off-by: clayton walker <clayton.m.walker@gmail.com>','gimppickbutton.c','270','22','24','0','false','true','false','2013-10-11 13:57:49-06:00'),('gimp','2_8_6','e6ed0a4c500b8bf5435f4eb7ab13a31379acb4e1','Daniel Sabo','use the quartz core graphics api to implement gimp_pick_button_pick when building with gdk quartz.  signed-off-by: clayton walker <clayton.m.walker@gmail.com>','gimppickbutton.c','270','22','24','0','false','true','false','2013-10-11 13:57:49-06:00'),('gimp','2_8_6','5466caa0646ad8da028d189088ed3b21f48ecc3f','Michael Natterer','libgimpwidgets: return an opaque color from gimp_pick_button_pick()\'s osx code  and fiddle with whitespace a bit.','gimppickbutton.c','270','22','7','4','false','true','false','2013-10-11 22:52:38+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','app.c','189','27','1','0','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','gimp-user-install.c','469','71','1','2','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','gimpbrushpipe-load.c','176','33','2','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','gimpparasitelist.c','332','46','1','0','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','gimptooloptions.c','281','40','2','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','file-open.c','605','102','2','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','file-save.c','154','20','2','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','main.c','496','66','1','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','gimpinterpreterdb.c','543','109','1','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','unique.c','163','20','1','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','697572ccc0f382423fea1f52a1b366ea63be8000','Michael Natterer','app,libgimp*: fix includes to follow our include policy  - don\'t include <gdk-pixbuf/gdk-pixbuf.h> in headers in app/ - instead, include it in many .c files instead of <glib-object.h>,   finally acknowledging the fact that app/ depends on gdk-pixbuf almost   globally - fix up includes as if libgimpbase depended in gio, which it soon will','gimpconfigwriter.c','424','82','1','1','true','false','false','2013-10-15 01:58:39+02:00'),('gimp','2_8_6','fe481275e2e42a937618366d18cd6aa03bec3b59','Jehan','bug 675554 - fix overriden language environment variables on windows.  if any of the locale environment variables used for ui language is set (language, lc_all, lc_messages and lang), do not let windows\' default ui language override these. language set in gimp preferences still have higher priority.','language.c','696','231','5','1','true','false','false','2013-10-16 00:33:17+13:00'),('gimp','2_8_6','d4790a74fb89f49f03ac4af9b70727cafed84d22','Michael Natterer','app: always disable cl before gegl is initialized  this way we only enable if wanted in gimprc, instead of always enabling, and then disabling again if wanted in gimprc.','app.c','192','27','8','0','false','false','false','2013-10-20 00:34:18+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','sanity.c','431','49','45','0','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','gimpmetadata.c','701','91','945','0','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-load.c','587','103','40','179','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-load.c','587','103','40','179','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-load.c','587','103','40','179','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-load.h','9','0','1','6','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-save.c','972','85','37','365','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-save.c','972','85','37','365','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg-settings.c','246','48','0','4','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','jpeg.c','443','56','43','39','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','psd-image-res-load.c','1053','175','0','131','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','21bed1e2fb438fa5721bddb0573a724ae0024455','Hartmut Kuhse','completely rewrite metadata handling using gexiv2  based on original patches from hartmut kuhse and modified by michael natterer. changes include:  - remove libexif dependency and add a hard dependency on gexiv2 - typedef gexiv2metadata to gimpmetadata to avoid having to   include gexiv2 globally - add basic gimpmetadata handling functions to libgimpbase - add image and image file specific metadata functions to libgimp,   including the exif orientation image rotate dialog - port plug-ins to use the new apis - port file-tiff-save\'s ui to gtkbuilder - add new plug-in \"metadata\" to view the image\'s metadata - keep metadata around as gimpimage member in the core - update the image\'s metadata on image size, resolution and precision   changes - obsolete the old metadata parasites - migrate the old parasites to new gimpmetadata object on xcf load','psd-image-res-load.c','1053','175','0','131','false','false','false','2013-10-27 01:02:17+02:00'),('gimp','2_8_6','ce2822d58f6171c2674ac295207847607ad27ad2','Michael Natterer','plug-ins: remove the old metadata plug-in','interface.c','None','None','0','672','false','false','false','2013-10-27 01:15:37+02:00'),('gimp','2_8_6','ce2822d58f6171c2674ac295207847607ad27ad2','Michael Natterer','plug-ins: remove the old metadata plug-in','interface.c','None','None','0','672','false','false','false','2013-10-27 01:15:37+02:00'),('gimp','2_8_6','ce2822d58f6171c2674ac295207847607ad27ad2','Michael Natterer','plug-ins: remove the old metadata plug-in','xmp-model.c','None','None','0','1067','false','false','false','2013-10-27 01:15:37+02:00'),('gimp','2_8_6','ce2822d58f6171c2674ac295207847607ad27ad2','Michael Natterer','plug-ins: remove the old metadata plug-in','xmp-parse.c','None','None','0','1398','false','false','false','2013-10-27 01:15:37+02:00'),('gimp','2_8_6','ce2822d58f6171c2674ac295207847607ad27ad2','Michael Natterer','plug-ins: remove the old metadata plug-in','xmp-parse.c','None','None','0','1398','false','false','false','2013-10-27 01:15:37+02:00'),('gimp','2_8_6','8db3b4312d7ad3bef4d7a497fe3a77c0dcf73335','Michael Schumacher','global exif -> exif string change (official spelling)','jpeg-load.c','592','105','3','3','false','false','false','2013-10-29 22:48:46+01:00'),('gimp','2_8_8','7bd4d2678add95360fc0c0cfcae8d1bc2dcdf8dc','Michael Natterer','configure, plug-ins, modules: make lcms a hard dependency','jpeg-load.c','455','83','0','14','false','false','false','2013-11-03 21:19:51+01:00'),('gimp','2_8_8','5d675005a63c48a1542a484437690cb9aab5af23','Michael Henning','build/win: upgrade libmng to 2.0.2','libmng-1.0.9-dont-leak-zlib-streams.patch','None','None','0','13','false','false','false','2013-11-06 20:06:01-05:00'),('gimp','2_8_8','e56344294c90e1ba97de5c134b50c4c522f0808f','Daniel Sabo','app: port to gtk-mac-integration  replace deprecated carbon apis with cocoa.  includes code by: simone karin lehmann michael natterer daniel sabo','gui-unique.c','280','29','100','63','false','false','false','2013-11-10 18:22:01+01:00'),('gimp','2_8_8','e56344294c90e1ba97de5c134b50c4c522f0808f','Daniel Sabo','app: port to gtk-mac-integration  replace deprecated carbon apis with cocoa.  includes code by: simone karin lehmann michael natterer daniel sabo','gui-unique.c','280','29','100','63','false','false','false','2013-11-10 18:22:01+01:00'),('gimp','2_8_8','e56344294c90e1ba97de5c134b50c4c522f0808f','Daniel Sabo','app: port to gtk-mac-integration  replace deprecated carbon apis with cocoa.  includes code by: simone karin lehmann michael natterer daniel sabo','gui.c','561','60','47','35','false','false','false','2013-11-10 18:22:01+01:00'),('gimp','2_8_8','e56344294c90e1ba97de5c134b50c4c522f0808f','Daniel Sabo','app: port to gtk-mac-integration  replace deprecated carbon apis with cocoa.  includes code by: simone karin lehmann michael natterer daniel sabo','ige-mac-menu.c','None','None','0','988','false','false','false','2013-11-10 18:22:01+01:00'),('gimp','2_8_8','98cef1273b9e6f71ef47b1828d627ec1b010fcb9','Michael Natterer','bug 704980 - uclibc - base-utils.c: execinfo.h: no such file or directory  forgot to apply the same fix to master.','gimp-utils.c','627','121','2','2','true','false','false','2013-11-10 22:09:54+01:00'),('gimp','2_8_8','9779657ea8173874da5a5dfbf2071bc3c3c07a10','Michael Henning','build/win: upgrade libsoup to 2.44.2','libsoup-request-file-string-h.patch','None','None','0','12','false','false','false','2013-11-12 16:26:21-05:00'),('gimp','2_8_10','2eb74becb8f764d326394159d74574f5a1d904c4','Michael Natterer','app: add g_gnuc_printf() to places where the args are a va_list  the trick is to use g_gnuc_printf (n, 0).','gimp-log.h','46','2','1','1','false','false','false','2013-11-29 00:33:05+01:00'),('gimp','2_8_10','23f685931e5f000dd033a45c60c1e60d7f78caf4','Nils Philippsen','file-xwd: sanity check # of colors and map entries (cve-2013-1978)  the number of colors in an image shouldn\'t be higher than the number of colormap entries. additionally, consolidate post error cleanup in load_image().','file-xwd.c','1881','377','28','27','true','false','false','2013-12-04 10:59:46+01:00'),('gimp','2_8_10','7ef45be8902a4b7403d1d1736ca4f7c95b6449a8','Jehan','app: handle migration on osx of gimp 2.8.2\'s config folder.  gimp 2.8.2\'s config was \"~/library/gimp/x.y\", before it got moved to \"~/library/application support/x.y\" and after being saved in the home like other unixes. the migration code will now check all 3 places in the right order on osx. thanks to simone karin lehmann for the original proposition.','gimp-user-install.c','503','76','33','0','false','false','false','2013-12-05 11:48:20+13:00'),('gimp','2_8_10','938d8921e86874268acf5fb0e20d00ce536bf6f3','Michael Natterer','plug-ins: port file-sunras to gegl, and globally apply some coding style','file-sunras.c','1323','232','404','284','false','false','false','2014-01-01 22:28:08+01:00'),('gimp','2_8_10','6e07c839784ad3cedbeb0dd9fe646ab3f8554825','Michael Natterer','bug 722939 - asking for an absolute path as gimpdir results in a path...  ...relative to the home folder  if an absolute path was given to the --with-gimpdir configure option, use that path literally.','gimpenv.c','446','86','4','0','true','false','false','2014-01-25 19:03:40+01:00'),('gimp','2_8_10','d296a2c08a00f643177c7bacc0166d60417f579a','Michael Henning','plug-ins: fix build with libpng versions < 1.4.  this was broken in 7c493f76f836095adad08205fdfd4522e05e0bd4.','file-png.c','1662','219','4','0','true','false','false','2014-02-16 10:41:12-05:00'),('gimp','2_8_10','5903e53d51a10d4daa8c9705fb3b4d37b8438a2a','Jehan','bug 708174 - improve the original search dialog patch.  fix various bugs, improve code design and efficiency, change feature name, update the feature up to our standards (now uses gimp preferences, session management, less overwhelming settings...). also now action history is tightly tied to gimpaction and logs all action activation (however it activates, and the show_unavailable parameter also applies to history). search algorithm greatly improved with basic tokenization, better ordering, filtering, etc.','gui.c','572','61','3','0','true','false','false','2014-02-18 19:13:03+01:00'),('gimp','2_8_10','16282063ef0ae4d0f5b89f955163238969dc82de','Jehan','app: add action names as action search tooltips in unstable builds.  this is useful for debugging though current consensus is that the finale user should not care about the technical name of an action. i did also some minor code cleanup when setting up the model columns.','action-search-dialog.c','749','108','27','18','false','false','false','2014-02-19 14:25:36+13:00'),('gimp','2_8_10','d739d8ccd7208549b9d1b98e81ba84ced2ff253d','Michael Natterer','app: more clean up in the action search dialog','action-search-dialog.c','755','108','63','53','false','false','false','2014-02-19 22:28:33+01:00'),('gimp','2_8_10','91bb872d2669d4f7c9454d829bed681cd06cf200','Michael Natterer','app: write \"unstable development version\" across the empty image window','gimpdisplayshell-callbacks.c','366','57','37','0','false','false','false','2014-03-07 11:33:14+01:00'),('gimp','2_8_10','774e064fbf4bc81add8d00182ee677175aa23c55','Michael Natterer','bug 691169 - gimp fails to open files with utf8 characters as filenames...  ...when started via windows explorer (e.g. the file context menu)  when built against glib >= 2.39.90, use g_win32_get_command_line() and g_option_context_parse_strv() which handle all sorts of windows filename encodings properly.','main.c','501','70','16','0','true','false','false','2014-03-08 22:39:47+01:00'),('gimp','2_8_10','9c7cd2508fe124225a5500f8e23b10ae6e44fac4','Michael Natterer','app, libgimpwidgets: move gimpprofilechooserdialog to libgimpwidgets  and call it gimpcolorprofilechooserdialog. make libgimpwidgets depend on lcms and make it query the profile directly.','gimpprofilechooserdialog.c','None','None','0','413','false','false','false','2014-03-14 22:03:08+01:00'),('gimp','2_8_10','9c7cd2508fe124225a5500f8e23b10ae6e44fac4','Michael Natterer','app, libgimpwidgets: move gimpprofilechooserdialog to libgimpwidgets  and call it gimpcolorprofilechooserdialog. make libgimpwidgets depend on lcms and make it query the profile directly.','gimpcolorprofilechooserdialog.c','265','28','372','0','false','false','false','2014-03-14 22:03:08+01:00'),('gimp','2_8_10','89b489b9bb01a53d0c167bb0e6e0b1099e40b303','Michael Natterer','modules, plug-ins: use gimpcolorprofilechooserdialog  instead of selfmade file choosers for picking color profiles from disk.','display-filter-proof.c','304','34','1','49','false','false','false','2014-03-14 23:02:14+01:00'),('gimp','2_8_10','89b489b9bb01a53d0c167bb0e6e0b1099e40b303','Michael Natterer','modules, plug-ins: use gimpcolorprofilechooserdialog  instead of selfmade file choosers for picking color profiles from disk.','lcms.c','1273','151','1','49','false','false','false','2014-03-14 23:02:14+01:00'),('gimp','2_8_10','e69ea05102187da202b774f3c8474a6a98fd69e1','Michael Natterer','app: remove some <unistd.h> and other includes  that were needed before we switched to using glib apis in these files.','gimpparasitelist.c','330','46','0','7','false','false','false','2014-03-22 20:26:20+01:00'),('gimp','2_8_10','e69ea05102187da202b774f3c8474a6a98fd69e1','Michael Natterer','app: remove some <unistd.h> and other includes  that were needed before we switched to using glib apis in these files.','session.c','311','46','0','8','false','false','false','2014-03-22 20:26:20+01:00'),('gimp','2_8_10','e69ea05102187da202b774f3c8474a6a98fd69e1','Michael Natterer','app: remove some <unistd.h> and other includes  that were needed before we switched to using glib apis in these files.','menus.c','392','16','0','8','false','false','false','2014-03-22 20:26:20+01:00'),('gimp','2_8_10','eb5bf3c2ba20df576c27bd202dc1c54fe7630a0b','Michael Natterer','plug-ins: add fallbacks for all pixel formats not supported my lcms  - fall back to float for missing half float - implement double and fallback to rgba float for missing rgba double - fall back to float for everything else potentially missing','lcms.c','1246','143','49','4','false','false','false','2014-03-31 17:40:15+02:00'),('gimp','2_8_10','eb5bf3c2ba20df576c27bd202dc1c54fe7630a0b','Michael Natterer','plug-ins: add fallbacks for all pixel formats not supported my lcms  - fall back to float for missing half float - implement double and fallback to rgba float for missing rgba double - fall back to float for everything else potentially missing','lcms.c','1246','143','49','4','false','false','false','2014-03-31 17:40:15+02:00'),('gimp','2_8_10','614c61a3dd19eacb00149f094aca930d30c333b0','Michael Natterer','don\'t #include <glib.h> before <lcms.h>  the include claimed to be because of \"inline\" in the lcms header, but that was probably lcms1, since there is no trace of inline in the lcms2 header.','display-filter-lcms.c','468','72','0','2','false','false','false','2014-04-10 20:48:22+02:00'),('gimp','2_8_10','b34fbb21fc02a11e7336cdb1e8fd430a25a8e68e','Michael Henning','modules: add missing include.  614c61a3dd19eacb00149f094aca930d30c333b0 removed the #include <glib.h>, which is needed for the #ifdef g_os_win32 to work.','display-filter-lcms.c','469','72','2','0','false','false','false','2014-04-15 19:17:57-04:00'),('gimp','2_8_10','051a3e4af48b04dca113b08eb510b7b2fa2d5db9','Michael Natterer','bug 681968 - disabling \'dot for dot\' glitches display  enhance the existing but unused display scaling (hidpi/retina) support to work independently in x and y direction, and adjust the scaling factors accordingly when dot-for-dot is off and xres != yres.  increase gimp_display_render_max_scale from 2.0 to 4.0 and adjust the rendering chunk size dynamically so we never render chunks that do not fit into the gimpdisplayxfer buffers.','gimpdisplayshell-render.c','213','14','61','33','true','false','false','2014-04-20 22:01:57+02:00'),('gimp','2_8_10','051a3e4af48b04dca113b08eb510b7b2fa2d5db9','Michael Natterer','bug 681968 - disabling \'dot for dot\' glitches display  enhance the existing but unused display scaling (hidpi/retina) support to work independently in x and y direction, and adjust the scaling factors accordingly when dot-for-dot is off and xres != yres.  increase gimp_display_render_max_scale from 2.0 to 4.0 and adjust the rendering chunk size dynamically so we never render chunks that do not fit into the gimpdisplayxfer buffers.','gimpdisplayxfer.h','6','0','1','7','true','false','false','2014-04-20 22:01:57+02:00'),('gimp','2_8_10','ad4862c60bddd61414b7a12acd46e7b669fe02ee','João S. O. Bueno','adds new blending mode \'truncate blend\'  bring repeat behavior on par with gegl and cairo, and sane ways of creating square or circular gradient shapes.','gimpdrawable-blend.c','817','111','8','1','false','false','false','2014-04-24 12:18:26-03:00'),('gimp','2_8_10','22c222291d9a661a534c966f0dedacbcf447fab7','Michael Natterer','libgimpbase,*: clean up enum values in gimpbaseenums.h  gimp_add_foo_mask -> gimp_add_mask_foo gimp_foo_mode -> gimp_blend_foo gimp_foo_clone -> gimp_clone_foo gimp_foo -> gimp_dodge_burn_type_foo gimp_foo -> gimp_transfer_foo  add compat values for the old names and compat code to script-fu and pygimp.','gimpdrawable-blend.c','817','111','6','6','false','false','false','2014-04-29 20:58:30+02:00'),('gimp','2_8_10','b60e1779cd41eb742cd020f509f8959cd3606398','Michael Natterer','app: pass a gimpgradient to gimp_drawable_blend(), not a gimpblendmode  the blend mode is now only a pdb compat enum, translate between gimpblendmode and the built-in gradients in the gimp-edit-blend pdb wrapper.','gimpdrawable-blend.c','775','104','10','68','false','false','false','2014-04-30 09:17:42+02:00'),('gimp','2_8_10','8356003fa2abdf93b92c8f708d99edc756bcce10','Michael Natterer','app: pass the startup monitor to displays opened from the copmmand line  change gimp_get_display_name() to also return the screen, and its implementation in the gui to return the initial monitor during startup. retrieve that information in app.c using a weird callback construct and pass the monitor to file_open_from_command_line().  half-related, add screen and monitor parameters to gimpdisplayshell and use these initial values for calculating the canvas\'s initial extents.  the image windows still don\'t position themselves correctly though because we have no mechanism for that whatsoever just yet, but we now at least pass the needed monitor information to the right objects.','app.c','208','28','36','8','false','true','false','2014-05-03 00:54:20+02:00'),('gimp','2_8_10','1ec64abb8b49de03b118fe3594b6386533caaa35','Michael Natterer','libgimpwidgets: add gimpcolorselectorclass::icon_name  and deprecate its stock_id.','gimpcolorselector.h','62','0','7','1','false','false','false','2014-05-10 08:34:42+02:00'),('gimp','2_8_10','4b629e984baaaefabfe464508eb0dcd873b4221b','Michael Natterer','libgimpwidgets: add gimpcolordisplayclass::icon_name  and deprecate its stock_id.','gimpcolordisplay.h','63','0','7','3','false','false','false','2014-05-10 11:53:07+02:00'),('gimp','2_8_10','de08267f06927e595ec8510134aa45562f21f840','Michael Natterer','libgimpbase, *: add enum value gimp_icon_type_icon_name  and keep gimp_icon_type_stock_id as a deprecated alias. change all plug-ins accordingly and increase the pluginrc file version number so it gets regenerated with \"icon-name\" instead of \"stock-id\".','gimpbaseenums.h','357','0','6','2','false','false','false','2014-05-11 23:56:30+02:00'),('gimp','2_8_10','de08267f06927e595ec8510134aa45562f21f840','Michael Natterer','libgimpbase, *: add enum value gimp_icon_type_icon_name  and keep gimp_icon_type_stock_id as a deprecated alias. change all plug-ins accordingly and increase the pluginrc file version number so it gets regenerated with \"icon-name\" instead of \"stock-id\".','print.c','351','33','4','4','false','false','false','2014-05-11 23:56:30+02:00'),('gimp','2_8_10','8aac599579d27fb25f506a6c0ed1317e1b95fcfe','Michael Natterer','libgimpbase: properly deprecate old enum values in gimpbaseenums.g','gimpbaseenums.h','357','0','19','10','false','false','false','2014-05-12 23:40:59+02:00'),('gimp','2_8_10','a91007756c15bf27b6e2694fd480bf03ff32331c','Michael Natterer','app: symlink an icon theme into /tmp for running the tests','tests.c','151','14','62','0','false','true','false','2014-05-13 17:07:32+02:00'),('gimp','2_8_10','9dde82b215b7a7112981b20892745dc2a068d17a','Michael Natterer','libgimpbase: sort gimpbaseenums.h alphabetically','gimpbaseenums.h','460','0','188','188','false','true','false','2014-05-13 23:29:17+02:00'),('gimp','2_8_10','7a6b8f0e69bfb605ea2b13f99fcae755379604f2','Mukund Sivaraman','file-jpeg: add support for arithmetic coding  arithmetic coding is a feature of the jpeg standard. although libjpeg had always implemented arithmetic coding, it was compiled out by default due to patents.  those patents have now expired.  libjpeg 8 now enables arithmetic coding by default. distributions which use libjpeg < 8 can also support arithmetic coding by using the appropriate cflags to enable it. libjpeg-turbo 1.3.1 also has support for arithmetic coding and is in popular shipping distributions.  software such as jpegtran can losslessly convert huffman compressed images to arithmetic coding and vice versa. the lossy behavior of jpeg does not happen at this (bit coding) layer of the format.  this initial patch provides a checkbox (disabled by default) to create files which use arithmetic coding. it also has a tooltip warning that such files may not be compatible with older decoders.','jpeg-save.c','1023','90','89','11','false','false','false','2014-05-15 00:45:42+05:18'),('gimp','2_8_10','8ef1f20c22578e5b81c02d41ff69e52cac62685f','Mukund Sivaraman','file-jpeg: reduce use of #ifdefs','jpeg-save.c','1034','90','41','37','false','false','false','2014-05-15 13:29:21+05:18'),('gimp','2_8_10','3066779462118fcc237ead75343107fd7427d36b','Michael Natterer','app_ don\'t symlink the test icon theme on windows, there is no symlink()','tests.c','151','14','6','0','false','false','false','2014-05-16 20:47:41+02:00'),('gimp','2_8_10','3066779462118fcc237ead75343107fd7427d36b','Michael Natterer','app_ don\'t symlink the test icon theme on windows, there is no symlink()','tests.c','151','14','6','0','false','false','false','2014-05-16 20:47:41+02:00'),('gimp','2_8_10','6aaa645e04d5dca99b700dc6039b02c96d457827','Michael Natterer','libgimp, script-fu: remove gimp 1.2 (sic) compat defines  which we wanted to remove in the \"next development cycle\" after 2.0, which would have been in 2.1.x.','gimpcompat.h','None','None','0','224','false','false','false','2014-05-19 03:08:18+02:00'),('gimp','2_8_10','f1573c42d2ab9a582cdba6f5a1a242e98530531e','Michael Natterer','app: default to gimp_help_browser_web_browser if there is no webkit','gimpguiconfig.c','569','91','5','0','false','false','false','2014-05-25 15:23:58+02:00'),('gimp','2_8_10','f15b48b3c8a7bcb126cb211df326b7ec1d3c299b','Michael Natterer','plug-ins, pdb: remove convolution-matrix and add a pdb compat procedure','convolution-matrix.c','None','None','0','1140','false','false','false','2014-05-29 16:27:35+02:00'),('gimp','2_8_10','41148e89966094d98013c5f17d3c07293d708a9c','Michael Natterer','app: bring back debug -> benchmark projection','debug-commands.h','16','0','16','14','false','false','false','2014-06-02 21:32:00+02:00'),('gimp','2_8_10','425748dab06215f35dff90b4479b7418141f1b0f','Michael Natterer','libgimpbase, *: rename gimpfilltype values: gimp_foo_fill -> gimp_fill_foo  change all users accordingly and add compat enum values and compat constants to script-fu and pygimp.','gimpbaseenums.h','485','0','13','5','false','false','false','2014-06-03 01:11:32+02:00'),('gimp','2_8_10','64d9e146d81f0d5068df41c046af29a9f4f30608','Michael Natterer','app: prefetch entire rows of pixels when finding contiguous regions  makes the thing about twice as fast (used by fuzzy select, bucket fill)','gimppickable-contiguous-region.c','409','63','74','26','false','false','false','2014-06-12 23:26:01+02:00'),('gimp','2_8_10','64d9e146d81f0d5068df41c046af29a9f4f30608','Michael Natterer','app: prefetch entire rows of pixels when finding contiguous regions  makes the thing about twice as fast (used by fuzzy select, bucket fill)','gimppickable-contiguous-region.c','409','63','74','26','false','false','false','2014-06-12 23:26:01+02:00'),('gimp','2_8_10','14614cb34909827d8e383c3ba94aa76b2e36b577','Michael Natterer','app: add gimp_gegl_apply_cached_operation()  which does the same as gimp_gegl_apply_operation() but takes additional arguments which are a cache buffer and a list of rectangles that specify the already computed region in the cache buffer.','gimp-gegl-apply-operation.c','463','57','110','9','false','false','false','2014-06-18 18:42:17+02:00'),('gimp','2_8_10','a665c308237014c59e6ba5599a6e83f253c7c315','Michael Natterer','app: gimp_spin_button_new() -> gtk_spin_button_new()','gimphistogrambox.c','202','18','12','13','false','false','false','2014-06-21 22:39:37+02:00'),('gimp','2_8_10','88762df4cfecc5371556f763ac865e7e41f401e5','Michael Natterer','app: more debug output in gimpwarptool, for fixing the timeout mess...','gimpwarptool.c','590','76','6','0','false','false','false','2014-06-26 14:01:35+02:00'),('gimp','2_8_10','2ac5ab7dc318ef3f70c2032f4d5637d723f67307','Michael Natterer','app: don\'t use the projection in gimpdisplayshell-render.c  the image implements the gimppickable interface too.','gimpdisplayshell-render.c','212','15','2','5','false','false','false','2014-06-29 23:11:53+02:00'),('gimp','2_8_10','98e7ec090bbd882a490f5e054ab032b158422432','Michael Natterer','app: use the new gimp_personal_rc_gfile() in lots of places  and pass the gfile to the newly added gfile-based gimpconfig, gimpscanner etc. functions. this is starting to make sense now...','gimpdevices.c','213','31','32','36','false','false','false','2014-07-01 20:02:45+02:00'),('gimp','2_8_10','add91b70b9cada7b3a3c0adf64d8fffce56e5a97','Michael Natterer','app: port brush loading to gio','gimpbrushpipe-load.c','180','35','26','38','false','false','false','2014-07-02 21:11:49+02:00'),('gimp','2_8_10','add91b70b9cada7b3a3c0adf64d8fffce56e5a97','Michael Natterer','app: port brush loading to gio','gimpbrushpipe-load.c','180','35','26','38','false','false','false','2014-07-02 21:11:49+02:00'),('gimp','2_8_10','8202fa1a77430fb9936e29d20006cb48aa737140','Michael Natterer','app: port pattern loading to gio','gimppattern-load.c','166','27','40','54','false','false','false','2014-07-02 22:29:57+02:00'),('gimp','2_8_10','8202fa1a77430fb9936e29d20006cb48aa737140','Michael Natterer','app: port pattern loading to gio','gimppattern-load.c','166','27','40','54','false','false','false','2014-07-02 22:29:57+02:00'),('gimp','2_8_10','53b5822926bf93cbc30c181ee9c5916c3ac21034','Michael Natterer','libgimpconfig: port gimpconfigwriter to gio','gimpconfigwriter.c','407','79','111','152','false','true','false','2014-07-02 23:53:57+02:00'),('gimp','2_8_10','53b5822926bf93cbc30c181ee9c5916c3ac21034','Michael Natterer','libgimpconfig: port gimpconfigwriter to gio','gimpconfigwriter.c','407','79','111','152','false','true','false','2014-07-02 23:53:57+02:00'),('gimp','2_8_10','33af6c61b74be59da888ce287cfb6f0fdafc2f9b','Michael Henning','app: fix building for windows.  this was broken in 53b5822926bf93cbc30c181ee9c5916c3ac21034','gimpconfigwriter.c','407','79','1','1','true','false','false','2014-07-02 19:16:51-04:00'),('gimp','2_8_10','799a3d43520eabf0c748bf4faedc74e9e5e09404','Michael Natterer','app: g_mkdir() -> g_file_make_directory() in gimptooloptions.c','gimptooloptions.c','276','41','3','15','false','false','false','2014-07-03 01:33:20+02:00'),('gimp','2_8_10','0753b5a137d0fcff0581f30ec53f1e10a322b973','Michael Natterer','app: port gimp_text_buffer_load() and _save() to gio','gimptextbuffer.c','1152','180','71','69','false','false','false','2014-07-03 12:57:18+02:00'),('gimp','2_8_10','77b6af2da864f7a4ee07e1ee7ce223bb668f78df','Michael Natterer','app: implement gimp_curve_load() and _save() in gio  they are currently unused, but implementing them was a copy/paste no brainer.','gimpcurve-load.c','24','3','8','26','false','false','false','2014-07-03 13:22:10+02:00'),('gimp','2_8_10','70e6d86bdf7a1940636b8e541a526e9cd92436ce','Michael Natterer','app: port gimp_pdb_dump() to gio','gimppdb-query.c','455','69','118','82','false','false','false','2014-07-03 14:52:27+02:00'),('gimp','2_8_10','70e6d86bdf7a1940636b8e541a526e9cd92436ce','Michael Natterer','app: port gimp_pdb_dump() to gio','gimppdb-query.c','455','69','118','82','false','false','false','2014-07-03 14:52:27+02:00'),('gimp','2_8_10','9d11dc046d259d2cf86f944ec7e25e0eb03a8c8b','Michael Natterer','app: forgot to remove the creepy includes in gimpbrush-load.c after porting','gimpbrush-load.c','715','101','0','17','false','false','false','2014-07-03 15:48:38+02:00'),('gimp','2_8_10','9d11dc046d259d2cf86f944ec7e25e0eb03a8c8b','Michael Natterer','app: forgot to remove the creepy includes in gimpbrush-load.c after porting','gimpbrush-load.c','715','101','0','17','false','false','false','2014-07-03 15:48:38+02:00'),('gimp','2_8_10','32e2aebbe0147d59293f2a12cca19b2b31c7b7de','Michael Natterer','app: remove old includes from gimpdata.c too','gimpdata.c','756','109','0','12','false','false','false','2014-07-03 15:49:29+02:00'),('gimp','2_8_10','4d50c3aafdc22073ce548252c7b8e01e45dc6b00','Michael Natterer','app: port gimp_palette_load_css() to gio  which finishes palette porting. remove all temp hack porting code and a ton of ugly includes.','gimppalette-load.c','598','96','25','26','false','false','false','2014-07-03 17:36:01+02:00'),('gimp','2_8_10','52032961c28de7a4570edcbe80d83d1faf3adec0','Michael Natterer','app: add (disabled) code that blits the image directly from the graph  bypassing the projection buffer.','gimpdisplayshell-render.c','229','17','31','3','false','false','false','2014-07-03 20:52:02+02:00'),('gimp','2_8_10','52032961c28de7a4570edcbe80d83d1faf3adec0','Michael Natterer','app: add (disabled) code that blits the image directly from the graph  bypassing the projection buffer.','gimpdisplayshell-render.c','229','17','31','3','false','false','false','2014-07-03 20:52:02+02:00'),('gimp','2_8_10','52032961c28de7a4570edcbe80d83d1faf3adec0','Michael Natterer','app: add (disabled) code that blits the image directly from the graph  bypassing the projection buffer.','gimpdisplayshell-render.c','229','17','31','3','false','false','false','2014-07-03 20:52:02+02:00'),('gimp','2_8_10','0f8d84d5e9e119639bcd41e04a85c76528a6096a','Michael Natterer','app: port all file_open() and file_save() functions to gfile','file-open.c','626','108','88','94','false','true','false','2014-07-07 23:58:11+02:00'),('gimp','2_8_10','0f8d84d5e9e119639bcd41e04a85c76528a6096a','Michael Natterer','app: port all file_open() and file_save() functions to gfile','file-save.c','153','21','38','51','false','false','false','2014-07-07 23:58:11+02:00'),('gimp','2_8_10','ff6ea695694522655c442072d8bb7be5981176e4','Michael Natterer','app: change the image\'s various uris to gfiles  which gets rid of a lot of temporarily added gfile code again because we don\'t need to convert between uri and gfile any longer.','gimpfiledialog.c','815','129','88','164','false','false','false','2014-07-07 23:58:11+02:00'),('gimp','2_8_10','98ae4b1f2c6e65dbf2301cd0ac616fba1144adc2','Michael Natterer','app: use g_file_new_for_commandline_arg_and_cwd() in unique.c','unique.c','138','16','11','42','false','false','false','2014-07-08 01:25:17+02:00'),('gimp','2_8_10','a43730390c3fe7681abcec10e282bb9b06f68b80','Michael Natterer','app: remove obsolete cruft from file-utils.[ch]','file-utils.c','216','30','0','250','false','false','false','2014-07-08 01:42:44+02:00'),('gimp','2_8_10','18596330182f53350957a01d40163d3852e3ec94','Michael Natterer','plug-ins: #include <gdk/gdk.h> instead of <gdkconfig.h>','file-xpm.c','610','75','1','1','false','false','false','2014-07-21 02:19:51+02:00'),('gimp','2_8_10','18596330182f53350957a01d40163d3852e3ec94','Michael Natterer','plug-ins: #include <gdk/gdk.h> instead of <gdkconfig.h>','file-xpm.c','610','75','1','1','false','false','false','2014-07-21 02:19:51+02:00'),('gimp','2_8_10','5839b5e4aff21f58433827fb25483c4b68a9a71b','Michael Henning','app: add a gegl op to render gradients','gimpoperationblend.c','883','131','1133','0','false','true','false','2014-07-22 13:13:47-04:00'),('gimp','2_8_10','b03d69dd40072dc24c33e15bc55dd5cab010bdfd','Michael Natterer','libgimpbase, app: add variants of gimp_$foo_directory() which return gfiles  gimp_directory_file(), gimp_data_directory_file() etc. the new functions take a variable list of path elements to the file, the list has to be null-terminated. remove the newly added gimp_personal_rc_gfile(). start using the new functions in app/.','gimpenv.h','33','0','11','1','false','false','false','2014-07-28 02:04:01+02:00'),('gimp','2_8_10','50ca9068daef83c27fe5aea0a7fb19628f8f13c2','Michael Natterer','app: more cleanup in the action history code, mostly general consistency','gui.c','599','63','3','2','false','false','false','2014-07-29 12:28:18+02:00'),('gimp','2_8_10','969e2b60f12363e2921d1c28fe39aa8f8705d7a4','Michael Natterer','app: port about_dialog_load_logo() to gio','about-dialog.c','447','50','15','8','false','false','false','2014-07-29 12:48:57+02:00'),('gimp','2_8_10','85668c8e6913b66a93666732f88f752297304592','Michael Natterer','app: filename -> gfile in parse_iso_codes()','gimplanguagestore-parser.c','326','59','10','10','false','false','false','2014-07-29 16:32:29+02:00'),('gimp','2_8_10','85668c8e6913b66a93666732f88f752297304592','Michael Natterer','app: filename -> gfile in parse_iso_codes()','gimplanguagestore-parser.c','326','59','10','10','false','false','false','2014-07-29 16:32:29+02:00'),('gimp','2_8_10','9e265e785578bca2e12c226985fcd76cb81d16d4','Michael Natterer','libgimpmodule: always build the module debug code, just don\'t call it  it was already rotting and had to be fixed.','gimpmoduledb.c','275','45','8','13','true','false','false','2014-08-02 23:47:10+02:00'),('gimp','2_8_10','48e6199a4f8e2a80f266e2dbf9f9cd9b16be399a','Michael Natterer','script-fu: port script loading to gfileenumerator','script-fu-scripts.c','658','112','73','34','false','true','false','2014-08-03 21:49:20+02:00'),('gimp','2_8_10','9bb3aee1638909b6520271e40bc0706a5c189174','Michael Natterer','app: add gimp_file_is_executable() to gimp-utils.[ch]  including pathext magic for windows.','gimp-utils.c','756','144','74','0','false','false','false','2014-08-04 02:38:24+02:00'),('gimp','2_8_10','26f45822e763bb8b97ea144340eb9ebb28537a54','Michael Natterer','app: port gimpconfig-dump.c to gio','gimpconfig-dump.c','441','60','46','29','false','false','false','2014-08-12 12:59:12+02:00'),('gimp','2_8_10','cafc316a47c3ac1a9b5f3b3b71165630242a27e3','Michael Natterer','app: port gimp_interpreter_db_resolve() to gio','gimpinterpreterdb.c','587','115','15','29','false','false','false','2014-08-12 13:15:44+02:00'),('gimp','2_8_10','cafc316a47c3ac1a9b5f3b3b71165630242a27e3','Michael Natterer','app: port gimp_interpreter_db_resolve() to gio','gimpinterpreterdb.c','587','115','15','29','false','false','false','2014-08-12 13:15:44+02:00'),('gimp','2_8_10','4d15f219a73aefb7a68f979b9ea68a113761b8f6','Michael Natterer','app: don\'t use glib_check_version (2, 39, 90) for win32 argv parsing  instead, use the new apis unconditionally.','main.c','509','71','0','8','false','false','false','2014-08-12 15:37:46+02:00'),('gimp','2_8_10','b8aabcac5c06b393911ae7556d18e137f4781e6a','Jehan','do not use g_io_channel_unix_new() for the win32 platforms.  it is advised to use the more accurate g_io_channel_win32_new_fd() or g_io_channel_win32_new_socket() because glib can\'t differentiate between file descriptors and sockets on windows, which outputs a warning when there is ambiguity.','gimpxmlparser.c','219','53','4','0','false','false','false','2014-08-12 23:56:10+00:00'),('gimp','2_8_10','b8aabcac5c06b393911ae7556d18e137f4781e6a','Jehan','do not use g_io_channel_unix_new() for the win32 platforms.  it is advised to use the more accurate g_io_channel_win32_new_fd() or g_io_channel_win32_new_socket() because glib can\'t differentiate between file descriptors and sockets on windows, which outputs a warning when there is ambiguity.','gimp.c','1263','255','5','0','false','false','false','2014-08-12 23:56:10+00:00'),('gimp','2_8_10','b1fc539f6ca1fe66da7792d1d2985da5b16a51f2','Jehan','tests: build the test icon theme for all platforms.  in particular, we were not building these for win32, which has no symbolic link concept. so let\'s use $(ln_s) defined by autoconf for this purpose, as it will copy files for platforms without ln support. moreover this way, we don\'t create one such folder for each and every test run and fill up the tmp directory with countless directories, that we never clean up. on win32, this fixes 3 tests which were failing because of the missing icons.','tests.c','115','11','2','57','true','false','false','2014-08-15 21:21:41+00:00'),('gimp','2_8_10','b1fc539f6ca1fe66da7792d1d2985da5b16a51f2','Jehan','tests: build the test icon theme for all platforms.  in particular, we were not building these for win32, which has no symbolic link concept. so let\'s use $(ln_s) defined by autoconf for this purpose, as it will copy files for platforms without ln support. moreover this way, we don\'t create one such folder for each and every test run and fill up the tmp directory with countless directories, that we never clean up. on win32, this fixes 3 tests which were failing because of the missing icons.','tests.c','115','11','2','57','true','false','false','2014-08-15 21:21:41+00:00'),('gimp','2_8_10','2b64efc11d50e2d714827205cba13cdd9af32eea','Jehan','tests: gimp_test_utils_synthesize_key_event() not working for win32.  gdk_test_simulate_key() has currently no win32 implementation. add this implementation in our code until a patch to gtk+ for this is merged. this fixes 2 `make check` tests for win32.','gimp-app-test-utils.c','192','18','76','0','true','false','false','2014-08-15 21:23:02+00:00'),('gimp','2_8_10','601f6af69bae800c6f73857b15d72f1e30a9b86b','Michael Henning','build/win: upgrade librsvg to 2.40.2','librsvg-bug710163.patch','23','0','35','0','false','false','false','2014-08-18 11:25:19-04:00'),('gimp','2_8_10','23245d27883ee36f9171a8b00b267bc1fe1a4dad','Jehan','app: set win32 only code between #ifdef g_os_win32  pathext environment variable to determine whether a file is executable or not is a windows-only concept.','gimppluginmanager-restore.c','585','86','4','3','false','false','false','2014-08-19 02:12:56+02:00'),('gimp','2_8_14','2dac58718f5e77ae9c76d69530e7c3c2f98bc008','Mukund Sivaraman','file-bmp: remove unnecessary casts','bmp-read.c','756','159','20','20','false','false','false','2014-08-28 18:55:59+05:18'),('gimp','2_8_14','1d10c4d88f2138c73446a996685e8febdb138e7f','Mukund Sivaraman','file-bmp: fix format specifiers','bmp-read.c','756','159','2','2','true','false','false','2014-08-28 19:09:53+05:18'),('gimp','2_8_14','24cf89aa68b634d76d54995e5f4915466b28b28d','Mukund Sivaraman','file-bmp: print compression method in debug build','bmp-read.c','761','164','20','0','false','false','false','2014-08-28 19:15:07+05:18'),('gimp','2_8_14','97d6629d6646ad25606b0f8f158f5a6878d3c696','su-v','bug 731446 - files opened twice via command line  prevent cocoa command line argument parsing for files, using same fix as in gedit commit 86e7dd7b72fc35c6d9b19a75bbc715aee19304b4','gui.c','601','63','4','0','true','false','false','2014-09-06 01:06:43+02:00'),('gimp','2_8_14','250223453fede47c112e68af8ffb62b02ec85273','Michael Natterer','plug-ins: some code cleanup in file-tiff-save.c','file-tiff-save.c','1019','161','71','89','false','false','false','2014-09-13 21:24:04+02:00'),('gimp','2_8_14','250223453fede47c112e68af8ffb62b02ec85273','Michael Natterer','plug-ins: some code cleanup in file-tiff-save.c','file-tiff-save.c','1019','161','71','89','false','false','false','2014-09-13 21:24:04+02:00'),('gimp','2_8_14','b19a18f80e48d5c941f03235cd7a19977bc7b501','Michael Natterer','plug-ins: code cleanup in file-tiff-load.c','file-tiff-load.c','1317','212','179','187','false','true','false','2014-09-13 21:59:30+02:00'),('gimp','2_8_14','b19a18f80e48d5c941f03235cd7a19977bc7b501','Michael Natterer','plug-ins: code cleanup in file-tiff-load.c','file-tiff-load.c','1317','212','179','187','false','true','false','2014-09-13 21:59:30+02:00'),('gimp','2_8_14','b19a18f80e48d5c941f03235cd7a19977bc7b501','Michael Natterer','plug-ins: code cleanup in file-tiff-load.c','file-tiff-load.c','1317','212','179','187','false','true','false','2014-09-13 21:59:30+02:00'),('gimp','2_8_14','0bf1f22b01bb87ce08d2b468118fe954b6ecab78','Michael Natterer','app: add a \"playground\" perfs page and a --show-playground command line option  the page is shown by default in unstable but needs --show-playground in stable versions. there is nothing yet on that page. also, the icon needs improvement...','main.c','517','71','8','0','false','false','false','2014-09-14 01:08:25+02:00'),('gimp','2_8_14','0cceaff82834e652862472348acf952ef0e2039d','Michael Natterer','bug 721482 - make language codes relocatable  manually picked one line of ef0ef921b8dcb49ee82acba6540b69e6617c65d9 that makes parse_iso_codes() find the iso-codes package in the bundle on os x.','gimplanguagestore-parser.c','326','59','1','1','true','false','false','2014-09-17 12:47:21+02:00'),('gimp','2_8_14','68cb57d97e62ee07a0391652a1de3d9a9de95f47','Mukund Sivaraman','file-gif-load: try to use as much as possible of broken gif file (bug #737375)','file-gif-load.c','914','163','51','40','true','false','false','2014-09-26 08:37:59+05:18'),('gimp','2_8_14','c5ed3e56c9fabb3a93b39ef17f95e07172c83b98','Michael Natterer','bug 735505 - weird characters in zoom button  on windows, use a normal space instead of u+2009 thin space for separating the scale percentage from the percent sign.','gimpscalecombobox.c','391','56','14','2','true','false','false','2014-09-27 23:48:39+02:00'),('gimp','2_8_14','f5df5bee931629640e19f08a041e6f10946d36e1','Michael Natterer','app: register file-xcf-load and file-xcf-save as gio-ported  because the reason we didn\'t (seek errors) is gone now.','xcf.c','331','23','0','12','false','false','false','2014-10-18 01:17:01+02:00'),('gimp','2_8_14','56f0dc06fca5b31437034ba64585fe7f67c1675b','Jehan','win32 has a gdk_test_simulate_key() implementation since gtk+ 2.24.25.  see bug 734879: commits c87c5cd in gtk+ master, and 03c5335 in gtk-2-24 branch.','gimp-app-test-utils.c','192','18','6','5','true','false','false','2014-11-06 16:47:57+01:00'),('gimp','2_8_14','09628cfa4c33cecd39ac806a9d68a851c4b4c88e','Michael Natterer','bug 739489 - add palette of recently used colors  add a generated palette which contains the color history. for now it\'s only updated when the color dialog\'s color history gets updated, but should be updated whenever a color is chosen in any way.','gimp-palettes.h','2','0','30','0','true','false','false','2014-11-26 23:48:19+01:00'),('gimp','2_8_14','e2d2bdf65cbd45b31b8768cd7dd5246dce97bbc7','Kristian Rietveld','app: ifdef out functions that are unused  silences compiler warnings.','gimplanguagestore-parser.c','326','59','6','1','false','false','false','2015-01-10 00:03:04+01:00'),('gimp','2_8_14','97a9d1c53fa79e736347ca214fe3f81888d09b47','Kristian Rietveld','libgimpbase: implement show in file manager for os x platform','gimputils.c','495','101','27','10','false','false','false','2015-02-19 21:39:05+01:00'),('gimp','2_8_14','a0398e5028559c146b79228a6e75db7c14e7ef41','Michael Natterer','configure.ac, plug-ins: require lcms >= 2.6 and remove #ifdef from lcms.c','lcms.c','1202','140','0','3','false','false','false','2015-02-21 00:33:37+01:00'),('gimp','2_8_14','433194ee20d9e27684cec3d2fb0b7b2189eaf4c7','Marek Dvoroznak','app: npd-tool: remove last added control point using backspace','gimpnpointdeformationtool.c','433','44','49','28','false','true','false','2015-02-27 20:21:51+01:00'),('gimp','2_8_14','80adf02de8706cd6f4d6e89add05edba31bbf36e','Marek Dvoroznak','app: npd-tool: add rubber band selection','gimpnpointdeformationtool.c','577','63','151','46','false','true','false','2015-02-27 20:21:51+01:00'),('gimp','2_8_14','4af9bd5981e2991a9915f0ebc1105c93868d3b09','Marek Dvoroznak','app: npd-tool: deformation runs in its own thread','gimpnpointdeformationtool.c','658','74','100','25','false','true','false','2015-02-27 20:21:51+01:00'),('gimp','2_8_14','c4e12fdd7c7c33a52fbe9df35997b1519aa4bf18','Marek Dvoroznak','app: npd-tool: use canvas buffer preview','gimpnpointdeformationtool.c','711','81','89','97','false','true','false','2015-02-27 20:21:52+01:00'),('gimp','2_8_14','10255eddbb9de116fc79cd8ac57f74aba159d5f8','Marek Dvoroznak','app: npd-tool: add option to apply or cancel the deformation','gimpnpointdeformationtool.c','746','84','71','19','false','true','false','2015-02-27 20:21:52+01:00'),('gimp','2_8_14','ffc6024ee4528bfd64cb1b045301bbafb37e75b3','Marek Dvoroznak','app: npd-tool: show only a preview (hide the image) when the deformation is in progress  and show the image again when the deformation is done','gimpnpointdeformationtool.c','759','85','36','19','false','true','false','2015-02-27 20:21:52+01:00'),('gimp','2_8_14','415d7f278169b79101cbd1e3e75fc73f7616a3c4','Marek Dvoroznak','app: npd-tool: remove option to pause the deformation process','gimpnpointdeformationtool.c','771','86','20','34','false','true','false','2015-02-27 20:21:52+01:00'),('gimp','2_8_14','c3b6b3273c5bfd246111f40b44f02083d388d177','Michael Natterer','app: lots of cleanup in the n-point deformation tool  - formatting and indentation - handle gimp_tool_action_commit - fix calls to gimp_tool_control_activate()/halt() - move variables to local scopes - remove and reorder includes - remove redundant members from the tool struct - set members to null after freeing them - and whatnot...','gimpnpointdeformationtool.c','798','92','309','250','true','false','false','2015-03-01 16:49:22+01:00'),('gimp','2_8_14','2c80affe4cbf39bf562057ea2464b4d0080702f9','Mukund Sivaraman','app: include commit hash in display shell message','gimpdisplayshell-callbacks.c','379','57','17','6','false','false','false','2015-03-12 11:55:45+05:18'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','tools-actions.c','526','6','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','tools-commands.c','422','67','2','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','tools-commands.h','60','0','2','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','preferences-dialog.c','2045','103','2','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimp-paint.c','95','7','2','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrush.c','182','15','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrush.h','15','0','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrushoptions.c','96','10','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrushoptions.h','14','0','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimp-tools.c','444','47','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrushoptions-gui.c','115','9','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrushoptions-gui.h','1','0','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrushtool.c','83','7','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimpmybrushtool.h','14','0','4','0','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','5217900748704fa0c6150c1eed87c53a9b74edcc','Jehan','configure/app: libmypaint becomes an optional dependency.','gimppaintoptions-gui.c','432','40','9','2','false','false','false','2015-03-30 22:38:35+02:00'),('gimp','2_8_14','13dd85510701ce77108e27deff5a9ffdc51ec5e2','Jehan','app: indentation fixes.','tools-commands.c','422','67','6','6','true','false','false','2015-04-01 00:00:26+02:00'),('gimp','2_8_14','60197c227db92c7cf927927a3b7b2d39aaf622b1','Mukund Sivaraman','windows: call setdlldirectory() in the app  with this patch, there should be no more need to set path on windows before running gimp.  this patch was tested by me and drawoc, but there could be some undetected issues lurking. revert if any problems arise.','main.c','541','74','34','0','false','false','false','2015-04-13 15:33:58+05:18'),('gimp','2_8_14','60197c227db92c7cf927927a3b7b2d39aaf622b1','Mukund Sivaraman','windows: call setdlldirectory() in the app  with this patch, there should be no more need to set path on windows before running gimp.  this patch was tested by me and drawoc, but there could be some undetected issues lurking. revert if any problems arise.','gimp.c','1287','258','34','0','false','false','false','2015-04-13 15:33:58+05:18'),('gimp','2_8_14','9d510d8ffff471dc77d1b694224bf704446284e1','Michael Natterer','app: make the mypaint brush path configurable in prefs -> folders  keep the config values around even if compiled without mypaint brush support, so we remember the values between sessions of differently compiled gimp versions.','preferences-dialog.c','2056','107','16','0','false','false','false','2015-04-25 21:14:22-04:00'),('gimp','2_8_14','37c8e5602da20b27f8cd7909c7398c51970648cf','Michael Natterer','plug-ins: merge file-psd-load and file-psd-save into one binary file-psd  which share the psd.c file for query() and run(), instead of having save\'s stuff commented out in psd.c, and having it duplicated in psd-save.c for the separate binary.','psd.c','269','22','52','39','false','false','false','2015-04-26 15:37:31-04:00'),('gimp','2_8_14','37c8e5602da20b27f8cd7909c7398c51970648cf','Michael Natterer','plug-ins: merge file-psd-load and file-psd-save into one binary file-psd  which share the psd.c file for query() and run(), instead of having save\'s stuff commented out in psd.c, and having it duplicated in psd-save.c for the separate binary.','psd.h','401','0','0','6','false','false','false','2015-04-26 15:37:31-04:00'),('gimp','2_8_14','d5cab957ac9382502d146015823b4612a61857b5','Michael Henning','build/win: add patches to gtk2 for fixing horizontal scrolling.','gtk-horiz-scrolling.patch','53','0','62','0','false','false','false','2015-04-28 03:16:38-04:00'),('gimp','2_8_14','d5cab957ac9382502d146015823b4612a61857b5','Michael Henning','build/win: add patches to gtk2 for fixing horizontal scrolling.','gtk-horiz-scrolling.patch','53','0','62','0','false','false','false','2015-04-28 03:16:38-04:00'),('gimp','2_8_14','d5cab957ac9382502d146015823b4612a61857b5','Michael Henning','build/win: add patches to gtk2 for fixing horizontal scrolling.','gtk-horiz-scrolling.patch','53','0','62','0','false','false','false','2015-04-28 03:16:38-04:00'),('gimp','2_8_14','6b0b774302e8a9b367ab15ab198c441f718d8038','Michael Natterer','libgimpwidgets: add gimpwidgetsutils.[ch]  move some functions from libgimpwidgets/gimpwidgets.[ch] and from app/widgets/gimpwidgets-utils.[ch]. newly add gimp_widget_get_color_profile() which is extracted from modules/display-filter-lcms.c.','gimpwidgetsutils.c','290','48','457','0','false','true','false','2015-05-06 22:15:30+02:00'),('gimp','2_8_14','6b0b774302e8a9b367ab15ab198c441f718d8038','Michael Natterer','libgimpwidgets: add gimpwidgetsutils.[ch]  move some functions from libgimpwidgets/gimpwidgets.[ch] and from app/widgets/gimpwidgets-utils.[ch]. newly add gimp_widget_get_color_profile() which is extracted from modules/display-filter-lcms.c.','gimpwidgetsutils.c','290','48','457','0','false','true','false','2015-05-06 22:15:30+02:00'),('gimp','2_8_14','e663c947a0b272f895abfd957e4c3f6b5f0f69f3','Michael Natterer','libgimpcolor: add gimp_lcms_get_format()  which returns an lcms format given a babl format. it also returns a babl format to be used instead of the passed format, but only if lcms doesn\'t support the passed format.','gimplcms.c','399','72','134','0','false','false','false','2015-05-08 12:52:22+02:00'),('gimp','2_8_14','f939818c4d5caab81a0bae598d6c628d9c2837d5','Michael Natterer','plug-ins: use gimp_lcms_get_format() in the lcms plug-in','lcms.c','1098','124','3','94','false','false','false','2015-05-08 12:53:43+02:00'),('gimp','2_8_14','af84148fed383bca575755400518b4edbd971099','Michael Henning','libgimpwidgets: fix the order of #includes  otherwise, g_os_win32 and gdk_windowing_quartz will never be defined by the time we reach the #ifdefs.','gimpwidgetsutils.c','407','72','5','5','true','false','false','2015-05-08 22:53:49-04:00'),('gimp','2_8_14','7e6320497e6795cbfc41ddcbe57b502f5eb857e6','Øyvind Kolås','follow gegl api changes from commit af5361ca8d, with an abyss policy argument to gegl_buffer_copy.','gimpselection.c','658','67','2','3','false','false','false','2015-05-25 01:27:31+02:00'),('gimp','2_8_14','2dd6d7fa65b0d9dc5497306f533b9e9f0b4e56b5','Michael Natterer','libgimpwidgets: remove /* gimp_disable_deprecated */ from #endif  it seems to confuse gtk-doc.','gimpstock.h','3','0','2','2','false','false','false','2015-05-30 21:55:53+02:00'),('gimp','2_8_14','08545ad5492f186eca6b111f634cd480ca5a3fd9','Michael Natterer','app: switch gimpdisplayshell-render.c to the new profile filter code  - disable auto-adding of the lcms display filter module  - change profile convert dest formats to be always r\'g\'b\'a, a display   profile transform outputs something that can be displayed directly,   so no additional gamma transform must happen when the pixels are   copied to a cairo-argb32 buffer  - add a medium forest of if() branches to gimpdisplayshell-filter.c   which cover all combinations of profile and display filter   transforms  - all of this is still very broken when changing an image to linear,   because the configured rgb profile from prefs will do horrible   nonsense (things work fine though with a per-image profile that is   for linear data)','gimpdisplayshell-render.c','289','22','139','50','false','true','false','2015-06-01 23:30:03+02:00'),('gimp','2_8_14','08545ad5492f186eca6b111f634cd480ca5a3fd9','Michael Natterer','app: switch gimpdisplayshell-render.c to the new profile filter code  - disable auto-adding of the lcms display filter module  - change profile convert dest formats to be always r\'g\'b\'a, a display   profile transform outputs something that can be displayed directly,   so no additional gamma transform must happen when the pixels are   copied to a cairo-argb32 buffer  - add a medium forest of if() branches to gimpdisplayshell-filter.c   which cover all combinations of profile and display filter   transforms  - all of this is still very broken when changing an image to linear,   because the configured rgb profile from prefs will do horrible   nonsense (things work fine though with a per-image profile that is   for linear data)','gimpdisplayshell-render.c','289','22','139','50','false','true','false','2015-06-01 23:30:03+02:00'),('gimp','2_8_14','460948e068b4c2dd7d0bd22a66b6a9bcfea1ffed','Michael Natterer','app: add member gimpdisplayshell.filter_format  and use it where we used to hardcode \"r\'g\'b\'a float\".','gimpdisplayshell-render.c','288','22','5','6','false','false','false','2015-06-02 00:01:28+02:00'),('gimp','2_8_14','dae608dfdfc4dbaf791aea71db9b91b3e2aaaac0','Michael Henning','build/win: fix building iconv on recent gcc versions.','iconv-fix-inline.patch','11','0','11','0','true','false','false','2015-06-06 13:52:18-04:00'),('gimp','2_8_14','1e8b9f46a06b99ea8d02ff02f05c0954cbc63a6a','Michael Henning','build/win: upgrade gtk2 to 2.24.28','gtk-horiz-scrolling.patch','None','None','0','61','false','false','false','2015-06-07 17:19:11-04:00'),('gimp','2_8_14','1e8b9f46a06b99ea8d02ff02f05c0954cbc63a6a','Michael Henning','build/win: upgrade gtk2 to 2.24.28','gtk-horiz-scrolling.patch','None','None','0','61','false','false','false','2015-06-07 17:19:11-04:00'),('gimp','2_8_14','1e8b9f46a06b99ea8d02ff02f05c0954cbc63a6a','Michael Henning','build/win: upgrade gtk2 to 2.24.28','gtk-horiz-scrolling.patch','None','None','0','61','false','false','false','2015-06-07 17:19:11-04:00'),('gimp','2_8_14','f0028624df617c53e85229f36c0653eb7e078aa4','Massimo Valentini','bug 751178: gimp doesn\'t load fonts from folders...  which path contains cyrillic characters','gimp-fonts.c','97','14','6','0','true','false','false','2015-06-22 19:40:25+02:00'),('gimp','2_8_14','ab869ab35fba4b4f2ce8fe0572b852c6979427b9','Michael Henning','build/win: upgrade librsvg to 2.40.9','librsvg-bug710163.patch','None','None','0','33','false','false','false','2015-07-17 18:27:50-04:00'),('gimp','2_8_14','1a70fbfabffc40814a11c689d3d8179e9f74f4cf','Michael Henning','build/win: upgrade poppler to 0.34.0 and poppler-data to 0.4.7','poppler-windows-h.patch','6','0','9','0','false','false','false','2015-07-18 10:55:59-04:00'),('gimp','2_8_14','3e0d10d860b560c1b61b66e1aa92abbb47838fe1','Michael Henning','win: group gimp windows together on the taskbar.  the plug-ins and the main window used to be separate.','main.c','549','75','11','0','false','false','false','2015-08-10 22:27:45-04:00'),('gimp','2_8_14','1d37c67879b3449704acc68c8cf2f27a957dac22','Michael Natterer','plug-ins: use the gimpcolorprofile api instead of the \"icc-profile\" parasite','file-tiff-load.c','1321','214','15','9','false','true','false','2015-08-20 11:15:26+02:00'),('gimp','2_8_14','1d37c67879b3449704acc68c8cf2f27a957dac22','Michael Natterer','plug-ins: use the gimpcolorprofile api instead of the \"icc-profile\" parasite','file-tiff-save.c','1021','162','11','9','false','false','false','2015-08-20 11:15:26+02:00'),('gimp','2_8_14','a4a0ec9598c47574e00ac39e873df04df85e252e','Michael Natterer','plug-ins, pdb: remove the maze plug-in and add a pdb compat proc','maze.c','None','None','0','751','false','false','false','2015-09-04 00:34:38+02:00'),('gimp','2_8_14','6a9d449eac943dc8e0357ee41387c5e357d39f5c','Jehan','app: new gimpsearchpopup widget.  based on gimppopup as parent, this is a generic search popup widget, which can display any list of action. the results construction logics is not part of the widget, and is built through a callback instead, which could allow to use it to create different dialogs.','gimpsearchpopup.c','577','64','766','0','false','false','false','2015-09-06 20:48:05+02:00'),('gimp','2_8_14','cbef12d645f8b2c9c91fb1162ba07919b9ddf802','Jehan','app: action search dialog now uses the new gimpsearchpopup widget...  ... instead of making its own window. inheriting from gimppopup, it is also friendlier to sloppy mouse, etc.','action-search-dialog.c','242','56','24','581','false','false','false','2015-09-06 20:48:05+02:00'),('gimp','2_8_14','701aff3c8a0ff936865679274770d89e7c234b47','Michael Natterer','plug-ins: lots of cleanup in file-tiff-load  move variables to local scopes, saner variable names, comment formatting, indentation, whatnot...','file-tiff-load.c','1410','224','322','272','false','true','false','2015-09-13 20:12:02+02:00'),('gimp','2_8_14','d73cfa4a24211f67889b84aeae8f70282ce33d3b','Tobias Ellinghaus','plug-ins: support color managed exr loading  this generates an icc profile from the embedded white point and chromaticities on the fly, assuming linear gamma images.','openexr-wrapper.h','36','0','5','0','false','false','false','2015-09-20 23:42:24+02:00'),('gimp','2_8_14','b70ffb0c8b5c70d36ab1e70024f4cb898fa3cb24','Michael Natterer','plug-ins: some cleanup in the new file-exr icc profile code','openexr-wrapper.h','36','0','3','3','false','false','false','2015-09-20 23:49:38+02:00'),('gimp','2_8_14','cd2b395194fd42ef788669b55ffa4ef95721bb60','Jehan','app: batch commands won\'t run on existing instance.','unique.c','195','24','79','3','false','false','false','2015-09-28 22:31:21+02:00'),('gimp','2_8_14','cd2b395194fd42ef788669b55ffa4ef95721bb60','Jehan','app: batch commands won\'t run on existing instance.','unique.c','195','24','79','3','false','false','false','2015-09-28 22:31:21+02:00'),('gimp','2_8_14','84360b195607058cd37ed2a4e762e0739214cee9','Jehan','app: indentation fix.','unique.c','195','24','6','6','true','false','false','2015-09-29 00:32:24+02:00'),('gimp','2_8_14','84360b195607058cd37ed2a4e762e0739214cee9','Jehan','app: indentation fix.','unique.c','195','24','6','6','true','false','false','2015-09-29 00:32:24+02:00'),('gimp','2_8_14','cb8e16aae8302021b4254dbbb4e8d4a1058ddadd','Michael Natterer','app: move app/batch.[ch] to app/core/gimp-batch.[ch]  there is no reason batch processing should be considered \"glue code\".','gimp-batch.h','3','0','6','10','false','false','false','2015-09-30 01:57:33+02:00'),('gimp','2_8_14','0d88399eb8e9fda504c99111bc9c66c141f4c898','Kristian Rietveld','bug 753175 - color picker locks down the gui  the common code relies on x11 pointer grabbing semantics, which does not work well on os x. an attempt using event taps also proved problematic, in particular with regard to setting the mouse cursor.  this patch implements a fully separate code for use on os x platforms. it works by simply overlaying the desktop with big transparent windows on which the mouse cursor is set and motion events are captured. evil, but it works.','gimppickbutton-quartz.c','262','9','414','0','true','false','false','2015-10-04 16:27:17+02:00'),('gimp','2_8_14','0d88399eb8e9fda504c99111bc9c66c141f4c898','Kristian Rietveld','bug 753175 - color picker locks down the gui  the common code relies on x11 pointer grabbing semantics, which does not work well on os x. an attempt using event taps also proved problematic, in particular with regard to setting the mouse cursor.  this patch implements a fully separate code for use on os x platforms. it works by simply overlaying the desktop with big transparent windows on which the mouse cursor is set and motion events are captured. evil, but it works.','gimppickbutton.c','72','6','3','276','true','false','false','2015-10-04 16:27:17+02:00'),('gimp','2_8_14','0d88399eb8e9fda504c99111bc9c66c141f4c898','Kristian Rietveld','bug 753175 - color picker locks down the gui  the common code relies on x11 pointer grabbing semantics, which does not work well on os x. an attempt using event taps also proved problematic, in particular with regard to setting the mouse cursor.  this patch implements a fully separate code for use on os x platforms. it works by simply overlaying the desktop with big transparent windows on which the mouse cursor is set and motion events are captured. evil, but it works.','gimppickbutton.c','72','6','3','276','true','false','false','2015-10-04 16:27:17+02:00'),('gimp','2_8_14','30a86e38b8358c5b41ba2df2e6538a904073efed','Michael Natterer','libgimpwidgets: slightly redo how gimppickbutton calls its new backends  to make porting to gtk+ 3.x easier, for less diff to the gtk3-port branch.','gimppickbutton.c','80','8','17','4','false','false','false','2015-10-06 23:44:36+02:00'),('gimp','2_8_14','7e62875d4865dc6121f5d53192cba574d79bcf18','Michael Natterer','plug-ins: port file-xwd-save to gio  and properly format all prototypes in the file.','file-xwd.c','1948','411','302','232','false','false','false','2015-10-18 14:26:25+02:00'),('gimp','2_8_14','7e62875d4865dc6121f5d53192cba574d79bcf18','Michael Natterer','plug-ins: port file-xwd-save to gio  and properly format all prototypes in the file.','file-xwd.c','1948','411','302','232','false','false','false','2015-10-18 14:26:25+02:00'),('gimp','2_8_14','7e62875d4865dc6121f5d53192cba574d79bcf18','Michael Natterer','plug-ins: port file-xwd-save to gio  and properly format all prototypes in the file.','file-xwd.c','1948','411','302','232','false','false','false','2015-10-18 14:26:25+02:00'),('gimp','2_8_14','68a9835d5646341ebd21b1632e97e1a78f851252','Michael Natterer','bug 756822 - colors/desaturate/luminosity should operate on linear rgb  add gimp_desaturate_luminance to enum gimpdesaturatemode and rename gimp_desaturate_luminosity to gimp_desaturate_luma.  keep gimp_desaturate_luminosity as deprecated compat value and add it to the script-fo and pygimp compat constants.  change gimpoperationdesaturate to process gimp_desaturate_luminance with linear \"rgba float\".','gimpbaseenums.h','488','0','7','2','true','false','false','2015-10-22 19:50:56+02:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot-osx.c','56','8','118','0','true','false','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot-osx.h','4','0','33','0','true','false','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot-x11.c','488','89','702','0','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot-x11.c','488','89','702','0','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot-x11.h','4','0','33','0','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot.c','447','32','77','889','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot.c','447','32','77','889','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot.c','447','32','77','889','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot.c','447','32','77','889','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot.c','447','32','77','889','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_14','e4ff6b40da511fae4b6864f280e5e9981799b509','Michael Natterer','bug 757687 - screenshot functionality broken under wayland  move os x and x11 specific code to its own files, to prepare for more shooting backends being added. also remove unimplemented g_os_win32 stubs, if anyone feels like implementing a windows backend, by all means go ahead.','screenshot.c','447','32','77','889','true','true','false','2015-11-07 22:39:32+01:00'),('gimp','2_8_16','bc980cd73aea795dea1e453cb403c33c1f63375b','Michael Natterer','bug 757783 - when opening linear gamma pngs or tiffs...  ...many operations give wrong results  same fix for tiff: get the color profile first, then create a linear image if the profile says so.','file-tiff-load.c','1521','238','281','156','true','false','false','2015-11-23 22:29:06+01:00'),('gimp','2_10_0','a7b0d55fc5f7d6569ed98154e0311c96225d1e22','Øyvind Kolås','app: only create geglbuffer wrapper for cairo-data when used  as suggested by massimo in bug #694917, move unconditional creation/destruction of a wrapper geglbuffer object from top-level scope of the function to the single conditional scope where it is used.','gimpdisplayshell-render.c','230','26','9','8','true','true','false','2018-03-28 00:37:06+02:00'),('gimp','2_10_0','69d5201d59e8bdac21003c7a6da06b535997a629','Michael Natterer','app: fix formatting in previous commit','gimpdisplayshell-render.c','230','26','6','8','true','false','false','2018-03-28 00:44:33+02:00'),('gimp','2_10_0','53c145c0be4ad7ad52c3be40537b3032175f0856','Ell','app: add --show-debug-menu command-line option  the debug menu is currently not included in stable versions.  include the menu unconditionally, but hide it, and its associated actions, by default in stable versions.  allow enabling the menu using a new --show-debug-menu command-line option, in the same vein as --show-playground.','debug-actions.c','60','3','10','6','false','false','false','2018-03-29 05:26:03-04:00'),('gimp','2_10_0','53c145c0be4ad7ad52c3be40537b3032175f0856','Ell','app: add --show-debug-menu command-line option  the debug menu is currently not included in stable versions.  include the menu unconditionally, but hide it, and its associated actions, by default in stable versions.  allow enabling the menu using a new --show-debug-menu command-line option, in the same vein as --show-playground.','debug-commands.c','310','34','0','5','false','false','false','2018-03-29 05:26:03-04:00'),('gimp','2_10_0','53c145c0be4ad7ad52c3be40537b3032175f0856','Ell','app: add --show-debug-menu command-line option  the debug menu is currently not included in stable versions.  include the menu unconditionally, but hide it, and its associated actions, by default in stable versions.  allow enabling the menu using a new --show-debug-menu command-line option, in the same vein as --show-playground.','debug-commands.h','16','0','0','10','false','false','false','2018-03-29 05:26:03-04:00'),('gimp','2_10_0','53c145c0be4ad7ad52c3be40537b3032175f0856','Ell','app: add --show-debug-menu command-line option  the debug menu is currently not included in stable versions.  include the menu unconditionally, but hide it, and its associated actions, by default in stable versions.  allow enabling the menu using a new --show-debug-menu command-line option, in the same vein as --show-playground.','debug-commands.h','16','0','0','10','false','false','false','2018-03-29 05:26:03-04:00'),('gimp','2_10_0','53c145c0be4ad7ad52c3be40537b3032175f0856','Ell','app: add --show-debug-menu command-line option  the debug menu is currently not included in stable versions.  include the menu unconditionally, but hide it, and its associated actions, by default in stable versions.  allow enabling the menu using a new --show-debug-menu command-line option, in the same vein as --show-playground.','main.c','568','77','8','0','false','false','false','2018-03-29 05:26:03-04:00'),('gimp','2_10_0','29d7cee1008b1b52e03a1c53fd801b9d9c3dbe22','Michael Natterer','configure.ac: add new option --enable-bundled-mypaint-brushes  because a simple platform dependency in gimpcoreconfig.c doesn\'t do the trick (there can be both manual builds and bundled builds on windows and macos). use an ac_define() instead.  also, make sure the system gimprc and its manpage are generated with the correct values.','gimpcoreconfig.c','1073','136','1','1','false','false','false','2018-03-30 14:41:13+02:00'),('gimp','2_10_0','da3c96f541d1ab9fb62b527625b30c13d2f34181','Ell','app: add \"misc\" group to the dashboard  ... which currently has a single \"mipmapped\" field, which shows the total size of processed mipmapped data.','gimpdashboard.c','2042','235','36','2','false','false','false','2018-04-02 16:47:45-04:00'),('gimp','2_10_0','e98b937643b005b9698ee042dc2250a5247fac23','Jehan','libgimp: add a gimp_fatal_func() allowing stack tracing plug-ins on...  ... various crashes.','gimp.c','1431','275','71','0','false','true','false','2018-04-04 04:33:19+02:00'),('gimp','2_10_0','9c8a8ae57645ec60f1e072b4f7cb51917d14379d','Jehan','libgimp: do not end the fatal and signal handlers with gimp_quit().  when ending with gimp_quit(), gimp was not displaying the \"plug-in crashed\" error dialog, which is not good, since we lose the crash feedback for plug-ins. just let the plug-in continue its normal run in order to get the error dialog. also protect the tracing functions, which are not working on win32.','gimp.c','1429','275','10','2','true','false','false','2018-04-04 04:47:43+02:00'),('gimp','2_10_0','76bce77d097c6ebec7f894cb81fc6cc138e0bec0','Jehan','libgimp: various warning fixes for win32.','gimp.c','1430','275','19','9','true','false','false','2018-04-04 06:32:33+02:00'),('gimp','2_10_0','76bce77d097c6ebec7f894cb81fc6cc138e0bec0','Jehan','libgimp: various warning fixes for win32.','gimp.c','1430','275','19','9','true','false','false','2018-04-04 06:32:33+02:00'),('gimp','2_10_0','76bce77d097c6ebec7f894cb81fc6cc138e0bec0','Jehan','libgimp: various warning fixes for win32.','gimp.c','1430','275','19','9','true','false','false','2018-04-04 06:32:33+02:00'),('gimp','2_10_0','76bce77d097c6ebec7f894cb81fc6cc138e0bec0','Jehan','libgimp: various warning fixes for win32.','gimp.c','1430','275','19','9','true','false','false','2018-04-04 06:32:33+02:00'),('gimp','2_10_0','fa02a2c64f5fcaaceff34cea2bd02c5e558c63ca','Jehan','libgimp: add an exception handler for windows.  drmingw already added its own exception handler which generates crash traces in a text file, for plug-ins as well. this additional handler is run after drmingw handler and allows us to do things on our own, and in particular we could display the content of the debug traces.  right now it simply prints these to stderr, which actually won\'t be of much use on win32, first because the console is deactivated on stable releases, also because after tests, it doesn\'t look like even running gimp from cmd outputs to console either.  we currently don\'t use the same debug dialog as the core on purpose, because we don\'t want everyone to send us traces for every unmaintained third party plug-ins out there. but we should definitely allow easier trace possibilities at some point, first to improve/debug our own core plug-ins, and also to help third party plug-in developers! so this commit is not making visible changes yet but is actually a first step towards these debugging goals.','gimp.c','1461','284','68','12','false','false','false','2018-04-04 20:25:29+02:00'),('gimp','2_10_0','fa02a2c64f5fcaaceff34cea2bd02c5e558c63ca','Jehan','libgimp: add an exception handler for windows.  drmingw already added its own exception handler which generates crash traces in a text file, for plug-ins as well. this additional handler is run after drmingw handler and allows us to do things on our own, and in particular we could display the content of the debug traces.  right now it simply prints these to stderr, which actually won\'t be of much use on win32, first because the console is deactivated on stable releases, also because after tests, it doesn\'t look like even running gimp from cmd outputs to console either.  we currently don\'t use the same debug dialog as the core on purpose, because we don\'t want everyone to send us traces for every unmaintained third party plug-ins out there. but we should definitely allow easier trace possibilities at some point, first to improve/debug our own core plug-ins, and also to help third party plug-in developers! so this commit is not making visible changes yet but is actually a first step towards these debugging goals.','gimp.c','1461','284','68','12','false','false','false','2018-04-04 20:25:29+02:00'),('gimp','2_10_0','fa02a2c64f5fcaaceff34cea2bd02c5e558c63ca','Jehan','libgimp: add an exception handler for windows.  drmingw already added its own exception handler which generates crash traces in a text file, for plug-ins as well. this additional handler is run after drmingw handler and allows us to do things on our own, and in particular we could display the content of the debug traces.  right now it simply prints these to stderr, which actually won\'t be of much use on win32, first because the console is deactivated on stable releases, also because after tests, it doesn\'t look like even running gimp from cmd outputs to console either.  we currently don\'t use the same debug dialog as the core on purpose, because we don\'t want everyone to send us traces for every unmaintained third party plug-ins out there. but we should definitely allow easier trace possibilities at some point, first to improve/debug our own core plug-ins, and also to help third party plug-in developers! so this commit is not making visible changes yet but is actually a first step towards these debugging goals.','gimp.c','1461','284','68','12','false','false','false','2018-04-04 20:25:29+02:00'),('gimp','2_10_0','fa02a2c64f5fcaaceff34cea2bd02c5e558c63ca','Jehan','libgimp: add an exception handler for windows.  drmingw already added its own exception handler which generates crash traces in a text file, for plug-ins as well. this additional handler is run after drmingw handler and allows us to do things on our own, and in particular we could display the content of the debug traces.  right now it simply prints these to stderr, which actually won\'t be of much use on win32, first because the console is deactivated on stable releases, also because after tests, it doesn\'t look like even running gimp from cmd outputs to console either.  we currently don\'t use the same debug dialog as the core on purpose, because we don\'t want everyone to send us traces for every unmaintained third party plug-ins out there. but we should definitely allow easier trace possibilities at some point, first to improve/debug our own core plug-ins, and also to help third party plug-in developers! so this commit is not making visible changes yet but is actually a first step towards these debugging goals.','gimp.c','1461','284','68','12','false','false','false','2018-04-04 20:25:29+02:00'),('gimp','2_10_0','700cc33bec157d81efd865189a55f9e6b9dee379','Ell','configure.ac: require a c++11 compiler  the following commits use c++11 lambdas.','ax_cxx_compile_stdcxx.m4','913','0','980','0','false','false','false','2018-04-04 17:49:46-04:00'),('gimp','2_10_0','86b89cf62a14b98056355d0c8ad2b27e29b3a56f','Ell','app: add gimp-parallel  add gimp-parallel.[cc,h], which provides a set of parallel algorithms.  these currently include:    - gimp_parallel_distribute():  calls a callback function in     parallel on multiple threads, passing it the current thread     index, and the total number of threads.  allows specifying the     maximal number of threads used.    - gimp_parallel_distribute_range():  splits a range of integers     between multiple threads, passing the sub-range to a callback     function.  allows specifying the minimal sub-range size.    - gimp_parallel_distribute_area():  splits a rectangular area     between multiple threads, passing the sub-area to a callback     function.  allows specifying the minimal sub-area.  the callback function is passed using an appropriately-typed function pointer, and a user-data pointer.  additionally, when used in a c++ file, each of the above functions has an overloaded template version, taking the callback through a generic parameter, without a user-data pointer, which allows using function objects.','gimp-parallel.h','70','3','112','0','false','true','false','2018-04-04 17:49:46-04:00'),('gimp','2_10_0','ba06a0fe86088b37cef3eeb3db1ce5bb39f2257c','Jehan','bug 794949 - plugin crash when opening png, jpeg or tiff with...  ... non-latin unicode path. g_win32_locale_filename_from_utf8() was sometimes returning null for some paths on windows. then the call to gexiv2_metadata_open_path() with a null value was crashing plug-ins. this commit only prevents from crashing by simply failing to load metadata when this occurs, which means losing metadata support on windows depending on filenames. a proper solution will have to be implemented.','gimpmetadata.c','1072','159','11','0','true','false','false','2018-04-05 00:18:28+02:00'),('gimp','2_10_0','6e314b5090b2d75603f919fb5d9306f822ead285','Ell','app: move brush-core loops to a separate file  move gimp_brush_core_{subsample,pressurize,solidify}_mask() to a separate gimpbrushcore-loops.cc file, so that they can be c++-ified independently from the rest of the code.  the next commit parallelizes them.','gimpbrushcore-loops.cc','263','49','379','0','false','false','false','2018-04-05 17:41:29-04:00'),('gimp','2_10_0','6e314b5090b2d75603f919fb5d9306f822ead285','Ell','app: move brush-core loops to a separate file  move gimp_brush_core_{subsample,pressurize,solidify}_mask() to a separate gimpbrushcore-loops.cc file, so that they can be c++-ified independently from the rest of the code.  the next commit parallelizes them.','gimpbrushcore.c','1026','140','1','358','false','false','false','2018-04-05 17:41:29-04:00'),('gimp','2_10_0','53fae39aeed4634dde5377da777d09b26744c9f4','Michael Natterer','bug 795057 - insensitive text in plug-ins is unreadable with dark themes  copy the fix from app/gui/themes.c to libgimp/gimpui.c so insensitive labels look right in plug-ins too.','gimpui.c','259','39','106','7','true','false','false','2018-04-08 22:55:19+02:00'),('gimp','2_10_0','53fae39aeed4634dde5377da777d09b26744c9f4','Michael Natterer','bug 795057 - insensitive text in plug-ins is unreadable with dark themes  copy the fix from app/gui/themes.c to libgimp/gimpui.c so insensitive labels look right in plug-ins too.','gimpui.c','259','39','106','7','true','false','false','2018-04-08 22:55:19+02:00'),('gimp','2_10_0','4bc982b84abdf95e00f994b0bcf07aaa3f9cd760','Jehan','bug 795123 - plug-in crash starts neverending loop.  since commit 9c8a8ae576, we don\'t run gimp_quit(), which properly quits the plug-in executable, to make sure that gimp gets the information that it crashed. instead quit with `exit (exit_failure)`.','gimp.c','1463','284','2','0','true','false','false','2018-04-10 14:19:34+02:00'),('gimp','2_10_0','ae6a7bf98f409d184e13ddfd18581777339c45eb','Jehan','libgimpbase: improve multi-threaded stack traces.  since commit bb52431cdd, we get multi-thread traces in functions gimp_stack_trace_*(). adding now the lldb equivalent improvement.  also adding the process and thread id information, from which the trace order was made, atop the listing, as well as the thread list. this would allow to easily find and associate the threads. the problem is that sometimes the thread where we got a trace from may not matter (for instance signals, even such as sigabrt or sigsegv, seem to sent a bit randomly to either the thread which provoked them or the main thread; there is a bit of contradictory info on this when reading on the topic, in my case i experienced this), in such case, getting all thread stack is important to find the origin of the signal. other times it will highly matter, in particular when getting a trace for a warning or critical. this information will help to discriminate between thread traces.','gimputils.c','858','182','49','21','false','false','false','2018-04-10 14:48:44+02:00'),('gimp','2_10_0','ae6a7bf98f409d184e13ddfd18581777339c45eb','Jehan','libgimpbase: improve multi-threaded stack traces.  since commit bb52431cdd, we get multi-thread traces in functions gimp_stack_trace_*(). adding now the lldb equivalent improvement.  also adding the process and thread id information, from which the trace order was made, atop the listing, as well as the thread list. this would allow to easily find and associate the threads. the problem is that sometimes the thread where we got a trace from may not matter (for instance signals, even such as sigabrt or sigsegv, seem to sent a bit randomly to either the thread which provoked them or the main thread; there is a bit of contradictory info on this when reading on the topic, in my case i experienced this), in such case, getting all thread stack is important to find the origin of the signal. other times it will highly matter, in particular when getting a trace for a warning or critical. this information will help to discriminate between thread traces.','gimputils.c','858','182','49','21','false','false','false','2018-04-10 14:48:44+02:00'),('gimp','2_10_0','bf49b476209ed8350438fa496e7338c172b9b3b3','Michael Natterer','bug 795207 - add color space to blend(gradient) tool options  first wip commit, adds:  - enum gimpgradientblendcolorspace { rgb_perceptual, rgb_linear } - linear blending mode for gradient segments - tool options gui for the blend and paint tools which use gradients','gimpoperationblend.c','950','140','44','24','true','false','false','2018-04-13 22:33:16+02:00'),('gimp','2_10_0','b55c116755864570bc0597dbb877c40c821949b3','Michael Natterer','bug 795230 - rename blend tool and provide pdb compatibility  rename gimpoperationblend to gimpoperationgradient.','gimpoperationgradient.c','949','140','52','54','true','false','false','2018-04-13 23:36:16+02:00'),('gimp','2_10_0','9dbf919d46aeb9604404d551979b7dd511cb0a8f','Michael Natterer','app: speed up gradient rendering a lot  by using a cache of colors that is calculated once, instead of calling gimp_gradient_get_color_at() for each rendered pixel.','gimpoperationgradient.c','926','137','63','96','false','false','false','2018-04-18 01:18:09+02:00'),('gimp','2_10_2','dbd9797a13cb21c3a11e9b9bab67370646573736','Michael Natterer','switch to version 2.99/3.0 in a lot of places and depend on gtk+ 3.22  and lots of other newer libraries.','gimpenv.c','537','98','16','16','false','true','false','2018-05-20 21:06:26+02:00'),('gimp','2_10_2','4ae7d4c8250c75df380dfb9bd6dccde638763196','Michael Natterer','libgimpwidgets: remove deprecated files completely','gimpoldwidgets.h','None','None','0','122','false','false','false','2018-05-20 21:06:26+02:00'),('gimp','2_10_2','4ae7d4c8250c75df380dfb9bd6dccde638763196','Michael Natterer','libgimpwidgets: remove deprecated files completely','gimppixmap.h','None','None','0','78','false','false','false','2018-05-20 21:06:26+02:00'),('gimp','2_10_2','4ae7d4c8250c75df380dfb9bd6dccde638763196','Michael Natterer','libgimpwidgets: remove deprecated files completely','gimpunitmenu.h','None','None','0','105','false','false','false','2018-05-20 21:06:26+02:00'),('gimp','2_10_2','4ae7d4c8250c75df380dfb9bd6dccde638763196','Michael Natterer','libgimpwidgets: remove deprecated files completely','gimpunitmenu.h','None','None','0','105','false','false','false','2018-05-20 21:06:26+02:00'),('gimp','2_10_2','232a168785e04e2fc60296ae2c3fe8124392b4e2','Michael Natterer','app: s/gtkobject/gtkadjustment/','gimphistogrambox.c','215','18','4','8','false','false','false','2018-05-20 21:06:26+02:00'),('gimp','2_10_2','23e3ae8fbeda0bd2f14db0ec16e51301519ea846','Michael Natterer','app: use the new gtkscrollable api instead of deprecated tree view api','gimpcontainertreeview-dnd.c','519','103','1','1','false','false','false','2018-05-20 21:06:27+02:00'),('gimp','2_10_2','3d4ef455d22246f5932e3fbfc80ace34072770f7','Michael Natterer','libgimpwidgets: move all gimppickbutton members to a private struct','gimppickbutton.c','89','9','14','6','false','false','false','2018-05-20 21:06:28+02:00'),('gimp','2_10_2','79dd44fb184f4b4ae86ef0759aac8f0831934d0e','Michael Natterer','libgimpwidgets: move all gimpcolordisplay members to a private struct','gimpcolordisplay.h','64','0','14','18','false','false','false','2018-05-20 21:06:28+02:00'),('gimp','2_10_2','9c15020c41ce2bbe346e64bd8ff98d1e9bc5916a','Michael Natterer','libgimpwidgets: add padding','gimpcolorselector.h','87','0','16','19','false','false','false','2018-05-20 21:06:28+02:00'),('gimp','2_10_2','1671da428c4889a11a3e7770403e62c62a064bf5','Michael Natterer','libgimpbase: remove almost all deprecated compat cruft  keep infrastructure for compat enums around because we will mose definitely need it again.','gimpbaseenums.h','486','0','27','216','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','1671da428c4889a11a3e7770403e62c62a064bf5','Michael Natterer','libgimpbase: remove almost all deprecated compat cruft  keep infrastructure for compat enums around because we will mose definitely need it again.','gimpenv.h','31','0','0','5','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','5e10894334e0c50882574e22d035054ad9ed4c6d','Michael Natterer','libgimpmodule: remove all deprecated cruft','gimpmoduletypes.h','6','0','0','9','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','86e3f31a033017439f0f85936859cd008f094c72','Michael Natterer','libgimpconfig: remove all deprecated cruft','gimpconfig-params.h','2','0','0','52','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','1ed586f0f1d0e652d3808474438c02bc651cdf99','Michael Natterer','libgimpcolor: remove most deprecated cruft, rest to follow','gimprgb.h','102','0','0','27','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','9525c646e113f88151c75cf86323e2180d3cd0b6','Michael Natterer','libgimp: remove tons of deprecated cruft','gimpmenu.h','None','None','0','68','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','9525c646e113f88151c75cf86323e2180d3cd0b6','Michael Natterer','libgimp: remove tons of deprecated cruft','gimptypes.h','11','0','0','39','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','1f0d296eb62f78b0b63e2e7bb79346f95a5e9f57','Michael Natterer','libgimpwidgets: remove most deprecated cruft','gimpicons.h','4','0','0','257','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','0dd8459a1f5adf2a5d039f31e2ee2565d997a4c0','Michael Natterer','libgimp: deprecate more cruft, everything not needed by cruft plug-ins','gimpprogress.h','33','0','0','19','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','0dd8459a1f5adf2a5d039f31e2ee2565d997a4c0','Michael Natterer','libgimp: deprecate more cruft, everything not needed by cruft plug-ins','gimpui.c','193','31','0','3','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','0dd8459a1f5adf2a5d039f31e2ee2565d997a4c0','Michael Natterer','libgimp: deprecate more cruft, everything not needed by cruft plug-ins','gimpui.c','193','31','0','3','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','37e24d0059afb6aaad343d808be1c5c3ca120fa3','Michael Natterer','libgimpwidgets: remove gimp3migration.[ch]','gimp3migration.c','None','None','0','271','false','false','false','2018-05-20 21:06:29+02:00'),('gimp','2_10_2','5ece7a8d1f047574b155b45138802e250c056072','Michael Natterer','port a lot of stuff from gdkscreen/monitor_number to gdkmonitor  including some fixes for getting pointer coords, and needed api changes in libgimpwidgets.','gimppickbutton-default.c','260','21','5','4','true','false','false','2018-05-20 21:06:30+02:00'),('gimp','2_10_2','5ece7a8d1f047574b155b45138802e250c056072','Michael Natterer','port a lot of stuff from gdkscreen/monitor_number to gdkmonitor  including some fixes for getting pointer coords, and needed api changes in libgimpwidgets.','screenshot.c','637','82','15','16','true','false','false','2018-05-20 21:06:30+02:00'),('gimp','2_10_2','5ece7a8d1f047574b155b45138802e250c056072','Michael Natterer','port a lot of stuff from gdkscreen/monitor_number to gdkmonitor  including some fixes for getting pointer coords, and needed api changes in libgimpwidgets.','screenshot.c','637','82','15','16','true','false','false','2018-05-20 21:06:30+02:00'),('gimp','2_10_2','5ece7a8d1f047574b155b45138802e250c056072','Michael Natterer','port a lot of stuff from gdkscreen/monitor_number to gdkmonitor  including some fixes for getting pointer coords, and needed api changes in libgimpwidgets.','screenshot.c','637','82','15','16','true','false','false','2018-05-20 21:06:30+02:00'),('gimp','2_10_2','588da0c8e8ea7f8070643c7aa3ac38f8f2f8b217','Jehan','app: remove #undef gdk_disable_deprecated  this was only needed for the insensitive menu item hack which has now be removed to support css themes.','themes.c','290','29','0','3','false','false','false','2018-05-20 21:06:30+02:00'),('gimp','2_10_2','7549b6efe47b9f609393b38ae232f0b069be6552','Michael Natterer','bug 794132 - make the plug-in protocol version part of the plug-in command line  also clean gpconfig struct from deprecated members and bump the plug-in protocol version number.','gimp.c','1418','276','23','23','true','true','false','2018-05-20 21:06:30+02:00'),('gimp','2_10_4','5f700549e7bd1881678152bc1bd20e116a8ea444','Michael Natterer','change the license url from http://www.gnu.org/licenses/ to https://','gimp-gradients.h','6','0','1','1','false','false','false','2018-07-11 23:29:46+02:00'),('gimp','2_10_4','5f700549e7bd1881678152bc1bd20e116a8ea444','Michael Natterer','change the license url from http://www.gnu.org/licenses/ to https://','gimp-internal-data.h','6','0','1','1','false','false','false','2018-07-11 23:29:46+02:00'),('gimp','2_10_4','5f700549e7bd1881678152bc1bd20e116a8ea444','Michael Natterer','change the license url from http://www.gnu.org/licenses/ to https://','gimp-palettes.h','6','0','1','1','false','false','false','2018-07-11 23:29:46+02:00'),('gimp','2_10_4','5f700549e7bd1881678152bc1bd20e116a8ea444','Michael Natterer','change the license url from http://www.gnu.org/licenses/ to https://','gimppalette-import.h','25','0','1','1','false','false','false','2018-07-11 23:29:46+02:00'),('gimp','2_10_4','5f700549e7bd1881678152bc1bd20e116a8ea444','Michael Natterer','change the license url from http://www.gnu.org/licenses/ to https://','gimpcontroller.h','78','0','1','1','false','false','false','2018-07-11 23:29:46+02:00'),('gimp','2_10_4','5f700549e7bd1881678152bc1bd20e116a8ea444','Michael Natterer','change the license url from http://www.gnu.org/licenses/ to https://','gimpfileentry.h','37','0','1','1','false','false','false','2018-07-11 23:29:46+02:00'),('gimp','2_10_4','680642e37ce40ec841d6c87d7166b186670af0e0','Michael Natterer','plug-ins, pdb: remove the unsharp-mask plug-in and add a pdb compat proc','unsharp-mask.c','None','None','0','957','false','false','false','2018-07-14 17:11:25+02:00'),('gimp','2_10_4','680642e37ce40ec841d6c87d7166b186670af0e0','Michael Natterer','plug-ins, pdb: remove the unsharp-mask plug-in and add a pdb compat proc','unsharp-mask.c','None','None','0','957','false','false','false','2018-07-14 17:11:25+02:00'),('gimp','2_10_4','e09e563a70fef5d7dd55e5e8d0e280348f1ef9d4','Michael Natterer','initial space invasion commit in gimp  all babl formats now have a space equivalent to a color profile, determining the format\'s primaries and trcs. this commit makes gimp aware of this.  libgimp:  - enum gimpprecision: rename gamma values to non_linear and keep gamma   as deprecated aliases, add perceptual values so we now have linear,   non_linear and percptual for each encoding, matching the babl   encoding variants rgb, r\'g\'b\' and r~g~b~.  - gimp_color_transform_can_gegl_copy() now returns true if both   profiles can return a babl space, increasing the amount of fast babl   color conversions significantly.  - todo: no solution yet for getting libgimp drawable proxy buffers in   the right format with space.  plug-ins:  - follow the gimpprecision change.  - todo: everything else unchanged and partly broken or sub-optimal,   like setting a new image\'s color profile too late.  app:  - add enum gimptrctype { linear, non_linear, perceptual } as   replacement for all \"linear\" booleans.  - change gimp-babl functions to take babl spaces and gimptrctype   parameters and support all sorts of new perceptual ~ formats.  - a lot of places changed in the early days of goat invasion didn\'t   take advantage of gimp-babl utility functions and constructed   formats manually. they all needed revisiting and many now use much   simpler code calling gimp-babl api.  - change gimp_babl_format_get_color_profile() to really extract a   newly allocated color profile from the format, and add   gimp_babl_get_builtin_color_profile() which does the same as   gimp_babl_format_get_color_profile() did before. visited all callers   to decide whether they are looking for the format\'s actual profile,   or for one of the builtin profiles, simplifying code that only needs   builtin profiles.  - drawables have a new get_space_api(), get_linear() is now get_trc().  - images now have a \"layer space\" and an api to get it,   gimp_image_get_layer_format() returns formats in that space.  - an image\'s layer space is created from the image\'s color profile,   change gimpimage-color-profile to deal with that correctly  - change many babl_format() calls to babl_format_with_space() and take   the space from passed formats or drawables  - add function gimp_layer_fix_format_space() which replaces the   layer\'s buffer with one that has the image\'s layer format, but   doesn\'t change pixel values  - use gimp_layer_fix_format_space() to make sure layers loaded from   xcf and created by plug-ins have the right space when added to the   image, because it\'s impossible to always assign the right space upon   layer creation  - \"assign color profile\" and \"discard color profile\" now require use   of gimp_layer_fix_format_space() too because the profile is now   embedded in all formats via the space.  add   gimp_image_assign_color_profile() which does all that and call it   instead of a simple gimp_image_set_color_profile(), also from the   pdb set-color-profile functions, which are essentially \"assign\" and   \"discard\" calls.  - generally, make sure a new image\'s color profile is set before   adding layers to it, gimp_image_set_color_profile() is more than   before considered know-what-you-are-doing api.  - take special precaution in all places that call   gimp_drawable_convert_type(), we now must pass a new_profile from   all callers that convert layers within the same image (such as   image_convert_type, image_convert_precision), because the layer\'s   new space can\'t be determined from the image\'s layer format during   the call.  - change all \"linear\" properties to \"trc\", in all config objects like   for levels and curves, in the histogram, in the widgets. this results   in some gui that now has three choices instead of two.   todo: we might want to reduce that back to two later.  - keep \"linear\" boolean properties around as compat if needed for file   pasring, but always convert the parsed parsed boolean to   gimptrctype.  - todo: the image\'s \"enable color management\" switch is currently   broken, will fix that in another commit.','gimpbaseenums.h','498','0','58','24','true','false','false','2018-07-21 16:42:57+02:00'),('gimp','2_10_4','587d9bbb03b19558b7900f61c852a470f85761aa','ONO Yoshio','mr !19: add support for vertical text writing.  squashed commit of the following:  commit ee1ff7d502658cfa1248a13a3f0348495db07eda author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   sun jul 29 00:31:47 2018 +0900      fixed that gimp-text-dir-ttb-* icons are lacked in symbolic.  commit d87d012d697628da28fe90199cc04b95b72ba8ef author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   sat jul 28 16:23:10 2018 +0900      fix a typo.  commit cf0238bf7df56c384cdf3b7ec69557d14740f853 author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   sat jul 28 15:50:57 2018 +0900      fixed seg fault error.  commit b07f60d06fa1a753fda5b4d46af01698c344154e author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   fri jul 27 17:15:34 2018 +0900      add support for vertical text writing.      https://gitlab.gnome.org/gnome/gimp/issues/641','gimptextlayout.c','594','105','62','9','true','false','false','2018-07-30 19:14:49+02:00'),('gimp','2_10_4','587d9bbb03b19558b7900f61c852a470f85761aa','ONO Yoshio','mr !19: add support for vertical text writing.  squashed commit of the following:  commit ee1ff7d502658cfa1248a13a3f0348495db07eda author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   sun jul 29 00:31:47 2018 +0900      fixed that gimp-text-dir-ttb-* icons are lacked in symbolic.  commit d87d012d697628da28fe90199cc04b95b72ba8ef author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   sat jul 28 16:23:10 2018 +0900      fix a typo.  commit cf0238bf7df56c384cdf3b7ec69557d14740f853 author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   sat jul 28 15:50:57 2018 +0900      fixed seg fault error.  commit b07f60d06fa1a753fda5b4d46af01698c344154e author: ono yoshio <ohtsuka.yoshio@gmail.com> date:   fri jul 27 17:15:34 2018 +0900      add support for vertical text writing.      https://gitlab.gnome.org/gnome/gimp/issues/641','gimptexttool-editor.c','1470','230','196','6','true','false','false','2018-07-30 19:14:49+02:00'),('gimp','2_10_4','04bbe941d5eb60d7547f7c66cd482f5fe91471e6','Jehan','issue #1999: opening the preferences dialogue triggers xcode warning.  it seems that calling `lldb` when it is absent triggers some popup proposing to install xcode on macos. this is obviously not good. let\'s check presence with g_find_program_in_path() instead. i was refraining from doing so until now, because this function allocates memory, hence may not do well during a crash. fortunately we don\'t need to check for lldb during crash (unlike gdb which has some unacceptable behavior for older versions, at least on freebsd) so that should be ok.','gimputils.c','875','190','25','11','false','false','false','2018-08-11 00:25:45+02:00'),('gimp','2_10_4','0832bbd7713e785875b0ba1a061122289a97529a','Jehan','plug-ins: replace s/printf/g_printf/  when cross-compiling, i got various linking errors for printf() calls: > undefined reference to `libintl_printf\'  i am unsure why, since this is not recent code, and it used to build fine with mingw64 compilers (last i cross-built, which is many months ago). anyway g_printf() works fine, all necessary libs are already linked, and it is supposed to be a synonym. so let\'s just go the easy way and use g_printf() only.  (cherry picked from commit c49afa4f84c70538f7ed30784569bb4d32b159c0)','file-xwd.c','1950','411','27','27','false','false','false','2018-08-12 22:53:24+02:00'),('gimp','2_10_4','0832bbd7713e785875b0ba1a061122289a97529a','Jehan','plug-ins: replace s/printf/g_printf/  when cross-compiling, i got various linking errors for printf() calls: > undefined reference to `libintl_printf\'  i am unsure why, since this is not recent code, and it used to build fine with mingw64 compilers (last i cross-built, which is many months ago). anyway g_printf() works fine, all necessary libs are already linked, and it is supposed to be a synonym. so let\'s just go the easy way and use g_printf() only.  (cherry picked from commit c49afa4f84c70538f7ed30784569bb4d32b159c0)','file-xwd.c','1950','411','27','27','false','false','false','2018-08-12 22:53:24+02:00'),('gimp','2_10_4','ddeff314767b28a8a7aa8c883f2d9eff6d68ca8f','Jehan','app, configure: add a --enable-win32-debug-console build option.  debugging stable versions under windows is a pain because we don\'t have access to the standard outputs. the debug console is indeed only built on unstable builds. let\'s make the debug console a separate build option to allow building stable versions for debug (obviously the default behavior when not configuring, is same as before, i.e. stable without console and unstable with console).  (cherry picked from commit 1a2887894371c0344094cba600f48f9cec3ab101)','main.c','568','77','1','1','false','false','false','2018-08-12 22:54:25+02:00'),('gimp','2_10_4','ddeff314767b28a8a7aa8c883f2d9eff6d68ca8f','Jehan','app, configure: add a --enable-win32-debug-console build option.  debugging stable versions under windows is a pain because we don\'t have access to the standard outputs. the debug console is indeed only built on unstable builds. let\'s make the debug console a separate build option to allow building stable versions for debug (obviously the default behavior when not configuring, is same as before, i.e. stable without console and unstable with console).  (cherry picked from commit 1a2887894371c0344094cba600f48f9cec3ab101)','main.c','568','77','1','1','false','false','false','2018-08-12 22:54:25+02:00'),('gimp','2_10_4','d5b0f71b4c0b9b92e0b894a2c12a481bd45b0931','Jehan','app: open the windows console a bit earlier.  if we enable the console on windows, we might as well open it as fast as possible, since its purpose is debugging.  (cherry picked from commit c9d761805668185ee3b33270d8edd3aa49bf1f3a)','main.c','568','77','4','4','false','false','false','2018-08-15 14:34:26+02:00'),('gimp','2_10_4','b4f7a90afe7f1e3a09bbea690c6e606b674caa09','Jehan','app: reorder function definitions/declarations.  just make so that the declarations and definitions are in the same order for easy maintenance.  (cherry picked from commit 91cb86d2ab1dd0cfa68876c2519472fcfed68b9b)','gimpplugin.c','736','114','230','230','false','false','false','2018-08-15 19:24:49+02:00'),('gimp','2_10_4','b6e552a74b0305a1ec4f3ff2abcfe44a20c84d6d','Ell','app: add \"compression\" field to the swap dashboard group  the \"compression\" field reports the ratio between the total size of the data in the swap, and the total size the data would have had if all tiles in the swap occupied a unique data block.  see gegl commit 185f4450f2a51690b39112973c61f894c1ec3e41.','gimpdashboard.c','2458','286','18','0','false','false','false','2018-08-19 03:34:19-04:00'),('gimp','2_10_4','5446163e1d90f2be29bef8bcbdde54a88fac3715','Ell','app: show swap read/write throughput in the dashboard  show the read/write throughput of swap data in the corresponding swap-group fields.','gimpdashboard.c','2666','319','335','110','false','false','false','2018-08-19 03:34:47-04:00'),('gimp','2_10_4','5446163e1d90f2be29bef8bcbdde54a88fac3715','Ell','app: show swap read/write throughput in the dashboard  show the read/write throughput of swap data in the corresponding swap-group fields.','gimpdashboard.c','2666','319','335','110','false','false','false','2018-08-19 03:34:47-04:00'),('gimp','2_10_6','80bf686c9447f59bdc72cc9adb018ef1a0d83444','Ell','app: add gimpbacktrace  gimpbacktrace provides an interface for creating and traversing multi-threaded backtraces, as well as querying symbol information. while we already have some backtrace functionality, it relies on external tools for the most part, and as such is rather expensive, and is only meant for producing opaque backtraces.  gimpbacktrace, on the other hand, is meant to be relatively cheap (we\'re going to use it for profiling,) and allow inspection of the backtrace data. in the future, it might make sense to replace some, or all, of the other backtrace functions with gimpbacktrace.  gimpbacktrace currently only supports linux.  by default, it uses dladdr() to query symbol information, which is somewhat limited (in particular, it doesn\'t work for static functions.)  when libunwind is installed, gimpbacktrace uses it to get more complete symbol information.  libunwind is currently an optional dependency, but it might make sense to promote it to a mandatory, or opt-out, dependency, as it\'s lightweight and widely available.  on other platforms, the gimpbacktrace interface can still be used, but it always returns null backtraces.','gimpbacktrace-backend.h','0','0','32','0','false','false','false','2018-09-02 02:54:43-04:00'),('gimp','2_10_6','80bf686c9447f59bdc72cc9adb018ef1a0d83444','Ell','app: add gimpbacktrace  gimpbacktrace provides an interface for creating and traversing multi-threaded backtraces, as well as querying symbol information. while we already have some backtrace functionality, it relies on external tools for the most part, and as such is rather expensive, and is only meant for producing opaque backtraces.  gimpbacktrace, on the other hand, is meant to be relatively cheap (we\'re going to use it for profiling,) and allow inspection of the backtrace data. in the future, it might make sense to replace some, or all, of the other backtrace functions with gimpbacktrace.  gimpbacktrace currently only supports linux.  by default, it uses dladdr() to query symbol information, which is somewhat limited (in particular, it doesn\'t work for static functions.)  when libunwind is installed, gimpbacktrace uses it to get more complete symbol information.  libunwind is currently an optional dependency, but it might make sense to promote it to a mandatory, or opt-out, dependency, as it\'s lightweight and widely available.  on other platforms, the gimpbacktrace interface can still be used, but it always returns null backtraces.','gimpbacktrace-linux.c','406','70','591','0','false','true','false','2018-09-02 02:54:43-04:00'),('gimp','2_10_6','80bf686c9447f59bdc72cc9adb018ef1a0d83444','Ell','app: add gimpbacktrace  gimpbacktrace provides an interface for creating and traversing multi-threaded backtraces, as well as querying symbol information. while we already have some backtrace functionality, it relies on external tools for the most part, and as such is rather expensive, and is only meant for producing opaque backtraces.  gimpbacktrace, on the other hand, is meant to be relatively cheap (we\'re going to use it for profiling,) and allow inspection of the backtrace data. in the future, it might make sense to replace some, or all, of the other backtrace functions with gimpbacktrace.  gimpbacktrace currently only supports linux.  by default, it uses dladdr() to query symbol information, which is somewhat limited (in particular, it doesn\'t work for static functions.)  when libunwind is installed, gimpbacktrace uses it to get more complete symbol information.  libunwind is currently an optional dependency, but it might make sense to promote it to a mandatory, or opt-out, dependency, as it\'s lightweight and widely available.  on other platforms, the gimpbacktrace interface can still be used, but it always returns null backtraces.','gimpbacktrace-linux.c','406','70','591','0','false','true','false','2018-09-02 02:54:43-04:00'),('gimp','2_10_6','80bf686c9447f59bdc72cc9adb018ef1a0d83444','Ell','app: add gimpbacktrace  gimpbacktrace provides an interface for creating and traversing multi-threaded backtraces, as well as querying symbol information. while we already have some backtrace functionality, it relies on external tools for the most part, and as such is rather expensive, and is only meant for producing opaque backtraces.  gimpbacktrace, on the other hand, is meant to be relatively cheap (we\'re going to use it for profiling,) and allow inspection of the backtrace data. in the future, it might make sense to replace some, or all, of the other backtrace functions with gimpbacktrace.  gimpbacktrace currently only supports linux.  by default, it uses dladdr() to query symbol information, which is somewhat limited (in particular, it doesn\'t work for static functions.)  when libunwind is installed, gimpbacktrace uses it to get more complete symbol information.  libunwind is currently an optional dependency, but it might make sense to promote it to a mandatory, or opt-out, dependency, as it\'s lightweight and widely available.  on other platforms, the gimpbacktrace interface can still be used, but it always returns null backtraces.','gimpbacktrace-none.c','68','11','116','0','false','false','false','2018-09-02 02:54:43-04:00'),('gimp','2_10_6','422f6a55e4d478d667ef5dc4b05122a2d2abb7e4','Ell','app: more gimpbacktrace tidying  ... in preparation for the windows backend.','gimpbacktrace-none.c','71','12','9','6','false','false','false','2018-09-03 15:57:53-04:00'),('gimp','2_10_6','667efc221d4586bfbe07cf91a017735e72810200','Ell','app: add windows backend to gimpbacktrace  the windows backend produces full, multithreaded backtraces.  when drmingw is available, it also provides full symbol and (where available) source-location information.  otherwise, it provides symbol information for most of our libraries, but not for the gimp binary itself.','gimpbacktrace-backend.h','0','0','2','0','false','false','false','2018-09-03 15:57:53-04:00'),('gimp','2_10_6','667efc221d4586bfbe07cf91a017735e72810200','Ell','app: add windows backend to gimpbacktrace  the windows backend produces full, multithreaded backtraces.  when drmingw is available, it also provides full symbol and (where available) source-location information.  otherwise, it provides symbol information for most of our libraries, but not for the gimp binary itself.','gimpbacktrace-windows.c','421','68','627','0','false','false','false','2018-09-03 15:57:53-04:00'),('gimp','2_10_6','667efc221d4586bfbe07cf91a017735e72810200','Ell','app: add windows backend to gimpbacktrace  the windows backend produces full, multithreaded backtraces.  when drmingw is available, it also provides full symbol and (where available) source-location information.  otherwise, it provides symbol information for most of our libraries, but not for the gimp binary itself.','gimpbacktrace-windows.c','421','68','627','0','false','false','false','2018-09-03 15:57:53-04:00'),('gimp','2_10_6','78adb7c9008011161009153a56354198c0842661','Ell','app, tools: add \"running\" thread attribute to gimpbacktrace/performance-log  the \"running\" attribute (readable through gimp_backtrace_is_thread_running(), and recorded in the performance log) specifies if the thread was in a running or suspended state at the time the backtrace was taken.  it is accurate on linux, but only approximated on windows.  adapt the performance-log-expand.py tool to maintain this attribute (and any future thread attributes we might add).','gimpbacktrace-linux.c','442','76','44','1','false','false','false','2018-09-03 18:30:10-04:00'),('gimp','2_10_6','644234e99d18f9608e44c9a6338c73f3e4872168','Jehan','app: gimpbacktrace windows backend only available with dr. mingw.  (cherry picked from commit e7dde73f84925545c326f111913fa6b72c1a0825)','gimpbacktrace-backend.h','0','0','1','1','false','false','false','2018-09-05 15:16:32+02:00'),('gimp','2_10_6','b9f1ab8f53c41773384130ec6b30ae97204197ad','Ell','app: more cleanup in gimpbacktrace  improve out-of-range check in gimp_backtrace_find_thread_by_id().  remove unnecessary #include <exchndl.h> in gimpbacktrace-windows.c, and revert commit 644234e99d18f9608e44c9a6338c73f3e4872168 (the drmingw detection happens at runtime).  the windows backend can work without drmingw, it just can\'t find all the symbols, and doesn\'t provide source-location information.','gimpbacktrace-backend.h','0','0','1','1','false','false','false','2018-09-05 14:57:23-04:00'),('gimp','2_10_6','7cdd1ebeefcbc9e7f48fa4bdeee7ce9c2a7cb436','Ell','app: add source location information to the linux gimpbacktrace backend  when libbacktrace is available, use it to retrieve source location information in the linux gimpbacktrace backend.','gimpbacktrace-linux.c','472','84','105','54','false','false','false','2018-09-22 22:39:08-04:00'),('gimp','2_10_6','7cdd1ebeefcbc9e7f48fa4bdeee7ce9c2a7cb436','Ell','app: add source location information to the linux gimpbacktrace backend  when libbacktrace is available, use it to retrieve source location information in the linux gimpbacktrace backend.','gimpbacktrace-linux.c','472','84','105','54','false','false','false','2018-09-22 22:39:08-04:00'),('gimp','2_10_6','72fc01742bfe1f7e21a04e85184cd04851c9d53e','Ell','app: always use libunwind for symbol names in gimpbacktrace linux backend  in the gimpbacktrace linux backend, always use libunwind, when available, to find symbol names, even if dladdr() or libbacktrace had already found one.  libunwind provides more descriptive names in certain cases, and, in particular, full symbol names for c++ lambdas.  note that, in some cases, this can result in a discrepancy between the reported symbol name, and the corresponding source location.','gimpbacktrace-linux.c','472','85','9','0','false','false','false','2018-10-11 03:35:26-04:00'),('gimp','2_10_6','ac26671eb60877995d27acd547f45d06b0480e5f','Oleksii Samorukov','fix plugin focus issues on osx  gtk/osx does not automatically assign focus to the new windows (upstream issue), so activateignoringotherapps is called. however, if it is called before gtk initialized it may cause number of focus issues.  (cherry picked from commit 3adf4a4861ba0641e64caaf6fd80a794da7687a9)','gimpui.c','200','32','13','1','true','false','false','2018-10-18 14:07:03+02:00'),('gimp','2_10_6','bd48996933970a39f767a364f70316246aa639bc','Oleksii Samorukov','fix compilation on mac 10.6 and 10.7 (#2112)','gimpwidgets-utils.c','1332','194','1','1','true','false','false','2018-10-24 10:45:07+02:00'),('gimp','2_10_6','a29d040db52706d4e26f3b7955d5e1677528702e','Ell','app: a few improvements to the gimpbacktrace linux backend  blacklist the \"threaded-ml\" thread, which seems to mask the backtrace signal.  improve signal-handler synchronozation, to avoid segfaulting when giving up on waiting for all threads to handle the signal. furthermore, when one or more threads fail to handle the signal in time, return a gimpbacktrace instance with backtraces for all the other threads, and with empty backtraces for all the non-responding threads, instead of returning null and leaking the allocated instance.  don\'t blacklist threads that failed to handle the signal in time, and instead shorten the wait period for handling the signal, and yield execution during waiting to lower the cpu usage.','gimpbacktrace-linux.c','486','91','59','34','true','false','false','2018-11-07 14:26:17-05:00'),('gimp','2_10_8','8ed12b1b9830f8c1956b408f994be6c81bd8f21a','Jehan','app, libgimpbase: add gimp_select_criterion_line_art selection type.  this commit implements part of the research paper \"a fast and efficient semi-guided algorithm for flat coloring line-arts\" from the greyc (the people from g\'mic). it is meant to select regions from drawn sketchs in a \"smart\" way, in particular it tries to close non-perfectly closed regions, which is a common headache for digital painters and colorists.  the implementation is not finished as it needs some watersheding as well so that the selected area does not leave \"holes\" near stroke borders. the research paper proposes a new watersheding algorithm, but i may not have to implement it, as it is more focused on automatic colorization with prepared spots (instead of bucket fill-type interaction).  this will be used in particular with the fuzzy select and bucket fill tools.  note that this first version is a bit slow once we get to big images, but i hope to be able to optimize this. also no options from the algorithm are made available in the gui yet.','gimplineart.h','16','0','43','0','false','true','false','2018-11-14 13:37:42+01:00'),('gimp','2_10_8','2736cee5772723cb4fd70cb7d6881256c8f4ca99','Ell','app: remove gimp_parallel_distribute(); use gegl_parallel_distribute()  the parallel_distribute() family of functions has been migrated to gegl.  remove the gimp_parallel_distribute() functions from gimp-parallel, and replace all uses of these functions with the corresponding gegl_parallel_distrubte() functions.','gimp-parallel.h','100','3','0','66','false','false','false','2018-11-14 10:52:06-05:00'),('gimp','2_10_8','05a4437d9aaf73b040c3a9c1b13fcad1ec0b77f5','Ell','app: more gimp-parallel fixes  fix indentation in gimp-parallel.{cc,h}.  remove unused typedefs in gimp-parallel.h.  s/gimp/gegl/ in function-type cast in gimphistogram.c.','gimp-parallel.h','92','3','15','24','true','false','false','2018-11-14 11:01:43-05:00'),('gimp','2_10_8','7921b24a89630c00558d6812cd897549e594b93c','Oleksii Samorukov','tests: implement gimp_test_utils_synthesize_key_event on osx/quartz  (cherry picked from commit 9ae19eb8ec04adc28cdbe4045068a4f446ffa708)','gimp-app-test-utils.c','288','28','76','1','false','false','false','2018-11-23 23:07:20+01:00'),('gimp','2_10_8','28d376ae3e660939e49d59eaa66de4ac1b51ccf7','Oleksii Samorukov','tests: osx - activate gimp window when tests are running  if window is not focused gimp_test_utils_synthesize_key_event would fail.  (cherry picked from commit 63e86da6f3b696d448415c0c8c9bea83bdd68845)','tests.c','121','14','15','0','true','false','false','2018-11-23 23:20:20+01:00'),('gimp','2_10_8','01f940990260146a860f6956ebd962b45b0fc961','Ell','app: in gimpbacktrace linux backend, don\'t leak backtrace when dropping threads  should have been part of commit a29d040db52706d4e26f3b7955d5e1677528702e.','gimpbacktrace-linux.c','486','90','9','9','false','false','false','2018-12-01 04:33:45-05:00'),('gimp','2_10_8','7f9379cb3281efdcc3823e2c2dd7258a3a986641','Michael Natterer','issue #1297 - unhide the items hidden in the advanced drop-down file...  ...export dialogs  remove the \"advanced\" expander and have all options in plain sight.  issue #701: add a \"save color profile\" toggle and always honor it.','file-tiff-save.c','844','143','18','6','false','false','false','2018-12-03 19:41:56+01:00'),('gimp','2_10_8','74a7a5d3e2cbc1f070d548cc455bb68d9317964d','Jehan','issue #2495: different code for windows and linux on duplicate devices.  after discussing with mitch, it turn out commit 717c183a3e was fixing (or rather working around) actual issues of broken device/usb stack issues on linux, as expected. nevertheless on windows, this broke in turn many tablets (see commit ce24e16083). therefore we do a very ugly #ifdef to bail from duplicate devices on windows whereas we continue on linux. this fix and difference of behavior is completely empirical, rather than based on actual good logics, so that\'s quite annoying, but well… not much choice here.  also note that since we had no report of breakage on other oses (such as macos/bsd), at least that i know of, i let them with the linux code path.','gimpdeviceinfo.c','916','151','13','6','true','false','false','2018-12-11 16:05:41+01:00'),('gimp','2_10_8','e06c4643dcf555f2308bee70bf1991fa028b24b4','Ell','app: in warp tool, crop filter to stroke bounds  in the warp tool, set the drawable-filter\'s crop area to the combined stroke bounds, so that, when comitting the tool, only this area is processed, instead of the entire drawable area.','gimpwarptool.c','960','139','81','16','false','false','false','2018-12-30 05:13:02-05:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','dxt.c','1082','182','1412','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','dxt.c','1082','182','1412','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','dxt.c','1082','182','1412','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','endian.h','31','0','71','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','imath.h','16','3','67','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','imath.h','16','3','67','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','imath.h','16','3','67','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','mipmap.c','772','178','1013','0','false','true','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','vec.h','116','40','226','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','vec.h','116','40','226','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','vec.h','116','40','226','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','79bc2dc1effa820396e15e79f8ed56ffb0a85933','Alexandre Prokoudine','file-dds: add original source code of the dds plug-in  this is the code from the \'gimp-2.9\' branch of the plug-in, integrated into gimp\'s build system.','vec.h','116','40','226','0','false','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','8f49fad3dac9199efe1e5e9c6a66a128bb8c3dbe','Jehan','plug-ins: fix a few more warnings.  there are still a bunch of warnings, especially regarding usage of gtktable, gtkmisc and some unused functions.','mipmap.c','772','178','9','11','true','false','false','2019-01-02 18:33:46+01:00'),('gimp','2_10_8','9e82ace409a477cc29f6c66b14f00ffe4949f867','gaaned92','issue #2716 - windows: rawtherapee plugin cannot be installed  on windows, prevent rawtherapee from opening a console window','file-rawtherapee.c','369','34','5','0','false','false','false','2019-01-03 14:10:27+01:00'),('gimp','2_10_8','b505f3a5c05be5b6c3fd1e4f50be830ba9fc2e15','Michael Natterer','libgimp: make sure plug-ins follow the core\'s theme  add a gfilemonitor on \"theme.css\" and reload the theme when it changes, also update \"gtk-application-prefer-dark-theme\" in the same callback.','gimpui.c','219','33','48','29','false','false','false','2019-01-04 16:39:39+01:00'),('gimp','2_10_8','4110f7b7b186a609d9ca9882cf1f8a1e12b4169e','Ell','app: use gimpchunkiterator in gimp_gegl_apply_cached_operation()  in gimp_gegl_apply_cached_operation(), replace the use of geglprocessor with gimpchunkiterator, so that we use the same chunking logic as for rendering projections.  this has the advantage of better chunk alignment to the tile grid and dynamic chunk sizing, which improve performance.  use chunking even when there\'s no progress indication, since it generally results in better cache locality.','gimp-gegl-apply-operation.c','588','68','54','77','false','false','false','2019-01-12 04:53:00-05:00'),('gimp','2_10_8','fc8303dd0a0efab10409303519c5605437dff14e','Félix Piédallu','(source modifs) fix: rename macros as it conflicts with mingw headers. * datadir -> gimpdatadir * sysconfdir -> gimpsysconfdir * datadir -> sysdatadir (tools/)','gimpenv.c','565','102','3','9','true','false','false','2019-01-25 19:08:28+00:00'),('gimp','2_10_8','7a7ecda4f170b1fead91bcc53d014d47c563513e','Jehan','plug-ins: optionally define several float.h macros for mingw64.  this plug-in failed to cross-build because these macros were not defined in the `float.h` of my mingw64 environment (and they are used in some ilmbase headers). just define them ourselves if they are absent. i do this only on mingw environment because these should really be defined on linux (and other unix-like, i guess?) and if they are not, we may have a bigger issue.','openexr-wrapper.cc','385','65','12','0','false','false','false','2019-01-26 16:42:15+01:00'),('gimp','2_10_8','7a7ecda4f170b1fead91bcc53d014d47c563513e','Jehan','plug-ins: optionally define several float.h macros for mingw64.  this plug-in failed to cross-build because these macros were not defined in the `float.h` of my mingw64 environment (and they are used in some ilmbase headers). just define them ourselves if they are absent. i do this only on mingw environment because these should really be defined on linux (and other unix-like, i guess?) and if they are not, we may have a bigger issue.','openexr-wrapper.cc','385','65','12','0','false','false','false','2019-01-26 16:42:15+01:00'),('gimp','2_10_8','7a7ecda4f170b1fead91bcc53d014d47c563513e','Jehan','plug-ins: optionally define several float.h macros for mingw64.  this plug-in failed to cross-build because these macros were not defined in the `float.h` of my mingw64 environment (and they are used in some ilmbase headers). just define them ourselves if they are absent. i do this only on mingw environment because these should really be defined on linux (and other unix-like, i guess?) and if they are not, we may have a bigger issue.','openexr-wrapper.cc','385','65','12','0','false','false','false','2019-01-26 16:42:15+01:00'),('gimp','2_10_8','4d84c1d7ee5bdd2d9cf8bfb07455547856ae6b59','Jehan','app, libgimpbase: --enable-relocatable-bundle replaces --enable-binreloc  older --enable-binreloc configure option had basically the same purpose as the newer --enable-relocatable-bundle, though the old binreloc was only used for gimpenv.c code. as a consequence, commit 10ce702188 was still not working fine since gimp_installation_directory_file() also need binreloc enabled (to be actually relocatable).  let\'s get rid of this whole mess, by implying we want binreloc code to be used when --enable-relocatable-bundle is on. we don\'t need the m4macros anymore, since am_binreloc was basically just checking that `/proc/self/maps` was present. but anyway being present at compile time does not mean it will be at runtime (nor the opposite). so this test is not that useful. the binreloc code will anyway fallback gracefully to the non-binreloc code (i.e. trying to use build-time install paths) if the procfs is lacking at runtime.','gimpreloc.c','247','60','6','6','false','false','false','2019-02-05 14:50:31+01:00'),('gimp','2_10_8','4d84c1d7ee5bdd2d9cf8bfb07455547856ae6b59','Jehan','app, libgimpbase: --enable-relocatable-bundle replaces --enable-binreloc  older --enable-binreloc configure option had basically the same purpose as the newer --enable-relocatable-bundle, though the old binreloc was only used for gimpenv.c code. as a consequence, commit 10ce702188 was still not working fine since gimp_installation_directory_file() also need binreloc enabled (to be actually relocatable).  let\'s get rid of this whole mess, by implying we want binreloc code to be used when --enable-relocatable-bundle is on. we don\'t need the m4macros anymore, since am_binreloc was basically just checking that `/proc/self/maps` was present. but anyway being present at compile time does not mean it will be at runtime (nor the opposite). so this test is not that useful. the binreloc code will anyway fallback gracefully to the non-binreloc code (i.e. trying to use build-time install paths) if the procfs is lacking at runtime.','gimpreloc.c','247','60','6','6','false','false','false','2019-02-05 14:50:31+01:00'),('gimp','2_10_8','8ef1113dee378e66182e13dcf924b32b7dd816c4','Ell','issue #2372 - reduced quality of the parametric brush in 2.10  promote the precision of generated brushes to 32-bit float, and modify brush preview generation, and gimpbrushcore-loops, to handle float brushes.  this avoids posterization in large brushes.  note that non-generated brushes are still uint8.','gimpbrushcore-kernels.h','80','4','93','33','false','false','false','2019-02-06 14:30:48-05:00'),('gimp','2_10_8','8ef1113dee378e66182e13dcf924b32b7dd816c4','Ell','issue #2372 - reduced quality of the parametric brush in 2.10  promote the precision of generated brushes to 32-bit float, and modify brush preview generation, and gimpbrushcore-loops, to handle float brushes.  this avoids posterization in large brushes.  note that non-generated brushes are still uint8.','gimpbrushcore-loops.cc','448','68','363','191','false','false','false','2019-02-06 14:30:48-05:00'),('gimp','2_10_8','9d19e804edea2e6d116f220868e8a5b836cc5ab2','Ell','app: avoid unnecessary calls to gimp_temp_buf_data_clear()  avoid unnecessary calls to gimp_temp_buf_data_clear() in various places, where either the entire buffer is being written to, or most of it is, only requiring clearing the edges.','gimpbrushcore-loops.cc','487','73','63','14','false','false','false','2019-02-06 16:51:01-05:00'),('gimp','2_10_8','b5a34c3190d62294dc0316c93251baa807b26c9e','Ell','plug-ins: in file-dds, rename endian.h to endian_rw.h ...  ... to avoid clashing with the system <endian.h>  thanks andrea!','endian_rw.h','31','0','2','2','false','false','false','2019-02-17 13:35:16-05:00'),('gimp','2_10_8','b5a34c3190d62294dc0316c93251baa807b26c9e','Ell','plug-ins: in file-dds, rename endian.h to endian_rw.h ...  ... to avoid clashing with the system <endian.h>  thanks andrea!','endian_rw.h','31','0','2','2','false','false','false','2019-02-17 13:35:16-05:00'),('gimp','2_10_8','e8a39d5c49a01d128f4237100845eda7523255f0','Ell','app: properly implement \"spacing\" option in the warp tool  the \"spacing\" option of the warp tool used to be handled by the gegl:warp op, and have little effect.  instead, implement it in the warp tool directly, having the same effect as the other paint tools.  having a properly-working \"spacing\" option allows us to use exact motion mode without cirppling down performance, which means that the stroke now follows the pointer exactly, even when processing takes a while.  decrease the default \"spacing\" value to 10.','gimpwarptool.c','1011','146','93','46','false','false','false','2019-03-03 16:21:57-05:00'),('gimp','2_10_8','fa2e4dcce0bd5e27022b18ceb9f49b2cec2e9fec','Ell','app: add gimp_parallel_run_async_independent_full()  ... which is equivalent to gimp_parallel_run_async_independent(), except that it takes an additional \"priority\" parameter, which specifies the task\'s priority, with 0 being the default priority, and lower values indicating higher priority.  unlike gimp_parallel_run_async_full(), the priority parameter doesn\'t directly control the task\'s priority in a queue, but rather, we use it to control the priority of the task\'s dedicated thread, on supported platforms (previously, all independent async tasks would run with low priority.)  use low priority when loading fonts, which can take a long time, to keep the existing behavior.','gimp-parallel.h','103','4','34','22','false','false','false','2019-03-06 00:01:59-05:00'),('gimp','2_10_8','033082dd9a0850a86c1b0b76187afd4725df4e9f','Ell','issue #3025 - \"file/new\" doesn\'t honor \"precision\" choice ...  ... for \"edit/preferences/default image\"  in gimptemplateeditor, don\'t use gimp_prop_enum_combo_box_new() for the \"precision\" combo-box, and rather synchronize the combo-box and the template manually, since we only want to update the \"gamma\" combo-box according to the precision when it changes through the ui, and not when the template\'s precision otherwise changes.  this fixes an issue where we\'d always set the default gamma value when resetting the editor\'s template, overwriting the template\'s original gamma value.','gimptemplateeditor.c','641','43','41','6','true','false','false','2019-03-31 15:08:05-04:00'),('gimp','2_10_10','7584969453ae39a79905f61930ef7a432319fe07','Tobias Ellinghaus','plug-ins: add layer support to tiff writing','file-tiff-save.c','1012','171','339','127','false','false','false','2019-04-16 10:04:16+02:00'),('gimp','2_10_10','88f97aedef56d2158ec37619598db77e84ca02ed','Jehan','issue 2949: newly installed fonts not registering.  apparently microsoft added just recently the feature to install user font (as opposed to system-wide fonts), without administration rights (yes, only now, how crazy is that?). right now gimp does not see fonts there.  we have an upstream report at fontconfig where such a default search path should happen. see: https://gitlab.freedesktop.org/fontconfig/fontconfig/issues/144 until it gets fixed there, let\'s just add the user fonts dir ourselves in gimp. this code should get killed later.  notes: - i renamed various default_* data macros to gimp_default_* because default_palette was conflicting with another macro in windows api! - also i removed the datadir macro set under app/config/ because it is also conflicting and anyway we use it in no files on this level. - this is not perfectly tested on windows. please everyone with windows access, could you build and test if it works fine before release?','gimpcoreconfig.c','1147','147','86','18','true','false','false','2019-04-28 22:38:26+09:00'),('gimp','2_10_10','88f97aedef56d2158ec37619598db77e84ca02ed','Jehan','issue 2949: newly installed fonts not registering.  apparently microsoft added just recently the feature to install user font (as opposed to system-wide fonts), without administration rights (yes, only now, how crazy is that?). right now gimp does not see fonts there.  we have an upstream report at fontconfig where such a default search path should happen. see: https://gitlab.freedesktop.org/fontconfig/fontconfig/issues/144 until it gets fixed there, let\'s just add the user fonts dir ourselves in gimp. this code should get killed later.  notes: - i renamed various default_* data macros to gimp_default_* because default_palette was conflicting with another macro in windows api! - also i removed the datadir macro set under app/config/ because it is also conflicting and anyway we use it in no files on this level. - this is not perfectly tested on windows. please everyone with windows access, could you build and test if it works fine before release?','gimpcoreconfig.c','1147','147','86','18','true','false','false','2019-04-28 22:38:26+09:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','dxt.c','1189','182','960','850','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','dxt.c','1189','182','960','850','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','dxt.c','1189','182','960','850','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','endian_rw.h','0','0','69','71','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','imath.h','26','3','43','33','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','imath.h','26','3','43','33','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','mipmap.c','881','178','808','687','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','vec.h','137','40','126','107','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','vec.h','137','40','126','107','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','2a48a5f8681e12bb280607bcafaa1eb8a77e9a73','Michael Natterer','plug-ins: big formatting and indentation cleanup in file-dds  also change the license to gpl 3 or later, like all other files.','vec.h','137','40','126','107','false','false','false','2019-05-23 14:34:00+02:00'),('gimp','2_10_10','5b1f8cb4d060eead34a8136ab64e577eb7a866a3','fanjinke','libgimpbase: add hygon cpu detection and enable mmx/sse support  signed-off-by: fanjinke <fanjinke@hygon.cn>','gimpcpuaccel.c','304','76','6','0','false','false','false','2019-05-26 00:19:28+02:00'),('gimp','2_10_10','cf37d1ae562cf03377f44a14bfe06c746f4f9ddb','Jehan','plug-ins: follow the assigned profile trc in png export.  similar to jpeg export (commit c5f7bac2ba2121636bbf84d5e4af4d11e98fa511) as discussed with ell. gimp should follow and save as-is any *assigned* profile. we only make a decision about whether to convert from storage precision to another format when the profile is the default gimp one.  picked from commit 72c5d24fe91956a5572151ec036f5ad2d5f63cdc. some changes may have to happen later on the master code as the space invasion changes a bit how default profiles are handled.','file-png.c','1868','256','44','38','false','false','false','2019-05-26 14:17:41+02:00'),('gimp','2_10_10','3b56bd7a9aa7c9210bd469f688f021b835c11983','Ell','app: add symmetry-transform support to the ink tool  in gimpink, apply the current symmetry transform, as per gimp_symmetry_get_transform(), to rendered blobs.','gimpink.c','580','75','35','9','false','true','false','2019-05-26 14:45:40-04:00'),('gimp','2_10_10','39e1a6dfeae72900f0a8bf47fbcc6de1d31e9356','Ell','app: fix ink tool symmetry transform  ... to take tilt into account.','gimpink.c','584','75','17','15','true','false','false','2019-05-27 02:16:30-04:00'),('gimp','2_10_10','8d9e70011d493e82632e9b1195872274ed4bfdec','Jehan','plug-ins: improve decision of exported data format in tiff export.  same as we did for png and jpeg, we want to always export data with the trc of a profile manually assigned, and in particular not the curve of the storage in gimp (i.e. you may work on 32-bit linear, yet if you assigned a srgb trc profile, this is what you should export). the storage format will only dictate the exported data trc when writing out the default profile (i.e. no explicit profile assignement). as a last case, when no profile is saved, we always export as srgb.  as for the export precision, we always follow the storage one\'s, except sometimes for 8-bit images. we promote 8-bit images to 16-bit if and only if the storage does not match the export data linearity, to avoid too much quality loss during format conversion.','file-tiff-save.c','991','166','33','56','false','false','false','2019-06-06 12:48:38+02:00'),('gimp','2_10_10','24ed5870ade6e76ec828a752cf6b2a6d6c043f28','Jehan','plug-ins: png export trc chosen similarly to tiff.  while we tend to default to srgb for 8-bit max formats (such as jpeg or webp) when no explicitly-assigned profile was set, there is no need to do so for png too. indeed since we have the ability to export 16-bit png, let\'s consider this is ok to export 16-bit linear data when writing gimp\'s default linear profile.  moreover let\'s follow the profile\'s (fallback to storage\'s) trc also when exporting to a specific precision (as chosen manually in the dialog), not only when sticking to \"automatic\", unless we are downsizing a high bit depth work image to 8-bit without a manually assigned profile (the only case we forcefully export as srgb data, hence convert the profile if linear storage).','file-png.c','1906','269','73','28','false','false','false','2019-06-07 18:49:18+02:00'),('gimp','2_10_10','a9b36245c9e976557e9d6ff29d74aac325a89273','Michael Natterer','tools: fix windows file handling in gimp-test-clipboard.c  use g_open() for proper filename encoding and _o_binary to avoid line ending conversions.','gimp-test-clipboard.c','356','47','6','1','true','false','false','2019-06-11 19:32:28+02:00'),('gimp','2_10_12','62f010df909f585c7bb19da695b35bf2f29ddb73','Michael Natterer','configure.ac, plug-ins: make file-heif build with older libheif again  lower requirement to 1.3.2 and check for 1.4.0 separately. put color profile code in #ifdef have_libheif_1_4_0.','file-heif.c','893','92','5','0','false','false','false','2019-06-25 13:20:07+02:00'),('gimp','2_10_12','b07975aa880e774f7c979169170fc54d66c45f5f','Michael Natterer','plug-ins: cleanup, copyright headers, formatting in the openexr-wrapper','openexr-wrapper.cc','392','65','28','4','false','false','false','2019-06-26 16:56:12+02:00'),('gimp','2_10_12','b07975aa880e774f7c979169170fc54d66c45f5f','Michael Natterer','plug-ins: cleanup, copyright headers, formatting in the openexr-wrapper','openexr-wrapper.h','32','0','43','52','false','false','false','2019-06-26 16:56:12+02:00'),('gimp','2_10_12','61013c392c263722df287497bc8fe82820cb3c90','Michael Natterer','libgimpbase: remove gimpdatafiles.[ch], it\'s deprecated and now unused','gimpdatafiles.c','None','None','0','225','false','false','false','2019-06-28 12:02:31+02:00'),('gimp','2_10_12','c1f29732329cddef57e2451619c6e393e7c10a1e','Michael Natterer','plug-ins: port film to gegl','film.c','981','86','25','88','false','false','false','2019-06-28 18:40:41+02:00'),('gimp','2_10_12','5d6baf5f85fc62cf1f577a505beaad27a11b6c19','Jehan','plug-ins: implement our profile export policy for heif.  same as webp or jpeg: follow explicitly assigned profile trc; convert default (non-assigned) profile to srgb, except if work format is 8-bit linear.','file-heif.c','936','102','57','20','false','false','false','2019-07-01 15:36:59+02:00'),('gimp','2_10_12','dfd79ad79bc785dcf92b6241ce81da91031a19ea','Jehan','plug-ins: add a \"save color profile\" checkbox in heif export.','file-heif.c','961','104','72','44','false','false','false','2019-07-01 16:39:13+02:00'),('gimp','2_10_12','7f764300902f761ebc35e8f7a68fffb3e33c5dbd','Jehan','plug-ins: improve a bit heif export dialog.  - add the quality slider in a frame under the \"lossless\" checkbox,   making the relationship more obvious. - make the whole frame contents insensitive when \"lossless\" is checked   and not just the slider. once again, it makes the relationship more   obvious. - add a mnemonic to the \"lossless\" checkbox and \"quality\" slider.','file-heif.c','965','104','12','7','false','false','false','2019-07-01 16:57:22+02:00'),('gimp','2_10_12','86e07c16b5306c3459026386c3d62e6d3456e958','Michael Natterer','app: start porting away from gtkaction and friends  step one: get rid of all those deprecation warnings that make it hard to see any other warnings:  - add a lot of dummy api to gimpaction, gimpactiongroup, gimpuimanager   etc. which simply forwards to the deprecated gtk functions, they   will all go away again later - rename gimpaction to gimpactionimpl - add interface gimpaction that is implemented by all action classes,   creates a common interface and allows to remove some duplicated   logic from gimptoggleaction and gimpradioaction, and at the same   time adds more features','gimpimagewindow.c','1691','235','3','4','false','false','false','2019-07-02 14:21:32+02:00'),('gimp','2_10_12','738c035839369cb3ad44939b33851df71ef269c6','Michael Natterer','plug-ins: fix two harmless compiler warnings','file-heif.c','964','105','2','0','true','false','false','2019-07-02 15:22:52+02:00'),('gimp','2_10_12','8ac6ec2a00dd43fe30b43313327e5c2d8d6b76a3','Michael Natterer','plug-ins: a ton of cleanup in curve-bend  - move use of deprecated function to very few places - indentation, formatting - fix insane variable names, it\'s now much more readable','curve-bend.c','2506','294','859','796','true','false','false','2019-07-08 21:05:49+02:00'),('gimp','2_10_12','529ee9efc8e29d5afc1f71da34dea7a53e0b0de4','Michael Natterer','plug-ins, pdb: remove the cartoon plug-in and add a pdb compat procedure  the result of the gegl op is a bitt different but so what, this is an artistic effect and the result can be tweaked with parameters.','cartoon.c','None','None','0','895','false','false','false','2019-07-11 11:41:06+02:00'),('gimp','2_10_12','ceb327f357708673897b71dde5f928e73d931ffc','Michael Natterer','plug-ins, pdb: remove the photocopy plug-in and add a pdb compat procedure  the results are different here too, but tweakable like for cartoon.','photocopy.c','None','None','0','945','false','false','false','2019-07-11 12:33:56+02:00'),('gimp','2_10_12','2045fdd2a3356ae7465a0c348ad1d07f2186de2a','Jehan','app: don\'t abandon immediately xcf loading at first layer load failure.  if the problem occurs at one of the first layer, we may end up loading nearly nothing even though there may be a whole lot of other data in good state. so instead keep track of the number of failed layer and channel loading to still display an error popup at the end, because we still need to alert the user something went wrong. yet damages are limited.  also make sure that layer paths are fixed when some layers could not be loaded, hence stored paths end up wrong.','xcf-load.c','2221','409','215','5','true','false','false','2019-07-11 16:13:18+02:00'),('gimp','2_10_12','12bed7be5bab5f733daff7f79210ae9f35858879','Michael Natterer','plug-ins: port twain to gegl, 8-bit port only  this has only be tested to build, somebody please test if it actually works.','twain.c','546','66','407','347','false','false','false','2019-07-13 12:52:36+02:00'),('gimp','2_10_12','12bed7be5bab5f733daff7f79210ae9f35858879','Michael Natterer','plug-ins: port twain to gegl, 8-bit port only  this has only be tested to build, somebody please test if it actually works.','twain.c','546','66','407','347','false','false','false','2019-07-13 12:52:36+02:00'),('gimp','2_10_12','2ead56096d9813f710f4fb545e1b70502affe53b','Michael Natterer','plug-ins, pdb: remove the softglow plug-in and add a pdb compat procedure  not for 2.10 because the gegl op\'s result looks different. i have no clue how softglow is supposed to look at all, but the removed plug-in did things that can\'t possibly be done with physical light in a darkroom, so chances are the gegl op is more correct.','softglow.c','None','None','0','723','false','false','false','2019-07-14 21:34:27+02:00'),('gimp','2_10_12','9aa6aa1f040e6476a1e047b09d6c0403cdb8f344','Michael Natterer','app: make display update much faster again  introduce a render cache that keeps the result of scaling, color management, display filters and shell mask (for tools like fuzzy select).  change gimpdisplayshell-render.[ch] to only render to the cache and manage a cairo region of the cache\'s valid area. call cache invalidation functions form various places. change the api of all render functions to be in display coordinates.  also get rid of gimpdisplayxfer.[ch] because we now have a canvas-sized cairo surface which is a surface similar to the destination surface.','gimpdisplayshell-draw.c','159','17','19','34','false','false','false','2019-07-16 17:15:34+02:00'),('gimp','2_10_12','9aa6aa1f040e6476a1e047b09d6c0403cdb8f344','Michael Natterer','app: make display update much faster again  introduce a render cache that keeps the result of scaling, color management, display filters and shell mask (for tools like fuzzy select).  change gimpdisplayshell-render.[ch] to only render to the cache and manage a cairo region of the cache\'s valid area. call cache invalidation functions form various places. change the api of all render functions to be in display coordinates.  also get rid of gimpdisplayxfer.[ch] because we now have a canvas-sized cairo surface which is a surface similar to the destination surface.','gimpdisplayshell-render.c','330','36','193','65','false','true','false','2019-07-16 17:15:34+02:00'),('gimp','2_10_12','9aa6aa1f040e6476a1e047b09d6c0403cdb8f344','Michael Natterer','app: make display update much faster again  introduce a render cache that keeps the result of scaling, color management, display filters and shell mask (for tools like fuzzy select).  change gimpdisplayshell-render.[ch] to only render to the cache and manage a cairo region of the cache\'s valid area. call cache invalidation functions form various places. change the api of all render functions to be in display coordinates.  also get rid of gimpdisplayxfer.[ch] because we now have a canvas-sized cairo surface which is a surface similar to the destination surface.','gimpdisplayshell-render.c','330','36','193','65','false','true','false','2019-07-16 17:15:34+02:00'),('gimp','2_10_12','85cf3630c2c7d744bc33f2f58caca2bbaa6e6c38','Øyvind Kolås','app: make use of display_config->zoom_quality  when set to fast we do nearest neighbor from the next bigger mipmap level instead of linear or box filtering - this gives a slight and permanent boost to painting, and all updates, having one that combines best of both worlds and reblits in high quality after a timeout would be even more desirable.','gimpdisplayshell-render.c','337','37','29','19','false','false','false','2019-07-16 19:03:06+02:00'),('gimp','2_10_12','31fc338ab0f57c26af5e8be93b519d8b25ff0b66','Michael Natterer','pdb, plug-ins: remove the newsprint plug-in and add a pdb compat procedure','newsprint.c','None','None','0','2072','false','false','false','2019-07-18 12:52:18+02:00'),('gimp','2_10_12','31fc338ab0f57c26af5e8be93b519d8b25ff0b66','Michael Natterer','pdb, plug-ins: remove the newsprint plug-in and add a pdb compat procedure','newsprint.c','None','None','0','2072','false','false','false','2019-07-18 12:52:18+02:00'),('gimp','2_10_12','f2d399b17b5dfc9c0a87673bd3d5fa5c426f0dcf','Michael Natterer','libgimp: add initial version of a gimpplugin class  the new way of doing plug-ins:  - subclass gimpplugin in your plug-in - implement its query() and run() methods, run() will move to a   new gimpprocedure class soon - instead of main(), say gimp_main(your_plug_in_type)  instead of keeping around a gimpplugininfo struct, libgimp will create an instance of your plug-in class, keep it around during the plug-in\'s lifetime, and call its virtual functions.','gimp.h','165','0','85','6','false','false','false','2019-07-25 23:07:24+02:00'),('gimp','2_10_12','f2d399b17b5dfc9c0a87673bd3d5fa5c426f0dcf','Michael Natterer','libgimp: add initial version of a gimpplugin class  the new way of doing plug-ins:  - subclass gimpplugin in your plug-in - implement its query() and run() methods, run() will move to a   new gimpprocedure class soon - instead of main(), say gimp_main(your_plug_in_type)  instead of keeping around a gimpplugininfo struct, libgimp will create an instance of your plug-in class, keep it around during the plug-in\'s lifetime, and call its virtual functions.','gimp.h','165','0','85','6','false','false','false','2019-07-25 23:07:24+02:00'),('gimp','2_10_12','f2d399b17b5dfc9c0a87673bd3d5fa5c426f0dcf','Michael Natterer','libgimp: add initial version of a gimpplugin class  the new way of doing plug-ins:  - subclass gimpplugin in your plug-in - implement its query() and run() methods, run() will move to a   new gimpprocedure class soon - instead of main(), say gimp_main(your_plug_in_type)  instead of keeping around a gimpplugininfo struct, libgimp will create an instance of your plug-in class, keep it around during the plug-in\'s lifetime, and call its virtual functions.','gimp.h','165','0','85','6','false','false','false','2019-07-25 23:07:24+02:00'),('gimp','2_10_12','0a6f157d58db6b85132a7cf42ed3f9ad970bc0d4','Michael Natterer','app, libgimp, libgimpbase: big plug-in api refactoring part three  - libgimpbase: change gpparam to transfer all information about the   gvalues we use, in the same way done for gpparamdef. gpparam is now   different from gimpparam from libgimp, pointers can\'t be casted any   longer. the protocol is now completely gimppdbargtype-free. remove   gp_params_destroy() from the public api.  - libgimp: add api to convert between an array of gpparams and   gimpvaluearray, the latter is now the new official api for dealing   with procedure arguments and return values, gimpparam is cruft (the   wire now talks with gimpplugin more directly than with the members   of gimpplugininfo, which need additional compat conversions).  - libgimp, app: rename gimpgpparamspecs.[ch] to simply   gimpgpparams.[ch] which is also more accurate because they now   contain gvalue functions too. the code that used to live in   app/plug-in/plug-in-params.h is now completely in libgimp.  - app: contains no protocol compat code any longer, the only place   that uses gimppdbargtype is the pdb query procedure implementation,   which also needs to change.  - app: change some forgotten int32 run-modes to enums.','gimp.c','1780','349','222','71','false','false','true','2019-07-29 12:22:58+02:00'),('gimp','2_10_12','46cacb5ebd6ad794ba360027ff8d79fab4380dbb','Michael Natterer','plug-ins: help: use new api to call the help browser','help.c','300','30','9','7','false','false','false','2019-07-30 21:16:07+02:00'),('gimp','2_10_12','7b7c5187822e45962241e4bec01c6bef5bfdd604','Michael Natterer','libgimp: move the old plug-in and procedure api to gimplegacy.h  the implementations are still in gimp.c.','gimp.h','61','0','1','265','false','false','false','2019-07-30 21:36:32+02:00'),('gimp','2_10_12','7b7c5187822e45962241e4bec01c6bef5bfdd604','Michael Natterer','libgimp: move the old plug-in and procedure api to gimplegacy.h  the implementations are still in gimp.c.','gimp.h','61','0','1','265','false','false','false','2019-07-30 21:36:32+02:00'),('gimp','2_10_12','7b7c5187822e45962241e4bec01c6bef5bfdd604','Michael Natterer','libgimp: move the old plug-in and procedure api to gimplegacy.h  the implementations are still in gimp.c.','gimp.h','61','0','1','265','false','false','false','2019-07-30 21:36:32+02:00'),('gimp','2_10_12','7b7c5187822e45962241e4bec01c6bef5bfdd604','Michael Natterer','libgimp: move the old plug-in and procedure api to gimplegacy.h  the implementations are still in gimp.c.','gimplegacy.h','111','0','294','0','false','false','false','2019-07-30 21:36:32+02:00'),('gimp','2_10_12','7b7c5187822e45962241e4bec01c6bef5bfdd604','Michael Natterer','libgimp: move the old plug-in and procedure api to gimplegacy.h  the implementations are still in gimp.c.','gimplegacy.h','111','0','294','0','false','false','false','2019-07-30 21:36:32+02:00'),('gimp','2_10_12','7b7c5187822e45962241e4bec01c6bef5bfdd604','Michael Natterer','libgimp: move the old plug-in and procedure api to gimplegacy.h  the implementations are still in gimp.c.','gimplegacy.h','111','0','294','0','false','false','false','2019-07-30 21:36:32+02:00'),('gimp','2_10_12','7201be78d9749340c3b2db2d536a3789b08fbc00','Michael Natterer','libgimp: add gimp-private.h for private stuff shared between files  instead of declaring stuff n time in various files. this also removes gimp_read_expect_msg() as public symbol from libgimp.','gimp.c','1299','224','31','33','false','true','false','2019-07-30 23:49:54+02:00'),('gimp','2_10_12','7201be78d9749340c3b2db2d536a3789b08fbc00','Michael Natterer','libgimp: add gimp-private.h for private stuff shared between files  instead of declaring stuff n time in various files. this also removes gimp_read_expect_msg() as public symbol from libgimp.','gimp.c','1299','224','31','33','false','true','false','2019-07-30 23:49:54+02:00'),('gimp','2_10_12','63695b4b21418e338e7004fb979c0c294af920dc','Michael Natterer','libgimbase: merge gimpparam.h into gimpparamspecs.h  which means that it\'s now included normally via gimpbase.h and not any longer via gimpbasetypes.h which we only did out of lazyness. a *lot* of files in libgimp* and app/ now need to','gimpthumbnail.c','888','151','1','1','false','false','false','2019-07-31 10:16:21+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimp.c','1131','182','4','245','false','true','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimp.c','1131','182','4','245','false','true','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimp.c','1131','182','4','245','false','true','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimplegacy.c','728','174','259','0','false','false','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimplegacy.c','728','174','259','0','false','false','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimplegacy.h','125','0','12','0','false','false','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','5f8d0ef27b95ffb9b7bb41a47e7496bdcf7fa918','Michael Natterer','libgimp: add gimp_plug_in_extension_enable() and _extension_process()  start copying all the actual wire communication to gimpplugin, and move the legacy versions to gimplegacy.c.  this implies having the entire protocol code twice, but without any if(plug_in) { plug_in_stuff(); } else { legacy_stuff(); }  at the moment it is a wild mixture of old and new, but when finished the wire code in gimplegacy.c will be entirely separate from the wire code in gimpplugin, which will make it easy to g_assert() that only one api is used by a plug-in.','gimpplugin.c','203','29','137','3','false','false','false','2019-08-02 12:02:20+02:00'),('gimp','2_10_12','856fe160708aa1b19d6ee10e5c712460d8efff04','Michael Natterer','libgimp: add _gimp_plug_in_run() and copy the main plug-in loop to gimpplugin  move the legacy loop code to gimplegacy.c. also remove some more stuff from gimp.c, old and new are now completely separate apart from one glitch which wll go next...','gimplegacy.c','800','191','124','32','false','true','false','2019-08-02 17:05:51+02:00'),('gimp','2_10_12','9549be25394c2b63d820bb35b4f6feee9dbe1f18','Michael Natterer','libgimp: kill the plug-in when old api is used while a gimpplugin exists','gimplegacy.c','689','168','36','0','false','false','false','2019-08-03 18:20:28+02:00'),('gimp','2_10_12','ca1cb056fc8dc2b30e29c6448a38258b6f8d5f07','Michael Natterer','libgimp: move the shm code to new private files gimp-shm.[ch]  and remove it from the public api, it should have never been there in the first place.','gimp.c','961','145','5','165','false','true','false','2019-08-04 18:54:00+02:00'),('gimp','2_10_12','ca1cb056fc8dc2b30e29c6448a38258b6f8d5f07','Michael Natterer','libgimp: move the shm code to new private files gimp-shm.[ch]  and remove it from the public api, it should have never been there in the first place.','gimp.c','961','145','5','165','false','true','false','2019-08-04 18:54:00+02:00'),('gimp','2_10_12','1c317a739ba8755382cac9455dd23b0d7bcd2332','Michael Natterer','libgimp: forgot to actually add gimp-shm.[ch]','gimp-shm.c','85','20','196','0','false','false','false','2019-08-04 20:18:10+02:00'),('gimp','2_10_12','1c317a739ba8755382cac9455dd23b0d7bcd2332','Michael Natterer','libgimp: forgot to actually add gimp-shm.[ch]','gimp-shm.c','85','20','196','0','false','false','false','2019-08-04 20:18:10+02:00'),('gimp','2_10_12','1c317a739ba8755382cac9455dd23b0d7bcd2332','Michael Natterer','libgimp: forgot to actually add gimp-shm.[ch]','gimp-shm.c','85','20','196','0','false','false','false','2019-08-04 20:18:10+02:00'),('gimp','2_10_12','a74f4de81ec0176a4344a465ee9733abb59bf7d4','Michael Natterer','libgimp: some random minor cleanups','gimp.c','959','145','1','1','false','false','false','2019-08-04 23:02:42+02:00'),('gimp','2_10_12','8c1a43dff79ef08b49f003f739da9019dfd31dc9','Michael Natterer','libgimp: move the debug code to new private files gimp-debug.[ch]','gimp-debug.c','104','13','175','0','false','false','false','2019-08-04 23:26:31+02:00'),('gimp','2_10_12','8c1a43dff79ef08b49f003f739da9019dfd31dc9','Michael Natterer','libgimp: move the debug code to new private files gimp-debug.[ch]','gimp-debug.c','104','13','175','0','false','false','false','2019-08-04 23:26:31+02:00'),('gimp','2_10_12','8c1a43dff79ef08b49f003f739da9019dfd31dc9','Michael Natterer','libgimp: move the debug code to new private files gimp-debug.[ch]','gimp-debug.c','104','13','175','0','false','false','false','2019-08-04 23:26:31+02:00'),('gimp','2_10_12','8c1a43dff79ef08b49f003f739da9019dfd31dc9','Michael Natterer','libgimp: move the debug code to new private files gimp-debug.[ch]','gimp-debug.c','104','13','175','0','false','false','false','2019-08-04 23:26:31+02:00'),('gimp','2_10_12','8c1a43dff79ef08b49f003f739da9019dfd31dc9','Michael Natterer','libgimp: move the debug code to new private files gimp-debug.[ch]','gimp.c','864','134','14','134','false','false','false','2019-08-04 23:26:31+02:00'),('gimp','2_10_12','8c1a43dff79ef08b49f003f739da9019dfd31dc9','Michael Natterer','libgimp: move the debug code to new private files gimp-debug.[ch]','gimp.c','864','134','14','134','false','false','false','2019-08-04 23:26:31+02:00'),('gimp','2_10_12','d5fbbf3f496c3665611ef53553ee9439030364c6','Michael Natterer','libgimp: #include <sys/types.h> in gimp-debug.c','gimp-debug.c','105','13','2','0','false','false','false','2019-08-05 16:00:02+02:00'),('gimp','2_10_12','05baadcd1d3eef3adc77cad75c34f795fcd124cf','Michael Natterer','pdb: rename the \"procedural_db\" pdb group to just \"pdb\"','scheme-wrapper.c','1267','249','11','11','false','true','false','2019-08-06 12:51:56+02:00'),('gimp','2_10_12','caa61eef4f72ae623ce7b1d3a215257e5ca30110','Michael Natterer','libgimp, pdb: remove gimp_run_procedure_with_array() from gimp.[ch]  and add it to gimplegacy.[ch] as gimp_run_procedure_array(). regenerate all pdb wrapper accordingly.','help.c','288','30','4','8','false','false','false','2019-08-06 21:44:26+02:00'),('gimp','2_10_12','3c001a6123b54240f2cc85a2b0bc91ee88a696db','Michael Natterer','libgimp: separate legacy from gimpplugin wire communication  move all old wire code to gimplegacy.c and add wire code to gimpplugin, which now talks with the gimp core all by itself.  add some more assert_no_plug_in_exists assertions to gimplegacy.c and fix new code that was still using legacy api.','gimp.c','743','121','21','140','true','true','false','2019-08-06 22:21:50+02:00'),('gimp','2_10_12','cc5e9240d2e592bffeda44e8a5a45339e3a9ae58','Michael Natterer','libgmp: move the remaining legacy code to gimplegacy, even plug_in_info  add gimplegacy-private.h to keep it separate from gimp-private.h.  the legacy code could now be removed and gimpplugin-ported plug-ins would not notice.','gimp.c','710','116','75','114','false','false','false','2019-08-06 23:06:15+02:00'),('gimp','2_10_12','cc5e9240d2e592bffeda44e8a5a45339e3a9ae58','Michael Natterer','libgmp: move the remaining legacy code to gimplegacy, even plug_in_info  add gimplegacy-private.h to keep it separate from gimp-private.h.  the legacy code could now be removed and gimpplugin-ported plug-ins would not notice.','gimp.c','710','116','75','114','false','false','false','2019-08-06 23:06:15+02:00'),('gimp','2_10_12','cc5e9240d2e592bffeda44e8a5a45339e3a9ae58','Michael Natterer','libgmp: move the remaining legacy code to gimplegacy, even plug_in_info  add gimplegacy-private.h to keep it separate from gimp-private.h.  the legacy code could now be removed and gimpplugin-ported plug-ins would not notice.','gimp.c','710','116','75','114','false','false','false','2019-08-06 23:06:15+02:00'),('gimp','2_10_12','cc5e9240d2e592bffeda44e8a5a45339e3a9ae58','Michael Natterer','libgmp: move the remaining legacy code to gimplegacy, even plug_in_info  add gimplegacy-private.h to keep it separate from gimp-private.h.  the legacy code could now be removed and gimpplugin-ported plug-ins would not notice.','gimp.c','710','116','75','114','false','false','false','2019-08-06 23:06:15+02:00'),('gimp','2_10_12','877a116667faed9a38405f1f19fcff0122b2087e','Michael Natterer','libgimp: fix typo in g_os_win32 code','gimp.c','710','116','1','1','true','false','false','2019-08-06 23:54:34+02:00'),('gimp','2_10_12','f90e19091d79a2c3fe409d9bdb2d61abde05631a','Michael Natterer','libgimpconfig: make gimpconfigwriter a boxed type','gimpconfigwriter.c','485','95','107','20','false','false','false','2019-08-07 21:51:30+02:00'),('gimp','2_10_12','103a7e4fc38d667aa035ef6cad8218c4b03edab2','Michael Natterer','plug-ins: port script-fu to gimpplugin  this probably has some bugs, but worked flawlessly in my tests...','scheme-wrapper.c','1239','210','416','437','true','false','false','2019-08-12 20:49:08+02:00'),('gimp','2_10_12','d2add325bb48bd7ab6ab6988eb42439e6ba15375','Michael Natterer','libgimp: remove more legacy api that isn\'t used any longer by any plug-in','gimplegacy.c','938','206','3','236','false','false','false','2019-08-13 11:20:52+02:00'),('gimp','2_10_12','358bbd932c59e44ab9a91d533f0429fe7e4d2bc9','Michael Natterer','plug-ins: port print to gimpplugin','print.c','388','36','188','125','false','false','false','2019-08-13 19:41:52+02:00'),('gimp','2_10_12','966c49d08eda586ee51cdee5ce0c9f3428d22332','Michael Natterer','plug-ins: remove some crack code from curve-bend  containing the last use of gimp_run_procedure().','curve-bend.c','2454','288','0','85','false','false','false','2019-08-14 00:11:21+02:00'),('gimp','2_10_12','6801857b9c4d3bd71171a86ceaf3128516389f00','Michael Natterer','libgimp: remove all support for temp procs from gimplegacy.[ch]','gimplegacy.c','554','100','8','233','false','false','false','2019-08-14 19:16:33+02:00'),('gimp','2_10_12','bb8d18ed39a49616ae7f6767f7b5b80a531434e2','Michael Natterer','plug-ins: port mail to gimpplugin','mail.c','635','65','200','130','false','false','false','2019-08-14 22:06:19+02:00'),('gimp','2_10_12','5c4fa2de51902e77b96fc09afee6c50093e7d933','Michael Natterer','plug-ins: port screenshot to gimpplugin','screenshot.c','668','82','170','133','false','false','false','2019-08-15 11:48:05+02:00'),('gimp','2_10_12','15019fef52e8661d2059347b183ef5222b0cc4ba','Michael Natterer','plug-ins: port many plug-ins from gimpprocedure to gimpimageprocedure  also move the call to set_icon_name() after set_menu_label(), all ported plug-ins should look the same so we are a good example for copy and paste ;)','print.c','374','35','14','32','false','false','false','2019-08-18 13:45:58+02:00'),('gimp','2_10_12','17648ead8663cf84aa588d561549cee8ffc2888c','Michael Natterer','plug-ins: port file-fig-load to gimpplugin  and also fix a glitch in my earlier g_strlcpy() commit that would keep most gifs from being loaded, oops.','file-gif-load.c','983','166','226','143','true','false','false','2019-08-18 15:04:57+02:00'),('gimp','2_10_12','de121374ef7c4809294d406e45e76954b0b4a1a7','Michael Natterer','change the \"handles uri\" flag of file procedures to \"handle remote\"  and always pass uris to all file procedures, the ones what didn\'t register as \"handles remove\" will only ever get local file:// uris.  change all file plug-ins (also legacy ones) to expect uris instead of filenames, and convert to local paths in the plug-in.  the wire protocol should now be almost 100% clean of non-utf-8 strings.','file-tga.c','1122','183','7','2','false','false','false','2019-08-19 12:05:12+02:00'),('gimp','2_10_12','4cb4b3ef3af31b6e70cbc56f7d27f973579b6ad7','Michael Natterer','plug-ins: port all plug-ins to the new macros','screenshot.c','654','82','8','9','false','false','false','2019-08-20 01:03:38+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimp_pdb.h','9','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpbrush_pdb.h','45','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpbrushes_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpbrushselect_pdb.h','14','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpbuffer_pdb.h','11','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpchannel_pdb.h','36','0','50','36','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpcontext_pdb.h','120','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpdebug_pdb.h','4','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpdisplay_pdb.h','12','0','26','12','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpdrawable_pdb.h','73','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpdrawablecolor_pdb.h','61','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpdrawableedit_pdb.h','23','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpdynamics_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpedit_pdb.h','23','0','39','25','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpfileops_pdb.h','54','0','53','39','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpfloatingsel_pdb.h','7','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpfonts_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpfontselect_pdb.h','8','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpgimprc_pdb.h','11','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpgradient_pdb.h','102','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpgradients_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpgradientselect_pdb.h','9','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimphelp_pdb.h','4','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimage_pdb.h','319','0','412','398','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimagecolorprofile_pdb.h','38','0','57','42','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimageconvert_pdb.h','28','0','44','30','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimagegrid_pdb.h','48','0','71','56','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimageguides_pdb.h','26','0','45','30','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimagesamplepoints_pdb.h','22','0','39','24','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimageselect_pdb.h','74','0','94','79','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimagetransform_pdb.h','38','0','57','42','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpimageundo_pdb.h','16','0','36','21','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpitem_pdb.h','49','0','62','48','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpitemtransform_pdb.h','59','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimplayer_pdb.h','81','0','97','83','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpmessage_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppainttools_pdb.h','72','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppalette_pdb.h','33','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppalettes_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppaletteselect_pdb.h','8','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppattern_pdb.h','12','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppatterns_pdb.h','5','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppatternselect_pdb.h','8','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimppdb_pdb.h','34','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpplugin_pdb.h','16','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpprogress_pdb.h','12','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpselection_pdb.h','59','0','85','71','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimptextlayer_pdb.h','58','0','71','57','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimptexttool_pdb.h','30','0','43','29','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpunit_pdb.h','21','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','gimpvectors_pdb.h','129','0','147','133','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','fec6034c7ae5a768a8db7f7b7f7f7737e3311de2','Jehan','pdb: keep both the old and new api alive.  by default the new api will be used. but if we build with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.  this way, we don\'t have to update all our plug-ins at once (which i tried and is very tedious work).  note that bindings won\'t have access to the deprecated api at all.','lib.pl','843','42','150','104','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpchannel.h','14','0','16','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpexport.h','32','0','19','4','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpimage.h','57','0','34','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpimagecolorprofile.h','18','0','23','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpimagecombobox.h','13','0','20','3','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpimagemetadata.h','42','0','40','1','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimpitemcombobox.h','36','0','36','5','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','09f0530dab08c8803b34743f576095a20b14b46f','Jehan','libgimp: update non-generated api to allow old and new api.  same as previous commit: by default the new api will be used. but if a plug-in builds with gimp_deprecated_replace_new_api macro, then the same function names will call the old api with ids.','gimplayer.h','41','0','35','1','false','true','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpdrawable_pdb.h','144','0','124','30','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpdrawablecolor_pdb.h','120','0','91','19','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpdrawableedit_pdb.h','44','0','49','23','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpedit_pdb.h','34','0','33','15','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpfileops_pdb.h','54','0','17','17','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpfloatingsel_pdb.h','12','0','15','7','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpitem_pdb.h','94','0','115','37','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpitemtransform_pdb.h','116','0','125','59','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimplayer_pdb.h','134','0','164','79','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimppainttools_pdb.h','142','0','110','24','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimpselection_pdb.h','62','0','35','30','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimptextlayer_pdb.h','104','0','116','41','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','79b319cf9db6d99a5c93d12a50d50a6546650a56','Jehan','libgimp, pdb: add gimpitem > gimpdrawable > gimplayer classes.  only class and subclasses creation and pdb generation for this first step. i\'ll later do other types of items.','gimptexttool_pdb.h','30','0','10','10','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','3f1491e5720eaf94a73a7a0baf454743e8792802','Jehan','libgimp: update non-generated api using gimpitem/gimpdrawable/gimplayer.  i did the same trick with gimp_deprecated_replace_new_api macro, apart for some minor widget api to preview drawable, which i will fix right away in our plug-ins.','gimpdrawable.h','78','0','56','8','true','true','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','3f1491e5720eaf94a73a7a0baf454743e8792802','Jehan','libgimp: update non-generated api using gimpitem/gimpdrawable/gimplayer.  i did the same trick with gimp_deprecated_replace_new_api macro, apart for some minor widget api to preview drawable, which i will fix right away in our plug-ins.','gimpexport.h','32','0','1','1','true','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','3f1491e5720eaf94a73a7a0baf454743e8792802','Jehan','libgimp: update non-generated api using gimpitem/gimpdrawable/gimplayer.  i did the same trick with gimp_deprecated_replace_new_api macro, apart for some minor widget api to preview drawable, which i will fix right away in our plug-ins.','gimplayer.h','62','0','24','22','true','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','3f1491e5720eaf94a73a7a0baf454743e8792802','Jehan','libgimp: update non-generated api using gimpitem/gimpdrawable/gimplayer.  i did the same trick with gimp_deprecated_replace_new_api macro, apart for some minor widget api to preview drawable, which i will fix right away in our plug-ins.','gimpselection.h','10','0','18','4','true','true','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpchannel.h','34','0','35','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpchannel_pdb.h','52','0','59','34','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpdisplay_pdb.h','15','0','16','10','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpimageguides_pdb.h','26','0','7','7','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpimagesamplepoints_pdb.h','22','0','5','5','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpprogress_pdb.h','14','0','5','4','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpselection.h','29','0','33','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8c95499e14791e9b7b57dd9c401fb6c05535457e','Jehan','pdb, libgimp: now make all id types classes of their own.  no need of is_id_arg() anymore in pdb/lib.pl. let\'s reuse the {id} value. also i had to add an additional trick for gimpdisplay which we will now generate as such in libgimp pdb files, but still need to show as gimpobject on app/pdb/.  as previously, only the new classes and the pdb generation for a first step.','gimpvectors_pdb.h','212','0','169','66','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','5e6d4d8fbde137cad828a2aef479357c42d3fa86','Jehan','libgimp: fix the non-generated api with the new class types.','gimpchannel.h','34','0','6','6','true','true','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','5e6d4d8fbde137cad828a2aef479357c42d3fa86','Jehan','libgimp: fix the non-generated api with the new class types.','gimpui.h','31','0','20','3','true','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','75f8a3804d42c8bafe54bc35ecdf88e5e268c5dc','Jehan','libgimp: nicer api for functions returning a list.  i.e.: gimp_image_get_(layers|channels|vectors)(), gimp_image_list() and gimp_item_get_children(). instead of returning an array of ids, these will now return a glist with the right objects ready to use.','gimpimage.h','68','0','17','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','75f8a3804d42c8bafe54bc35ecdf88e5e268c5dc','Jehan','libgimp: nicer api for functions returning a list.  i.e.: gimp_image_get_(layers|channels|vectors)(), gimp_image_list() and gimp_item_get_children(). instead of returning an array of ids, these will now return a glist with the right objects ready to use.','gimpimage_pdb.h','297','0','4','13','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','75f8a3804d42c8bafe54bc35ecdf88e5e268c5dc','Jehan','libgimp: nicer api for functions returning a list.  i.e.: gimp_image_get_(layers|channels|vectors)(), gimp_image_list() and gimp_item_get_children(). instead of returning an array of ids, these will now return a glist with the right objects ready to use.','gimpitem.h','28','0','14','0','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','75f8a3804d42c8bafe54bc35ecdf88e5e268c5dc','Jehan','libgimp: nicer api for functions returning a list.  i.e.: gimp_image_get_(layers|channels|vectors)(), gimp_image_list() and gimp_item_get_children(). instead of returning an array of ids, these will now return a glist with the right objects ready to use.','gimpitem_pdb.h','92','0','46','49','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','75f8a3804d42c8bafe54bc35ecdf88e5e268c5dc','Jehan','libgimp: nicer api for functions returning a list.  i.e.: gimp_image_get_(layers|channels|vectors)(), gimp_image_list() and gimp_item_get_children(). instead of returning an array of ids, these will now return a glist with the right objects ready to use.','gimpitemcombobox.h','36','0','1','1','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','a1eeca490f26e9fa74a5d4dcc35fd3e2f43681a0','Jehan','libgimp: support all gimpitem subclasses as argument and return values.','gimpgpparams-body.c','552','129','66','16','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','08849a584c4c7a3288b028f3f03e98ffb44e5bb6','Jehan','libgimp: gimpitem now also belong to libgimp.','gimpitem.h','28','0','1','1','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','9f0dbb57598e84bb2d56461774655a8ec0aead95','Jehan','plug-ins: port screenshot to gimpimage/gimpdrawable.','screenshot-x11.c','486','89','22','22','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','9f0dbb57598e84bb2d56461774655a8ec0aead95','Jehan','plug-ins: port screenshot to gimpimage/gimpdrawable.','screenshot.c','653','82','18','18','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','9f0dbb57598e84bb2d56461774655a8ec0aead95','Jehan','plug-ins: port screenshot to gimpimage/gimpdrawable.','screenshot.c','653','82','18','18','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','9f0dbb57598e84bb2d56461774655a8ec0aead95','Jehan','plug-ins: port screenshot to gimpimage/gimpdrawable.','screenshot.c','653','82','18','18','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','8f34af49b767edc4f73d743dc890f87be1017074','Jehan','plug-ins: port file-png to gimpimage/gimpdrawable.','file-png.c','1833','263','88','88','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','00e750776a18fef9451a5be8703789afb78f5fc4','Jehan','plug-ins: port print to gimpimage/gimpdrawable/etc.','print.c','372','35','42','42','false','false','false','2019-08-22 15:54:36+02:00'),('gimp','2_10_12','bbf90b3ba5284817dfb000df6f20e1a4693480b0','Jehan','plug-ins: port film to gimpimage/gimpdrawable.','film.c','1050','88','138','123','false','false','false','2019-08-22 15:54:37+02:00'),('gimp','2_10_12','6e68f1868526c4ac99b3ee84ac651389e06377c3','Jehan','plug-ins: port file-ps to gimpimage/gimpdrawable.','file-ps.c','2995','524','141','140','false','false','false','2019-08-22 15:54:37+02:00'),('gimp','2_10_12','858ab51f44162fe2fc2beb653bdf1c81486c9b12','Jehan','plug-ins: port file-gif-load to new libgimp objects.','file-gif-load.c','949','166','76','76','false','false','false','2019-08-22 23:41:36+02:00'),('gimp','2_10_12','7201d482314dfadd03430df5770569ae0d151568','Michael Natterer','get rid of capitalized \"id\" in function and variable names  and use \"id\" instead.','gimppluginshm.c','161','22','18','18','false','false','false','2019-08-23 22:23:23+02:00'),('gimp','2_10_12','7201d482314dfadd03430df5770569ae0d151568','Michael Natterer','get rid of capitalized \"id\" in function and variable names  and use \"id\" instead.','gimppluginshm.c','161','22','18','18','false','false','false','2019-08-23 22:23:23+02:00'),('gimp','2_10_12','773586f0c4d9f283e5e973de493c8f28b18b4e11','Michael Natterer','libgimp: make gimpgpparams-body.c identical for app/ and libgimp/ again  use direct gtype comparisons where possible, special case layer because it has core subclasses but only one pdb type, special case display because it\'s not visible from app/plug-in/, make code for gpparamdef and gpparam look the same.','gimpgpparams-body.c','599','128','107','62','false','false','false','2019-08-23 23:31:19+02:00'),('gimp','2_10_12','e1c2150f645337d9c1e685ce29367633eca0d5f1','Michael Natterer','plug-ins: port file-heif to gimpplugin and libgimp objects','file-heif.c','967','102','290','276','false','false','false','2019-08-24 10:23:01+02:00'),('gimp','2_10_12','9f3bc2bd7a6aa11c02851ad9b4613abe7f012f56','Michael Natterer','plug-ins: port file-xbm to gimpplugin and libgimp objects','file-xbm.c','1084','161','385','353','false','false','false','2019-08-24 10:58:34+02:00'),('gimp','2_10_12','44ebcee901f25180b8b9b04f6d26474919557f0d','Michael Natterer','plug-ins: port file-xwd to gimpplugin and libgimp objects','file-xwd.c','1963','409','371','355','false','false','false','2019-08-24 16:46:40+02:00'),('gimp','2_10_12','98470729785bc8cebde440c248a8616aa13155b8','Michael Natterer','plug-ins: port file-faxg3 to gimpplugin and libgimp objects  no idea if this works, i didn\'t find an example image.','faxg3.c','413','65','125','109','false','false','false','2019-08-24 18:08:31+02:00'),('gimp','2_10_12','0ae833b0e01f1dacfbe8330bdc9f56e3428e9ae4','Michael Natterer','plug-ins: port file-tga to gimpplugin and libgimp objects','file-tga.c','1126','179','275','277','false','false','false','2019-08-24 18:34:53+02:00'),('gimp','2_10_12','7f65383ad4e368463320de9b6ec91e6d42a8705f','Michael Natterer','plug-ins: port file-xpm to gimpplugin and to libgimp objects','file-xpm.c','626','75','290','268','false','false','false','2019-08-24 18:56:03+02:00'),('gimp','2_10_12','0b3e02be10eeff73a258e36fa5acaeb10a5bfe85','Michael Natterer','libgimp: again, redo all apis returning list of images, items, children  we now have both variants, one returning a glist, and another returning an array. turns out that while a list is often nicer, sometimes a random-access array really keeps the code much simpler.  adapt all plug-ins, and clean up a bit (like use g_list_reverse() once instead of iterating the list reversed).','gimpimage.h','75','0','12','4','false','false','false','2019-08-27 13:26:27+02:00'),('gimp','2_10_12','0b3e02be10eeff73a258e36fa5acaeb10a5bfe85','Michael Natterer','libgimp: again, redo all apis returning list of images, items, children  we now have both variants, one returning a glist, and another returning an array. turns out that while a list is often nicer, sometimes a random-access array really keeps the code much simpler.  adapt all plug-ins, and clean up a bit (like use g_list_reverse() once instead of iterating the list reversed).','gimpitem.h','30','0','6','4','false','false','false','2019-08-27 13:26:27+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpchannel.h','28','0','2','19','false','true','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpexport.h','28','0','0','15','false','false','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpimagecolorprofile.h','10','0','0','23','false','false','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpimagecombobox.h','8','0','7','24','false','false','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpimagemetadata.h','22','0','19','60','false','false','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimplayer.h','55','0','2','9','false','false','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpselection.h','25','0','5','18','false','true','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','96c1f754ba0a8c70ef83caea042becfeb0ccd47b','Michael Natterer','libgimp: remove a ton of deprecated api that is unused','gimpui.h','28','0','0','15','false','false','false','2019-08-27 16:32:25+02:00'),('gimp','2_10_12','f57725a96a34310bccccfb144f28a6eedecd1d76','Michael Natterer','libgimp: add instance-private struct to all new objects  just in case we need it later.','gimpdrawable.h','59','0','6','1','false','false','false','2019-08-27 16:47:17+02:00'),('gimp','2_10_12','f57725a96a34310bccccfb144f28a6eedecd1d76','Michael Natterer','libgimp: add instance-private struct to all new objects  just in case we need it later.','gimpitem.h','29','0','4','4','false','false','false','2019-08-27 16:47:17+02:00'),('gimp','2_10_12','392f00baf5dfdfe118b9a9a4935e28ab7fdd25b9','Michael Natterer','app, libgimp: get rid of all id gtypes and id param specs  turn all id param specs into object param specs (e.g. gimpparamimageid becomes gimpparamimage) and convert between ids and objects in gimpgpparams.c directly above the the wire protocol, so all of app/, libgimp/ and plug-ins/ can deal directly with objects down to the lowest level and not care about ids.  use the actual object param specs for procedure arguments and return values again instead of a plain g_param_spec_object() and bring back the none_ok parameter.  this implies changing the pdb type checking functions to work on pure integers instead of ids (one can\'t check whether object creation is possible if performing that check requires the object to already exist).  for example gimp_foo_is_valid() becomes gimp_foo_id_is_valid() and is not involved in automatic object creation magic at the protocol level. added wrappers which still say gimp_foo_is_valid() and take the respective objects.  adapted all code, and it all becomes nicer and less convoluted, even the generated pdb wrappers in app/ and libgimp/.','gimpdisplay_pdb.h','14','0','2','4','false','false','false','2019-08-29 11:39:34+02:00'),('gimp','2_10_12','392f00baf5dfdfe118b9a9a4935e28ab7fdd25b9','Michael Natterer','app, libgimp: get rid of all id gtypes and id param specs  turn all id param specs into object param specs (e.g. gimpparamimageid becomes gimpparamimage) and convert between ids and objects in gimpgpparams.c directly above the the wire protocol, so all of app/, libgimp/ and plug-ins/ can deal directly with objects down to the lowest level and not care about ids.  use the actual object param specs for procedure arguments and return values again instead of a plain g_param_spec_object() and bring back the none_ok parameter.  this implies changing the pdb type checking functions to work on pure integers instead of ids (one can\'t check whether object creation is possible if performing that check requires the object to already exist).  for example gimp_foo_is_valid() becomes gimp_foo_id_is_valid() and is not involved in automatic object creation magic at the protocol level. added wrappers which still say gimp_foo_is_valid() and take the respective objects.  adapted all code, and it all becomes nicer and less convoluted, even the generated pdb wrappers in app/ and libgimp/.','gimpgpparams-body.c','517','103','76','149','false','false','false','2019-08-29 11:39:34+02:00'),('gimp','2_10_12','392f00baf5dfdfe118b9a9a4935e28ab7fdd25b9','Michael Natterer','app, libgimp: get rid of all id gtypes and id param specs  turn all id param specs into object param specs (e.g. gimpparamimageid becomes gimpparamimage) and convert between ids and objects in gimpgpparams.c directly above the the wire protocol, so all of app/, libgimp/ and plug-ins/ can deal directly with objects down to the lowest level and not care about ids.  use the actual object param specs for procedure arguments and return values again instead of a plain g_param_spec_object() and bring back the none_ok parameter.  this implies changing the pdb type checking functions to work on pure integers instead of ids (one can\'t check whether object creation is possible if performing that check requires the object to already exist).  for example gimp_foo_is_valid() becomes gimp_foo_id_is_valid() and is not involved in automatic object creation magic at the protocol level. added wrappers which still say gimp_foo_is_valid() and take the respective objects.  adapted all code, and it all becomes nicer and less convoluted, even the generated pdb wrappers in app/ and libgimp/.','gimpimage_pdb.h','296','0','2','4','false','false','false','2019-08-29 11:39:34+02:00'),('gimp','2_10_12','392f00baf5dfdfe118b9a9a4935e28ab7fdd25b9','Michael Natterer','app, libgimp: get rid of all id gtypes and id param specs  turn all id param specs into object param specs (e.g. gimpparamimageid becomes gimpparamimage) and convert between ids and objects in gimpgpparams.c directly above the the wire protocol, so all of app/, libgimp/ and plug-ins/ can deal directly with objects down to the lowest level and not care about ids.  use the actual object param specs for procedure arguments and return values again instead of a plain g_param_spec_object() and bring back the none_ok parameter.  this implies changing the pdb type checking functions to work on pure integers instead of ids (one can\'t check whether object creation is possible if performing that check requires the object to already exist).  for example gimp_foo_is_valid() becomes gimp_foo_id_is_valid() and is not involved in automatic object creation magic at the protocol level. added wrappers which still say gimp_foo_is_valid() and take the respective objects.  adapted all code, and it all becomes nicer and less convoluted, even the generated pdb wrappers in app/ and libgimp/.','gimpitem.h','37','0','9','0','false','false','false','2019-08-29 11:39:34+02:00'),('gimp','2_10_12','392f00baf5dfdfe118b9a9a4935e28ab7fdd25b9','Michael Natterer','app, libgimp: get rid of all id gtypes and id param specs  turn all id param specs into object param specs (e.g. gimpparamimageid becomes gimpparamimage) and convert between ids and objects in gimpgpparams.c directly above the the wire protocol, so all of app/, libgimp/ and plug-ins/ can deal directly with objects down to the lowest level and not care about ids.  use the actual object param specs for procedure arguments and return values again instead of a plain g_param_spec_object() and bring back the none_ok parameter.  this implies changing the pdb type checking functions to work on pure integers instead of ids (one can\'t check whether object creation is possible if performing that check requires the object to already exist).  for example gimp_foo_is_valid() becomes gimp_foo_id_is_valid() and is not involved in automatic object creation magic at the protocol level. added wrappers which still say gimp_foo_is_valid() and take the respective objects.  adapted all code, and it all becomes nicer and less convoluted, even the generated pdb wrappers in app/ and libgimp/.','gimpitem_pdb.h','84','0','8','25','false','false','false','2019-08-29 11:39:34+02:00'),('gimp','2_10_12','8a78203aed1a67a05c1e334bdda85e7343520883','Michael Natterer','properly prefix the values of enum gimppdbproctype  to be gimp_pdb_proc_type_plugin, _extension etc.','gimplegacy.h','76','0','5','0','false','false','false','2019-08-30 12:52:28+02:00'),('gimp','2_10_12','8a78203aed1a67a05c1e334bdda85e7343520883','Michael Natterer','properly prefix the values of enum gimppdbproctype  to be gimp_pdb_proc_type_plugin, _extension etc.','gimplegacy.h','76','0','5','0','false','false','false','2019-08-30 12:52:28+02:00'),('gimp','2_10_12','8a78203aed1a67a05c1e334bdda85e7343520883','Michael Natterer','properly prefix the values of enum gimppdbproctype  to be gimp_pdb_proc_type_plugin, _extension etc.','print.c','375','35','6','3','false','false','false','2019-08-30 12:52:28+02:00'),('gimp','2_10_12','4364b784468f5043e07de45a169eb6fb15947ce0','Michael Natterer','libgimp: remove the gimp_disable_compat_cruft define  there is no legacy api left a ported plug-in could accidentially use.','gimplegacy.h','76','0','0','3','false','false','false','2019-08-30 13:00:00+02:00'),('gimp','2_10_12','4364b784468f5043e07de45a169eb6fb15947ce0','Michael Natterer','libgimp: remove the gimp_disable_compat_cruft define  there is no legacy api left a ported plug-in could accidentially use.','gimplegacy.h','76','0','0','3','false','false','false','2019-08-30 13:00:00+02:00'),('gimp','2_10_12','e4c0e9cf4c3b9d3379e488bb089e19cd7bfbd2ce','Michael Natterer','plug-ins: port animation-optimize to gimpplugin','animation-optimize.c','1047','171','254','203','false','false','false','2019-08-31 11:29:47+02:00'),('gimp','2_10_12','d67eb6f438214aefb1d3ca6f90cee76e3257684e','Michael Natterer','libgimp: remove all deprecated stuff from gimpimage.[ch]','gimpimage.h','52','0','0','18','false','false','false','2019-08-31 12:10:06+02:00'),('gimp','2_10_12','3b653659825db22cbc6814fc3a30bafb15e57a63','Michael Natterer','plug-ins: port gradient-flare to gimpplugin','gradient-flare.c','3947','403','314','245','false','false','false','2019-09-02 12:43:10+02:00'),('gimp','2_10_12','fd5740e70ba4c5c1a2324592f2a4f49d4187a69e','Michael Natterer','libgimp: add gimp_layer,chanel,vectors,etc,_get_by_id()  which call gimp_item_get_by_id() and additionally check if the returned item has the right type, and return null if not.  this is both shorter and more readable than  layer = gimp_layer (gimp_item_get_by_id (id));  and additionally makes sure we don\'t cast e.g. a non-layer with gimp_layer(), which will give criticals but shouldn\'t, because the wrong ids can come from anywhere and are an input problem and not a programming error (criticals are for programming errors).','gimpdrawable.h','56','0','34','32','true','false','false','2019-09-03 10:24:24+02:00'),('gimp','2_10_12','fd5740e70ba4c5c1a2324592f2a4f49d4187a69e','Michael Natterer','libgimp: add gimp_layer,chanel,vectors,etc,_get_by_id()  which call gimp_item_get_by_id() and additionally check if the returned item has the right type, and return null if not.  this is both shorter and more readable than  layer = gimp_layer (gimp_item_get_by_id (id));  and additionally makes sure we don\'t cast e.g. a non-layer with gimp_layer(), which will give criticals but shouldn\'t, because the wrong ids can come from anywhere and are an input problem and not a programming error (criticals are for programming errors).','gimplayer.h','51','0','2','0','true','false','false','2019-09-03 10:24:24+02:00'),('gimp','2_10_12','9e771d8cd5338b00f5a7ff7eb615d8147640596b','Michael Natterer','libgimp: remove more deprecated api','gimpitem.h','35','0','17','28','false','false','false','2019-09-03 11:10:43+02:00'),('gimp','2_10_12','9e771d8cd5338b00f5a7ff7eb615d8147640596b','Michael Natterer','libgimp: remove more deprecated api','gimpitemcombobox.h','21','0','0','19','false','false','false','2019-09-03 11:10:43+02:00'),('gimp','2_10_12','80340f2d47fcfcc446df9a65741abf7d67f671fa','Michael Natterer','libgimp: remove the last manual compat wrappers','gimpdrawable.h','53','0','0','13','false','false','false','2019-09-03 12:04:05+02:00'),('gimp','2_10_12','80340f2d47fcfcc446df9a65741abf7d67f671fa','Michael Natterer','libgimp: remove the last manual compat wrappers','gimplayer.h','43','0','0','19','false','false','false','2019-09-03 12:04:05+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimp_pdb.h','9','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpbrush_pdb.h','45','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpbrushes_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpbrushselect_pdb.h','14','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpbuffer_pdb.h','11','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpchannel_pdb.h','27','0','0','43','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpcontext_pdb.h','120','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpdebug_pdb.h','4','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpdisplay_pdb.h','9','0','2','25','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpdrawable_pdb.h','73','0','0','84','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpdrawablecolor_pdb.h','61','0','0','88','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpdrawableedit_pdb.h','23','0','0','42','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpdynamics_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpedit_pdb.h','18','0','0','41','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpfileops_pdb.h','37','0','35','71','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpfloatingsel_pdb.h','7','0','0','24','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpfonts_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpfontselect_pdb.h','8','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpgimprc_pdb.h','11','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpgradient_pdb.h','102','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpgradients_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpgradientselect_pdb.h','9','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimphelp_pdb.h','4','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimage_pdb.h','161','0','2','223','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimagecolorprofile_pdb.h','20','0','0','23','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimageconvert_pdb.h','17','0','15','44','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimagegrid_pdb.h','25','0','0','48','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimageguides_pdb.h','14','0','0','33','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimagesamplepoints_pdb.h','12','0','0','29','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimageselect_pdb.h','38','0','0','58','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimagetransform_pdb.h','20','0','0','39','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpimageundo_pdb.h','9','0','0','29','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpitem_pdb.h','48','0','8','82','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpitemtransform_pdb.h','59','0','0','82','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimplayer_pdb.h','68','0','0','105','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpmessage_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppainttools_pdb.h','72','0','0','102','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppalette_pdb.h','33','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppalettes_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppaletteselect_pdb.h','8','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppattern_pdb.h','12','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppatterns_pdb.h','5','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppatternselect_pdb.h','8','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimppdb_pdb.h','34','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpplugin_pdb.h','16','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpprogress_pdb.h','12','0','2','17','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpselection_pdb.h','32','0','0','56','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimptextlayer_pdb.h','53','0','0','95','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimptexttool_pdb.h','20','0','18','43','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpunit_pdb.h','21','0','0','16','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','gimpvectors_pdb.h','107','0','0','145','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','71ccaa21ee541e9182406db6b2ee146d6c256e7e','Jehan','pdb, libgimp: remove double api generation from pdb.  all plug-ins got ported. let\'s remove support for the old api with ids instead of objects.','lib.pl','746','34','20','130','false','false','false','2019-09-03 13:31:27+02:00'),('gimp','2_10_12','a351ce9126ba2755bfdea00fd647d1635fbb1d14','Michael Natterer','remove the entire old plug-in interface','gimplegacy.h','None','None','0','274','false','false','false','2019-09-04 00:03:12+02:00'),('gimp','2_10_12','a351ce9126ba2755bfdea00fd647d1635fbb1d14','Michael Natterer','remove the entire old plug-in interface','gimplegacy.h','None','None','0','274','false','false','false','2019-09-04 00:03:12+02:00'),('gimp','2_10_12','a351ce9126ba2755bfdea00fd647d1635fbb1d14','Michael Natterer','remove the entire old plug-in interface','gimplegacy.h','None','None','0','274','false','false','false','2019-09-04 00:03:12+02:00'),('gimp','2_10_12','a351ce9126ba2755bfdea00fd647d1635fbb1d14','Michael Natterer','remove the entire old plug-in interface','gimplegacy.h','None','None','0','274','false','false','false','2019-09-04 00:03:12+02:00'),('gimp','2_10_12','b92dd2c8e31c2b555a11ca9d225088c8a648d566','Michael Natterer','app: split gimpdisplay in two classes: gimpdisplay and gimpdisplayimpl  gimpdisplay contains only the id logic and the \"gimp\" and \"config\" pointers, and lives in the core.  gimpdisplayimpl is a subclass and contains all the actual display stuff. the subclass is only an implementation detail and doesn\'t appear in any api.  remove all hacks which pass displays as gpointer, gobject or gimpobject through the core, or even lookup its type by name, just use gimpdisplay.','gimpgpparams-body.c','701','150','7','21','false','false','false','2019-09-04 14:30:43+02:00'),('gimp','2_10_12','4e8fa887055f6245c627471e691c3e2453c86fdb','Ell','app: in preferences dialog, swap position of default-appearance columns  ... to match their menu order.','preferences-dialog.c','2492','105','17','17','false','false','false','2019-09-04 19:19:41+03:00'),('gimp','2_10_12','86dc451bce69b33b29c7cf46a02864cc75fc8fcf','Ell','app, menus: add \"show all\" mode to gimpdisplayshell; \"view -> show all\" toggle  add a \"show all\" mode to gimpdisplayshell, controlled through a corresponding \"view -> show all\" menu item.  when enabled, the entire image content is displayed, instead of cropping the image to the canvas size.  more generally, the display behaves as if the canvas were infinite.  the following commits improve the overall behavior in this mode.  add a prefernces option to control the default \"show all\" state.','gimpdisplayshell-render.c','345','38','12','5','false','false','false','2019-09-04 20:47:21+03:00'),('gimp','2_10_12','99759a57e8ffa671f149494eff12c4986c7e4ca5','Ell','app: in gimp_pickable_contiguous_region_by_seed(), add support for arbitrary buffer extents','gimppickable-contiguous-region.cc','876','177','25','20','false','false','false','2019-09-05 18:04:11+03:00'),('gimp','2_10_12','99759a57e8ffa671f149494eff12c4986c7e4ca5','Ell','app: in gimp_pickable_contiguous_region_by_seed(), add support for arbitrary buffer extents','gimppickable-contiguous-region.cc','876','177','25','20','false','false','false','2019-09-05 18:04:11+03:00'),('gimp','2_10_12','b587740a101c588794237292c3f6a25c431612c0','Michael Natterer','libgimp: make sure the gimpplugin and gimppdb singletons get destroyed  break reference cycles between the objects and the procedures they keep by moving procedure destruction to dispose() and calling g_object_run_dispose() before unrefing plug_in and pdb in gimp.c.  also some formatting and \"since: 3.0\" annotation .','gimp.h','60','0','2','0','false','false','false','2019-09-09 11:16:39+02:00'),('gimp','2_10_12','a2b74147c9bdcf6ee03c6ed8049254ef47b6e810','lillolollo','fixing error on windors meson build','gimppluginmanager-file.c','675','157','4','0','true','false','false','2019-09-11 17:21:17+00:00'),('gimp','2_10_12','d710e96d818f7eb7b7aede0c3fdebe5ab58dbd17','Ell','issue #3781 - display artifacts on hidpi when render cache is invalidated  in gimpdisplayshell, scale the render cache by the window\'s scale factor, and render its content in device pixels, instead of scaled application pixels.  when painting the cache to the screen, unscale the cairo context by the same factor, so that it\'s painted in the native resolution.  note that the various gimp_display_shell_render_foo() functions still speak in application pixels, and the scaling happens internally in gimp_display_shell_render().  aside from rendering at native resolution on hidpi, this also fixes an issue where grid-like display artifacts would appear when the render cache was not fully validated due to the non-native scaling.','gimpdisplayshell-draw.c','165','17','8','6','true','false','false','2019-09-11 21:19:26+03:00'),('gimp','2_10_12','6bca8c4f8970d976c731463f938ae39df3c3fd4c','Michael Natterer','pdb, app, libgimp, plug-ins: replace most pdb filenames/uris by gfile  and in an attack of madness, changes almost all file plug-in code to use gfile instead of filenames, which means passing the gfile down to the bottom and get its filename at the very end where it\'s actually needed.','file-sunras.c','1356','230','46','38','false','false','false','2019-09-11 21:48:34+02:00'),('gimp','2_10_12','6bca8c4f8970d976c731463f938ae39df3c3fd4c','Michael Natterer','pdb, app, libgimp, plug-ins: replace most pdb filenames/uris by gfile  and in an attack of madness, changes almost all file plug-in code to use gfile instead of filenames, which means passing the gfile down to the bottom and get its filename at the very end where it\'s actually needed.','file-xwd.c','1965','409','52','53','false','false','false','2019-09-11 21:48:34+02:00'),('gimp','2_10_12','6bca8c4f8970d976c731463f938ae39df3c3fd4c','Michael Natterer','pdb, app, libgimp, plug-ins: replace most pdb filenames/uris by gfile  and in an attack of madness, changes almost all file plug-in code to use gfile instead of filenames, which means passing the gfile down to the bottom and get its filename at the very end where it\'s actually needed.','bmp-load.c','786','164','30','27','false','false','false','2019-09-11 21:48:34+02:00'),('gimp','2_10_12','6468fa06c7d9badbdb03c6431c4c84655d076ba4','Michael Natterer','pdb, plug-ins: change gimp_temp_name() to gimp_temp_file()','mail.c','624','67','17','10','false','false','false','2019-09-11 22:32:44+02:00'),('gimp','2_10_12','6468fa06c7d9badbdb03c6431c4c84655d076ba4','Michael Natterer','pdb, plug-ins: change gimp_temp_name() to gimp_temp_file()','mail.c','624','67','17','10','false','false','false','2019-09-11 22:32:44+02:00'),('gimp','2_10_12','283ec1da0f62216f694316bea307f6a26e2efe1e','Sergio Jiménez Herena','issue #2221: gimptool should install plug-ins into subfolders','gimptool.c','854','181','103','30','false','true','false','2019-09-16 07:26:56+00:00'),('gimp','2_10_12','283ec1da0f62216f694316bea307f6a26e2efe1e','Sergio Jiménez Herena','issue #2221: gimptool should install plug-ins into subfolders','gimptool.c','854','181','103','30','false','true','false','2019-09-16 07:26:56+00:00'),('gimp','2_10_12','8fa7b5bc746c25b52b352334789cc72735ea9330','Jehan','tools: clean up patch from merge request !36.  commit 283ec1da0f previously pushed had some coding style bugs, which unfortunately couldn\'t be fixed before pushing because the platform doesn\'t allow it and the original contributor is not available lately. let\'s fix these.','gimptool.c','855','181','24','20','true','false','false','2019-09-16 09:53:24+02:00'),('gimp','2_10_12','1664ecbf1dc1cd60f8f7e2f16ee6ef3dfa664d43','Ell','app: add \"swap compression\" option to the preferences  add a new \"swap compression\" option to the preferences, allowing explicit control over the tile-swap compression algorithm. previously, control over swap compression was only possible through gegl command-line options/environment variables.  since the gegl api to list all available compression algorithms is still private for now, we currently only list the three predefined compression levels -- \"best performance\" (the default), \"balanced\", and \"best compression\" -- and a \"none\" option, to disable compression altogether.  selecting a custom compression algorithm is possible by entering its name manually.','preferences-dialog.c','2507','105','5','1','false','false','false','2019-09-22 17:35:14+03:00'),('gimp','2_10_12','47a8560bae8ff2c9eb6fbc1e09a291b496d644a6','lillolollo','fix meson build error ../../gimp/app/widgets/gimplanguagestore-parser.c:339:33: error: #if with no expression 339 | #if enable_relocatable_resources','gimplanguagestore-parser.c','336','61','1','1','true','false','false','2019-09-22 17:28:51+00:00'),('gimp','2_10_12','81cbc3edb72a64b13172f12204a4ceb119a1cdb9','Michael Natterer','plug-ins: port file-heif to gimpprocedureconfig  and also use an aux argument, seems to work fine.','file-heif.c','960','99','102','116','false','false','false','2019-09-24 19:35:49+02:00'),('gimp','2_10_12','1099aea7269801fe7cbbbbaf33cba0625bf94b94','Michael Natterer','plug-ins: rename all \"save-profile\" args to \"save-color-profile\"','file-heif.c','960','99','6','6','false','false','false','2019-09-25 12:50:29+02:00'),('gimp','2_10_12','4be4d828ad7750ba3ef1e9596b25ed37e84a78ef','Michael Natterer','plug-ins: port file-xbm-save to gimpprocedureconfig  and add boolean arguments to control comment and hot-spot writing. this revives comment writing, which is disabled by default and comes with a big warning in the dialog.','file-xbm.c','1056','152','222','302','false','false','false','2019-10-07 20:36:38+02:00'),('gimp','2_10_12','9b328167abdf3f4078e1de4acbe1685c9ba57d00','Jehan','libgimp: fix unused function (win32).  fixes: > libgimp/gimpui.c:402:1: warning: \'gimp_window_transient_realized\' defined but not used [-wunused-function]','gimpui.c','228','33','4','0','true','false','false','2019-10-09 16:34:51+02:00'),('gimp','2_10_12','f59b0db0c8c6b363718b5effcea1d87c16a16b35','Jehan','app, libgimp: fix more unused function warning (win32).  similar to commit 9b328167ab. apparently the same function is duplicated into app/. also add some comments to detail a bit more where this win32 different comes from (i.e. bug 359538 on bugzilla, commit eac61e1e122).  moreover i tested the same steps as comment 4 in bug 359538 on master code. the same hanging issue still exists with gtk+ 3.24.1 (in a windows vm at least). i have not investigated further, just wanted to check if this ifndef could not simply be removed by now. apparently not.','gimpwidgets-utils.c','1347','198','6','0','true','false','false','2019-10-10 14:11:40+02:00'),('gimp','2_10_12','f59b0db0c8c6b363718b5effcea1d87c16a16b35','Jehan','app, libgimp: fix more unused function warning (win32).  similar to commit 9b328167ab. apparently the same function is duplicated into app/. also add some comments to detail a bit more where this win32 different comes from (i.e. bug 359538 on bugzilla, commit eac61e1e122).  moreover i tested the same steps as comment 4 in bug 359538 on master code. the same hanging issue still exists with gtk+ 3.24.1 (in a windows vm at least). i have not investigated further, just wanted to check if this ifndef could not simply be removed by now. apparently not.','gimpui.c','228','33','3','0','true','false','false','2019-10-10 14:11:40+02:00'),('gimp','2_10_12','cf6dae6f83da514d3ddd85aaf342f95579817b2c','Jehan','libgimp: fix a type cast warning (win32).  i had this warning when cross-building for windows 64-bit:  > libgimp/gimpui.c:187:52: warning: passing argument 2 of > \'gdk_win32_window_foreign_new_for_display\' makes pointer from integer > without a cast [-wint-conversion]  > note: expected \'hwnd\' {aka \'struct hwnd__ *\'} but argument is of type \'guint32\' {aka \'unsigned int\'}','gimpui.c','228','33','1','1','true','false','false','2019-10-10 14:13:49+02:00'),('gimp','2_10_12','e21f78e577b97db4d2882bc8a7cbb3777445e733','Michael Natterer','plug-ins: add an aux \"comment\" argument to file-png-save  which is now automatically synced with the image\'s \"gimp-comment\" parasite.','file-png.c','1676','239','60','62','false','false','false','2019-10-23 19:08:33+02:00'),('gimp','2_10_12','e21f78e577b97db4d2882bc8a7cbb3777445e733','Michael Natterer','plug-ins: add an aux \"comment\" argument to file-png-save  which is now automatically synced with the image\'s \"gimp-comment\" parasite.','file-png.c','1676','239','60','62','false','false','false','2019-10-23 19:08:33+02:00'),('gimp','2_10_12','e21f78e577b97db4d2882bc8a7cbb3777445e733','Michael Natterer','plug-ins: add an aux \"comment\" argument to file-png-save  which is now automatically synced with the image\'s \"gimp-comment\" parasite.','file-png.c','1676','239','60','62','false','false','false','2019-10-23 19:08:33+02:00');
/*!40000 ALTER TABLE `gimp` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-03-14 13:38:24
